@q usrinftp.web  @>

@q Created by Laurence D. Finston (LDF) Tue May 14 13:57:28 CEST 2013  @>

@q * (1) Copyright and License.@>

@q This file is part of gwrdifpk, a package for long-term archiving.  @>
@q Copyright (C) 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen @>

@q gwrdifpk is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q gwrdifpk is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License          @>
@q along with gwrdifpk; if not, write to the Free Software                    @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from @>
@q https://github.com/gwdg/gwrdifpk.git    @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>

@q Laurence D. Finston                                                   @>
@q Kreuzbergring 41         					         @>
@q 37075 Goettingen              					 @>
@q Germany                           					 @>                                

@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>

@q * (0) |class User_Info_Type| (usrinftp.web).  @>

@*  {\bf class User\_Info\_Type} (usrinftp\PERIOD web).

@q ** (2) Include files  @>

@ Include files.

@<Include files@>=

#include <unistd.h>
#include <errno.h>
#include <string.h>

#include <stdio.h>
#include <stdlib.h>

#include <errno.h>
#include <math.h>
#include <time.h>
#include <limits.h>

#include <gcrypt.h> /* for |gcry_control| */
#include <gnutls/gnutls.h>

#include <iomanip>
#include <ios>
#include <iostream>
#include <map>
#include <fstream>
#include <sstream>   
#include <string>
#include <vector>
#include <deque>
#include <stack>
#include <set>

#include <pthread.h>
#include <expat.h>

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <mysql.h>

#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE
#endif 

#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "excptntp.h++"
#include "utilfncs.h++"
#include "grouptp.h++"
#include "hndlvltp.h++"
#include "irdsavtp.h++"
#include "helper.h++"
#include "tanfncs.h++"
#include "pidfncs.h++"
#include "parser.h++"
#include "scanner.h++"
#include "rspnstp.h++"
#include "irdsobtp.h++"
#include "hndltype.h++"
#include "dcmdsbtp.h++"
#include "dcmtdttp.h++"
#include "x509cert.h++"
#include "dstngnmt.h++"
#include "pullrqtp.h++"
#include "scprpmtp.h++"

@q ** (2) |class User_Info_Type| declaration.  @>

@ {\bf class User\_Info\_Type} declaration.
\initials{LDF 2013.05.14.}

\LOG
\initials{LDF 2013.05.14.}
Added this |class| declaration.

\initials{LDF 2013.05.16.}
Added the data member |unsigned int privileges|.

\initials{LDF 2013.05.17.}
Added the data members |X509_Cert_Type certificate|.

\initials{LDF 2013.05.22.}
Added |friend| declarations for |distinguished_name_rule_func| and |get_user_info_func|.

\initials{LDF 2013.07.18.}
Added |string irods_env_filename| and |string irods_auth_filename|.

\initials{LDF 2013.09.20.}
Added |string public_key_id|.

\initials{LDF 2014.01.08.}
Added |string handle_username| and |string handle_password_encrypted|.

\initials{LDF 2014.01.08.}
Added |friend| declaration for |client_func|.

\initials{LDF 2014.01.10.}
Changed name of |string public_key_id| to |gpg_key_id|.

\initials{LDF 2014.01.13.}
Changed name of |string gpg_key_id| to |gpg_key_fingerprint|.
Added |unsigned int gpg_key_pair_id|.

\initials{LDF 2014.01.27.}
@:BUG FIX@> BUG FIX:  Made |unsigned int gpg_key_pair_id| and |string gpg_key_fingerprint| 
private.

\initials{LDF 2014.01.31.}
Added |friend| declaration for |pull_client_func|.
\ENDLOG 

@<|class User_Info_Type| declaration@>=

class User_Info_Type
{

   friend class Scan_Parse_Parameter_Type;

   friend int main(int, char *[]);

   friend int yyparse(yyscan_t parameter);

   friend int distinguished_name_rule_func(Scan_Parse_Parameter_Type*, const char*);

   friend int get_user_info_func(Scan_Parse_Parameter_Type*, const char*);

   friend int client_func (Scan_Parse_Parameter_Type &param);

   friend int pull_client_func(Scan_Parse_Parameter_Type &param, string distinguished_name_str);

   int user_id;
 
   string username;
   
   Distinguished_Name_Type distinguished_name;

   unsigned int privileges;

   string irods_password_encrypted;
   string irods_password_encrypted_timestamp;
   string irods_current_dir;
   string irods_homedir;
   string irods_zone;
   string irods_default_resource;

   string irods_env_filename;
   string irods_auth_filename;

   unsigned int default_handle_prefix_id;
   string       default_handle_prefix;

   unsigned int default_institute_id;
   string       default_institute_name;

   string handle_username;
   string handle_password_encrypted;

   X509_Cert_Type certificate;

   unsigned int gpg_key_pair_id;

   string gpg_key_fingerprint;

   public:

   @<|User_Info_Type| constructor declarations@>@;@/ 

   @<|User_Info_Type| function declarations@>@;@/ 

   int get_user_id(void) {return user_id;}

   string get_irods_env_filename(void) {return irods_env_filename;}

   string get_irods_auth_filename(void) {return irods_auth_filename;}



};

@q ** (2) Global variables.  @>
@ Global variables.
\initials{LDF 2013.07.18.}

\LOG
\initials{LDF 2013.07.18.}
Added this section.
\ENDLOG

@<Global variables@>=

pthread_mutex_t global_user_info_map_mutex;
map<int, User_Info_Type> global_user_info_map;

@
@<|extern| declarations for global variables@>=

extern map<int, User_Info_Type> global_user_info_map;
extern pthread_mutex_t global_user_info_map_mutex;

@q ** (2) |User_Info_Type| functions.  @>
@ {\bf User\_Info\_Type} functions.
\initials{LDF 2013.05.14.}

\LOG
\initials{LDF 2013.05.14.}
Added this section.
\ENDLOG

@q *** (3) Constructors and Setting Functions.  @>

@ Constructors and Setting Functions.
\initials{LDF 2013.05.14.}

\LOG
\initials{LDF 2013.05.14.}
Added this section.
\ENDLOG

@q **** (4) Default constructor.  @>
@ Default constructor.
\initials{LDF 2013.05.14.}

\LOG
\initials{LDF 2013.05.14.}
Added this function.
\ENDLOG

@q ***** (5) Declaration  @>


@<|User_Info_Type| constructor declarations@>= 

User_Info_Type(void);

@q ***** (5) Definition  @>
@
@<|User_Info_Type| constructor definitions@>=

User_Info_Type::User_Info_Type(void)
{

     user_id      =  -1;

     username    = "";

     privileges = gpg_key_pair_id = 0U;

     default_handle_prefix_id = 0;

     default_institute_id = 0;

     return;

}  /* End of |User_Info_Type| default constructor definition  */


@q *** (3) Clear.  @>
@ Clear.
\initials{LDF 2013.05.16.}

\LOG
\initials{LDF 2013.05.16.}
Added this function.
\ENDLOG

@q *** (3) Declaration  @>

@<|User_Info_Type| function declarations@>=
void
clear(void);

@q *** (3) Definition  @>
@
@<|User_Info_Type::clear| definition@>=
void
User_Info_Type::clear(void)
{

@q **** (4) @>

   user_id = 0;



   username = irods_password_encrypted = irods_password_encrypted_timestamp 
            = irods_current_dir = irods_homedir = irods_zone = irods_default_resource
            = default_handle_prefix = default_institute_name 
            = irods_env_filename = irods_auth_filename = gpg_key_fingerprint
            = handle_username = handle_password_encrypted
            = "";

   privileges = default_handle_prefix_id = default_institute_id = gpg_key_pair_id = 0U;

   certificate.clear();

   distinguished_name.clear();

   return;

@q **** (4) @>
    

}  /* End of |User_Info_Type::clear| definition  */

@q *** (3) Show.  @>
@ Show.
\initials{LDF 2013.05.14.}

\LOG
\initials{LDF 2013.05.14.}
Added this function.

\initials{LDF 2013.05.17.}
Added optional argument |stringstream *strm = 0|.
\ENDLOG

@q **** (4) Declaration  @>

@<|User_Info_Type| function declarations@>=
void
show(string s = "", stringstream *strm = 0, bool brief = false) const;

@q **** (4) Definition  @>
@
@<|User_Info_Type::show| definition@>=
void
User_Info_Type::show(string s, stringstream *strm, bool brief) const
{

@q ***** (5) @>

   if (s == "")
      s = "User_Info_Type:";

   stringstream temp_strm;

   temp_strm << s
             << endl
             << "user_id:      " << user_id 
             << endl
             << "username:     " << username
             << endl;

   if (brief)
   {
      temp_strm << "Common Name:  " << certificate.commonName
                << endl;
   }
   else
   {
       distinguished_name.show("distinguished_name:", &temp_strm);         

       temp_strm << "privileges:"
                 << endl
                 << "   superuser:                " 
                 << ((privileges & Scan_Parse_Parameter_Type::SUPERUSER_PRIVILEGE) ? 1 : 0)
                 << endl 
                 << "   delegate:                 " 
                 << ((privileges & Scan_Parse_Parameter_Type::DELEGATE_PRIVILEGE) ? 1 : 0)
                 << endl 
                 << "   delete_handles:           " 
                 << ((privileges & Scan_Parse_Parameter_Type::DELETE_HANDLES_PRIVILEGE) ? 1 : 0)
                 << endl 
                 << "   show_user_info:           " 
                 << ((privileges & Scan_Parse_Parameter_Type::SHOW_USER_INFO_PRIVILEGE)  ? 1 : 0)
                 << endl 
                 << "   show_certificates:        " 
                 << ((privileges & Scan_Parse_Parameter_Type::SHOW_CERTIFICATES_PRIVILEGE)  
                       ? 1 : 0)
                 << endl          
                 << "   show_distinguished_names: " 
                 << ((privileges & Scan_Parse_Parameter_Type::SHOW_DISTINGUISHED_NAMES_PRIVILEGE)  
                      ? 1 : 0)
                 << endl          
                 << "   show_privileges:          " 
                 << ((privileges & Scan_Parse_Parameter_Type::SHOW_PRIVILEGES_PRIVILEGE) ? 1 : 0)
                 << endl          
                 << "irods_password_encrypted:            " << irods_password_encrypted
                 << endl
                 << "irods_password_encrypted_timestamp:  " << irods_password_encrypted_timestamp
                 << endl
                 << "irods_homedir:                       " << irods_homedir
                 << endl
                 << "irods_current_dir:                   " << irods_current_dir
                 << endl
                 << "irods_zone:                          " << irods_zone
                 << endl
                 << "irods_default_resource:              " << irods_default_resource
                 << endl
                 << "irods_env_filename:                  " << irods_env_filename 
                 << endl 
                 << "irods_auth_filename:                 " << irods_auth_filename 
                 << endl 
                 << "default_handle_prefix_id:            " << default_handle_prefix_id
                 << endl
                 << "default_handle_prefix:               " << default_handle_prefix
                 << endl
                 << "default_institute_id:                " << default_institute_id
                 << endl
                 << "default_institute_name:              " << default_institute_name
                 << endl
                 << "handle_username:                     " << handle_username
                 << endl 
                 << "handle_password_encrypted:           " << handle_password_encrypted
                 << endl
                 << "gpg_key_pair_id:                     " << gpg_key_pair_id
                 << endl
                 << "gpg_key_fingerprint:                 " << gpg_key_fingerprint
                 << endl; 

          certificate.show("certificate:", &temp_strm, false);

   }  /* |else| (|!brief|)  */

   if (strm)
       *strm << temp_strm.str();
   else
       cerr << temp_strm.str();
    
   return;

@q ***** (5) @>

}  /* End of |User_Info_Type::show| definition  */

@q **** (4) Get user info from database (|get_user_info_from_database|).  @>

@ Get user info from database (|get_user_info_from_database|).
\initials{LDF 2014.01.08.}

\LOG
\initials{LDF 2014.01.08.}
Added this function.
\ENDLOG

@q *** (3) Declaration @>

@<|User_Info_Type| function declarations@>=

int
get_user_info_from_database(MYSQL *mysql_ptr, 
                            string distinguished_name_str, 
                            string username_str = "", 
                            string thread_str = "");

@q **** (4) Definition @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

int
User_Info_Type::get_user_info_from_database(MYSQL *mysql_ptr, 
                                            string distinguished_name_str, 
                                            string username_str, 
                                            string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 
  
   MYSQL_RES* result = 0;
   MYSQL_ROW curr_row;

   unsigned int row_ctr   = 0;
   unsigned int field_ctr = 0;
   long int affected_rows = 0L;

   stringstream sql_strm;

   string database_name;

   if (is_gwirdcli || is_gwirdpcl)
      database_name = "gwirdcli";
   else if (is_gwirdsif)
      database_name = "gwirdsif";

   int status = 0;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `User_Info_Type::get_user_info_from_database'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   sql_strm << "select U.user_id, U.username, U.irods_password_encrypted, "
            << "U.irods_password_encrypted_timestamp, U.Distinguished_Name, " 
            << "U.irods_homedir, U.irods_zone, U.irods_default_resource, "
            << "U.handle_username, U.handle_password_encrypted, "
            << "U.default_institute_id, "
            << "U.default_prefix_id, "
            << "G.gpg_key_pair_id, G.fingerprint "
            << "from " << database_name << ".Users as U, "
            << database_name << ".GPG_Key_Pairs as G where ";

   if (!distinguished_name_str.empty())
      sql_strm << "Distinguished_Name = '" << distinguished_name_str << "' ";

   else if (!username_str.empty())
      sql_strm << "username = '" << username_str << "' ";

   sql_strm << "and U.user_id = G.user_id "
            << "order by U.user_id, G.gpg_key_pair_id desc "
            << "limit 1";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   status = submit_mysql_query(sql_strm.str(), 
                               result, 
                               mysql_ptr, 
                               &row_ctr, 
                               &field_ctr, 
                               0, 
                               thread_str);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl
            << "Failed to retrieve user info from database."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result); 

       return 1;

   }  /* |if (status != 0)|  */


@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "`row_ctr' == " << row_ctr
            << endl 
            << "`field_ctr' == " << field_ctr
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   if (row_ctr == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "WARNING!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`row_ctr' == 0:"
            << endl
            << "No user info retrieved from database."
            << endl
            << "Exiting function unsuccessfully with return value 2."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result); 

       return 2;

   }  /* |if (row_ctr == 0)|  */

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   else if (row_ctr > 1)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "WARNING!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`row_ctr' == " << row_ctr << " (> 1):"
            << endl
            << "This is not currently permitted."
            << endl
            << "Exiting function unsuccessfully with return value 4."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result); 

       return 4;

   }  /* |else if (row_ctr > 1)|  */

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`row_ctr' == 1.  This is as it should be."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   curr_row = mysql_fetch_row(result);

   if (curr_row == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`mysql_fetch_row' failed, returning 0:"
            << endl
            << mysql_error(mysql_ptr)
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |if (curr_row == 0)|  */


@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`mysql_fetch_row' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   field_ctr = 0;
   
   unsigned long int temp_val = 0UL;

   /* !! TODO:  LDF 2014.02.03.  Test |curr_row[field_ctr]| to make 
      sure it's not NULL before using it to set data members, where appropriate.
   */

@q ****** (6) user_id @>       
@ |user_id|.

@<|User_Info_Type::get_user_info_from_database| definition@>=
       
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`strtoul' failed, returning `ULONG_MAX':"
            << endl 
            << "Failed to set `user_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |if (temp_val == ULONG_MAX)|  */

   else if (temp_val > INT_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`temp_val' > `INT_MAX':  This is not permitted."
            << endl 
            << "Failed to set `user_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |else if (temp_val > INT_MAX)|  */

   user_id = temp_val;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`user_id' == " << user_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) username @>
@ |username|.

@<|User_Info_Type::get_user_info_from_database| definition@>=

   username = curr_row[field_ctr];

   ++field_ctr;

@q ****** (6) irods_password_encrypted @>
@ |irods_password_encrypted|.

@<|User_Info_Type::get_user_info_from_database| definition@>=

   if (curr_row[field_ctr] && strlen(curr_row[field_ctr]) > 0)
      irods_password_encrypted = curr_row[field_ctr];

   ++field_ctr;

@q ****** (6) irods_password_encrypted_timestamp @>       
@ |irods_password_encrypted_timestamp|.

@<|User_Info_Type::get_user_info_from_database| definition@>=
      
   if (curr_row[field_ctr] && strlen(curr_row[field_ctr]) > 0)
      irods_password_encrypted_timestamp = curr_row[field_ctr];

   ++field_ctr;

@q ****** (6) |Distinguished_Name|.   @>
@ |Distinguished_Name|.
\initials{LDF 2014.02.19.}

\LOG
\initials{LDF 2014.02.19.}
Added code to this section for setting |distinguished_name|.
\ENDLOG

@<|User_Info_Type::get_user_info_from_database| definition@>=

   if (curr_row[field_ctr] && strlen(curr_row[field_ctr]) > 0)
   {
       status = distinguished_name.set(string(curr_row[field_ctr]), user_id);

       if (status != 0)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
                << endl
                << "`Distinguished_Name_Type::set' failed, returning " << status << "."
                << endl 
                << "Failed to set `distinguished_name'."
                << endl
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result); 

           return 1; 

       }  /* |if (status != 0)|  */
   }
   else
   {
      distinguished_name.clear();
   }

   ++field_ctr;
  
@q ****** (6) irods_homedir @>
@ |irods_homedir|.
@<|User_Info_Type::get_user_info_from_database| definition@>=

   irods_homedir = curr_row[field_ctr];

   ++field_ctr;


@q ****** (6) irods_zone @>

@ |irods_zone|.

@<|User_Info_Type::get_user_info_from_database| definition@>=

   irods_zone = curr_row[field_ctr];

   ++field_ctr;

@q ****** (6) irods_default_resource @>

@ |irods_default_resource|.  

@<|User_Info_Type::get_user_info_from_database| definition@>=

   irods_default_resource = curr_row[field_ctr];
 
   ++field_ctr;

@q ****** (6) handle_username@>
@ |handle_username|.
@<|User_Info_Type::get_user_info_from_database| definition@>=

   handle_username = curr_row[field_ctr];

   ++field_ctr;

@q ****** (6) handle_password_encrypted @>
@ |handle_password_encrypted|.
@<|User_Info_Type::get_user_info_from_database| definition@>=

   handle_password_encrypted = curr_row[field_ctr];
 
   ++field_ctr;

@q ****** (6) default_institute_id @>       
@ |default_institute_id|.

@<|User_Info_Type::get_user_info_from_database| definition@>=
       
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`strtoul' failed, returning `ULONG_MAX':"
            << endl 
            << "Failed to set `default_institute_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |if (temp_val == ULONG_MAX)|  */

   else if (temp_val > UINT_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`temp_val' > `UINT_MAX':  This is not permitted."
            << endl 
            << "Failed to set `default_institute_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |else if (temp_val > UINT_MAX)|  */

   default_institute_id = temp_val;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`default_institute_id' == " << default_institute_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) default_handle_prefix_id @>       
@ |default_handle_prefix_id|.

@<|User_Info_Type::get_user_info_from_database| definition@>=
       
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`strtoul' failed, returning `ULONG_MAX':"
            << endl 
            << "Failed to set `default_handle_prefix_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |if (temp_val == ULONG_MAX)|  */

   else if (temp_val > UINT_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`temp_val' > `UINT_MAX':  This is not permitted."
            << endl 
            << "Failed to set `default_handle_prefix_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |else if (temp_val > UINT_MAX)|  */

   default_handle_prefix_id = temp_val;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`default_handle_prefix_id' == " << default_handle_prefix_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) gpg_key_pair_id @>
@ |gpg_key_pair_id|.
\initials{LDF 2014.01.13.}

\LOG
\initials{LDF 2014.01.13.}
Added this section.
\ENDLOG

@<|User_Info_Type::get_user_info_from_database| definition@>=

   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`strtoul' failed, returning `ULONG_MAX':"
            << endl 
            << "Failed to set `gpg_key_pair_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |if (temp_val == ULONG_MAX)|  */

   else if (temp_val > UINT_MAX)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`temp_val' > `UINT_MAX':  This is not permitted."
            << endl 
            << "Failed to set `gpg_key_pair_id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       mysql_free_result(result); 

       return 1;

   }  /* |else if (temp_val > UINT_MAX)|  */

   gpg_key_pair_id = temp_val;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `User_Info_Type::get_user_info_from_database':"
            << endl
            << "`gpg_key_pair_id' == " << gpg_key_pair_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
    
   ++field_ctr;

@q ****** (6) gpg_key_fingerprint @>
@ |gpg_key_fingerprint|
@<|User_Info_Type::get_user_info_from_database| definition@>=

   gpg_key_fingerprint = curr_row[field_ctr]; 
      
   ++field_ctr;

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

   mysql_free_result(result); 
   result = 0;

@q ***** (5) @>
@
@<|User_Info_Type::get_user_info_from_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `User_Info_Type::get_user_info_from_database' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    return 0;

}  /* End of |User_Info_Type::get_user_info_from_database| definition  */

@q **** (4) @>

@q *** (3) @>

@q ** (2) Putting |class User_Info_Type| together.@>

@ Putting |class User_Info_Type| together.
\initials{LDF 2013.05.14.}

@c
using namespace std;
@<Include files@>@;@/
using namespace gwrdifpk;
typedef void* yyscan_t;  
@<|class User_Info_Type| declaration@>@;@/ 
@<Global variables@>@;@/
@<|User_Info_Type| constructor definitions@>@;@/ 
@<|User_Info_Type::clear| definition@>@;@/
@<|User_Info_Type::show| definition@>@;@/
@<|User_Info_Type::get_user_info_from_database| definition@>@;@/


@
@(usrinftp.h@>=
#ifndef USRINFTP_H
#define USRINFTP_H 1
typedef void* yyscan_t;  
using namespace std;
@<|class User_Info_Type| declaration@>@;@/ 
@<|extern| declarations for global variables@>@;@/
#endif 

@q (progn (cweb-mode) (outline-minor-mode))                              @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
