@q gpgkprtp.web  @>
@q Created by Laurence D. Finston (LDF) Fri Jan 17 14:47:07 CET 2014  @>

@q * (1) Copyright and License.@>

@q This file is part of gwrdifpk, a package for long-term archiving.  @>
@q Copyright (C) 2014 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen @>

@q gwrdifpk is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q gwrdifpk is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License          @>
@q along with gwrdifpk; if not, write to the Free Software                    @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from @>
@q https://github.com/gwdg/gwrdifpk.git    @>


@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gwdg.de@>

@q Laurence D. Finston                                                   @>
@q Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen  @>
@q Am Fassberg 11         					         @>
@q 37077 Goettingen              					 @>
@q Germany                           					 @>                                

@q Laurence.Finston@@gwdg.de (@@ stands for a single "at" sign.)@>


@q ** (2)  gpgkprtp.web  @>

@* {\bf class GPG\_Key\_Pair\_Type}.

\LOG
\initials{LDF 2014.01.17.}
Added this file.
\ENDLOG

@q ** (2) Include files  @>

@ Include files.

@<Include files@>=
#include <stdlib.h>  /* Standard Library for C  */
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <limits.h>
#include <errno.h>


#include <expat.h>

#include <fstream> /* Standard Template Library (STL) for C++  */
#include <iomanip>
#include <ios>
#include <iostream>

#include <bitset>

#include <map>
#include <vector>
#include <stack>

#include <string>

#if 0 
#include <time.h>
#include <math.h>
#endif 

#include <sstream>  

#include <pthread.h>  /* POSIX threads  */

#include <mysql.h>

#if HAVE_CONFIG_H
#include <config.h>
#endif 

#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "utilfncs.h++"

@q ** (2) class GPG_Key_Pair_Type  @>

@ |class GPG_Key_Pair_Type|.
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this type declaration.
\ENDLOG

@q *** (3) Declaration  @>

@<|class GPG_Key_Pair_Type| declaration@>=

class GPG_Key_Pair_Type
{
   friend int yyparse(yyscan_t parameter);
                               
   friend class Scan_Parse_Parameter_Type;

   friend int verify_gpg_signature(MYSQL *mysql_ptr,
                                   string base_str, 
                                   string base_filename, 
                                   string detached_signature_str, 
                                   string detached_signature_filename, 
                                   string gpg_key_fingerprint,
                                   GPG_Key_Pair_Type *return_gpg_key_pair,
                                   bool store_signature,
                                   string *store_signature_filename,
                                   bool overwrite,
                                   string thread_str);



   private:

   unsigned int gpg_key_pair_id;
   int user_id;
   string uid;
   string fingerprint;
   string public_key;
   bool revoked;
   time_t created;
   string created_str;
   time_t last_modified;
   string last_modified_str;

   public:

   @<|GPG_Key_Pair_Type| function declarations@>@;

};

@q ** (2) GPG_Key_Pair_Type functions.  @>

@ |GPG_Key_Pair_Type| functions.
\initials{LDF 2014.01.17.}

@q *** (3) Default constructor.  @>
@ Default constructor.
\initials{LDF 2014.01.17.}

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
GPG_Key_Pair_Type(void);

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type| constructor definitions@>=

GPG_Key_Pair_Type::GPG_Key_Pair_Type(void)
{

   gpg_key_pair_id = 0U;
   user_id = 0;

   revoked = false;

   created = static_cast<time_t>(0);
   last_modified = static_cast<time_t>(0);

   return;
}


@q *** (3) Copy constructor.  @>
@ Copy constructor.
\initials{LDF 2014.01.17.}

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
GPG_Key_Pair_Type(const GPG_Key_Pair_Type &g);

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type| constructor definitions@>=

GPG_Key_Pair_Type::GPG_Key_Pair_Type(const GPG_Key_Pair_Type &g)
{

   gpg_key_pair_id   = g.gpg_key_pair_id;
   user_id           = g.user_id;
   uid               = g.uid;
   fingerprint       = g.fingerprint;
   public_key        = g.public_key;
   revoked           = g.revoked;
   created           = g.created;
   created_str       = g.created_str;
   last_modified     = g.last_modified;
   last_modified_str = g.last_modified_str;

   return;
}


@q *** (3) Destructor  @>

@ Destructor.
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
~GPG_Key_Pair_Type(void);

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type| destructor definition@>=

GPG_Key_Pair_Type::~GPG_Key_Pair_Type(void)
{

   return;
}

@q *** (3) Get key ID (|get_key_id|).  @>

@ Get key ID (|get_key_id|).
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
string
get_key_id(void);

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type::get_key_id| definition@>=
string
GPG_Key_Pair_Type::get_key_id(void)
{

   if (fingerprint.empty() || fingerprint.length() < 8)
      return "";
   else
      return fingerprint.substr(fingerprint.length() - 8);   
}



@q *** (3) Get GPG key pair from database (|get_gpg_key_pair_from_database|)  @>
@ Get GPG key pair from database (|get_gpg_key_pair_from_database|).
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
int
get_gpg_key_pair_from_database(MYSQL *mysql_ptr, 
                               string key_id = "", 
                               bool get_public_key = false,
                               string thread_str = "");

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=
int
GPG_Key_Pair_Type::get_gpg_key_pair_from_database(MYSQL *mysql_ptr, 
                                                  string key_id, 
                                                  bool get_public_key,
                                                  string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status = 0;

   MYSQL_RES* result = 0;
   MYSQL_ROW curr_row;

   unsigned int row_ctr = 0;
   unsigned int field_ctr = 0;
   long int affected_rows;

   stringstream sql_strm;

   string database_name;

   unsigned long int temp_val = 0UL;

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `GPG_Key_Pair_Type::get_gpg_key_pair_from_database'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   if (is_gwirdsif)
      database_name = "gwirdsif";
   else if (is_gwirdcli)
      database_name = "gwirdcli";
   else
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`is_gwirdsif' and `is_gwirdcli' are both `false':  Can't set database name."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      return 1;
   }


@q ***** (5) @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   string and_str;

   sql_strm << "select gpg_key_pair_id, user_id, uid, fingerprint, "
            << "created, unix_timestamp(created), "
            << "last_modified, unix_timestamp(last_modified), revoked ";

   if (get_public_key)
      sql_strm << ", public_key ";

   sql_strm << "from " << database_name << ".GPG_Key_Pairs "
            << "where ";

   if (gpg_key_pair_id > 0U)
   {
      sql_strm << "gpg_key_pair_id = " << gpg_key_pair_id << " ";
    
      and_str = "and ";
   }
   if (user_id > 0)
   {
      sql_strm << and_str << "user_id = " << user_id << " ";
    
      and_str = "and ";
   
   }
   if (!fingerprint.empty())
   {
      sql_strm << and_str << "fingerprint = '" << fingerprint << "' ";
    
      and_str = "and ";
   
   }
   if (!key_id.empty())
   {
      sql_strm << and_str << "fingerprint like('%" << key_id << "') ";
    
      and_str = "and ";
   
   }

   sql_strm << "order by gpg_key_pair_id desc";  /* Just for insurance.
                                                    There should only be one row.
                                                    If there are more, this ensures
                                                    that the most recent is returned.
                                                    \initials{LDF 2014.01.17.}  */
                

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

   if (status != 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`submit_mysql_query' failed, returning " << status << ":"
           << endl
           << mysql_error(mysql_ptr)
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      if (result)
        mysql_free_result(result);

      return 1;

   }  /* |if (status != 0)|  */


@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "`row_ctr'   == " << row_ctr
            << endl 
            << "`field_ctr' == " << field_ctr
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   curr_row = mysql_fetch_row(result);

   if (curr_row == 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`mysql_fetch_row' failed, returning 0:"
           << endl
           << mysql_error(mysql_ptr)
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;

   }  /* |if (curr_row == 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << "`mysql_fetch_row' succeeded."
            << endl;

       for (int i = 0; i < field_ctr; ++i)
       {
           cerr << "`curr_row[" << i << "]' == " << curr_row[i] << endl;
       }

       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) Extract fields.  @>
@ Extract fields.
\initials{LDF 2014.01.17.}

@q ****** (6) gpg_key_pair_id  @>

@ |gpg_key_pair_id|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   field_ctr = 0;

   errno = 0;
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' failed, returning `ULONG_MAX':"
           << endl
           << strerror(errno)
           << endl
           << "Failed to set `gpg_key_pair_id'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   else if (temp_val > UINT_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' returned `temp_val' == " << temp_val << " (> `UINT_MAX'):"
           << endl
           << "Failed to set `gpg_key_pair_id'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   gpg_key_pair_id = temp_val;
   temp_val = 0UL;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`gpg_key_pair_id' == " << gpg_key_pair_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) user_id  @>

@ |user_id|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   errno = 0;
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' failed, returning `ULONG_MAX':"
           << endl
           << strerror(errno)
           << endl
           << "Failed to set `user_id'."
           << endl            
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   else if (temp_val > INT_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' returned `temp_val' == " << temp_val << " (> `INT_MAX'):"
           << endl
           << "Failed to set `user_id'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   user_id = temp_val;
   temp_val = 0UL;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`user_id' == " << user_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) uid  @>

@ |uid|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   if(curr_row[field_ctr] == 0 || strlen(curr_row[field_ctr]) == 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`curr_row[" << field_ctr << "]' is NULL or empty:"
           << endl
           << "Failed to set `uid'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;

   }

   uid = curr_row[field_ctr];

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`uid' == " << uid
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) fingerprint  @>

@ |fingerprint|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   if(curr_row[field_ctr] == 0 || strlen(curr_row[field_ctr]) == 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`curr_row[" << field_ctr << "]' is NULL or empty:"
           << endl
           << "Failed to set `fingerprint'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;

   }

   fingerprint = curr_row[field_ctr];

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`fingerprint' == " << fingerprint
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) created_str  @>

@ |created_str|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   if(curr_row[field_ctr] == 0 || strlen(curr_row[field_ctr]) == 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`curr_row[" << field_ctr << "]' is NULL or empty:"
           << endl
           << "Failed to set `created_str'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;

   }

   created_str = curr_row[field_ctr];

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`created_str' == " << created_str
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) created  @>

@ |created|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   errno = 0;
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' failed, returning `ULONG_MAX':"
           << endl
           << strerror(errno)
           << endl
           << "Failed to set `created'."
           << endl            
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   created = static_cast<time_t>(temp_val);
   temp_val = 0UL;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`created' == " << created
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) last_modified_str  @>

@ |last_modified_str|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   if(curr_row[field_ctr] == 0 || strlen(curr_row[field_ctr]) == 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`curr_row[" << field_ctr << "]' is NULL or empty:"
           << endl
           << "Failed to set `last_modified_str'."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;

   }

   last_modified_str = curr_row[field_ctr];

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`last_modified_str' == " << last_modified_str
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   ++field_ctr;

@q ****** (6) last_modified  @>

@ |last_modified|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   errno = 0;
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' failed, returning `ULONG_MAX':"
           << endl
           << strerror(errno)
           << endl
           << "Failed to set `last_modified'."
           << endl            
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   last_modified = static_cast<time_t>(temp_val);
   temp_val = 0UL;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`last_modified' == " << last_modified
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;


@q ****** (6) revoked  @>

@ |revoked|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   errno = 0;
   temp_val = strtoul(curr_row[field_ctr], 0, 10);

   if (temp_val == ULONG_MAX)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
           << endl
           << "`strtoul' failed, returning `ULONG_MAX':"
           << endl
           << strerror(errno)
           << endl
           << "Failed to set `revoked'."
           << endl            
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex(); 

      mysql_free_result(result);

      return 1;
   }

   revoked = (temp_val > 0) ? true: false;
   temp_val = 0UL;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
            << endl
            << "`revoked' == " << revoked
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   ++field_ctr;

@q ****** (6) public_key  @>

@ |public_key|.
\initials{LDF 2014.01.17.}

@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=
 
   if (get_public_key)
   {
@q ******* (7) @>

       if(curr_row[field_ctr] == 0 || strlen(curr_row[field_ctr]) == 0)
       {
          lock_cerr_mutex(); 
          cerr << thread_str << "ERROR!  In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
               << endl
               << "`curr_row[" << field_ctr << "]' is NULL or empty:"
               << endl
               << "Failed to set `last_modified_str'."
               << endl
               << "Exiting function unsuccessfully with return value 1."
               << endl;
          unlock_cerr_mutex(); 

          mysql_free_result(result);

          return 1;

       }

       last_modified_str = curr_row[field_ctr];

@q ******* (7) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `GPG_Key_Pair_Type::get_gpg_key_pair_from_database':"
                << endl
                << "`last_modified_str' == " << last_modified_str
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>

   }  /* |if (get_public_key)|  */ 

   ++field_ctr;

@q ****** (6) @>

@q ***** (5) @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

   mysql_free_result(result);

   result = 0;

@q ***** (5) @>
@
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `GPG_Key_Pair_Type::get_gpg_key_pair_from_database' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

} /* |GPG_Key_Pair_Type::get_gpg_key_pair_from_database|  */


@q *** (4) Clear.  @>
@ Clear.
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
void
clear(void);

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type::clear| definition@>=
void
GPG_Key_Pair_Type::clear(void)
{

   gpg_key_pair_id = 0U;
   user_id = 0;

   uid = fingerprint = public_key  = created_str = last_modified_str = "";

   revoked = false;

   created = static_cast<time_t>(0);
   last_modified = static_cast<time_t>(0);

   return;

} /* |GPG_Key_Pair_Type::clear|  */


@q *** (3) Show.  @>
@ Show.
\initials{LDF 2014.01.17.}

\LOG
\initials{LDF 2014.01.17.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|GPG_Key_Pair_Type| function declarations@>=
int
show(string s = "") const;

@q **** (4) Definition  @>
@
@<|GPG_Key_Pair_Type::show| definition@>=
int
GPG_Key_Pair_Type::show(string s) const
{
   
   if (s.empty())
      s = "GPG_Key_Pair_Type:";

   cerr << s
        << endl 
        << "gpg_key_pair_id   == "<< gpg_key_pair_id
        << endl 
        << "user_id           == " << user_id
        << endl 
        << "uid               == " << uid
        << endl 
        << "fingerprint       == " << fingerprint
        << endl 
        << "public_key        == " << public_key
        << endl 
        << "revoked           == " << revoked
        << endl 
        << "created           == " << created
        << endl 
        << "created_str       == " << created_str
        << endl 
        << "last_modified     == " << last_modified
        << endl 
        << "last_modified_str == " << last_modified_str
        << endl; 

   return 0;

} /* |GPG_Key_Pair_Type::show|  */


@q ** (2) Putting `gpgkprtp.web' together.  @>

@ Putting {\tt gpgkprtp\PERIOD web} together.

@q *** (3) This is what's compiled.  @>
@ This is what's compiled.
@c
@<Include files@>@;@/
using namespace std;
using namespace gwrdifpk;
typedef void* yyscan_t;
@<|class GPG_Key_Pair_Type| declaration@>@;@/
@<|GPG_Key_Pair_Type| constructor definitions@>@;@/
@<|GPG_Key_Pair_Type| destructor definition@>@;@/
@<|GPG_Key_Pair_Type::get_key_id| definition@>@;@/
@<|GPG_Key_Pair_Type::get_gpg_key_pair_from_database| definition@>@;@/
@<|GPG_Key_Pair_Type::clear| definition@>@;@/
@<|GPG_Key_Pair_Type::show| definition@>@;@/


@q *** (3) This is what's written to the header file `gpgkprtp.h'.  @>

@ This is what's written to the header file \filename{gpgkprtp.h}.
@
@(gpgkprtp.h@>=
#ifndef GPGKPRTP_H
#define GPGKPRTP_H 1
using namespace std;
using namespace gwrdifpk;
typedef void* yyscan_t;
@<|class GPG_Key_Pair_Type| declaration@>@;@/
#endif 


@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode))                          @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

