@q plclfunc.web  @>
@q [...]/gwrdifpk/src/plclfunc.web  @>

@q Created by Laurence D. Finston (LDF) Fri Jan 31 14:12:51 CET 2014  @>

@q * (1) Copyright and License.@>

@q This file is part of gwrdifpk, a package for long-term archiving.  @>
@q Copyright (C) 2014 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen @>

@q gwrdifpk is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q gwrdifpk is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License          @>
@q along with gwrdifpk; if not, write to the Free Software                    @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from @>
@q https://github.com/gwdg/gwrdifpk.git    @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gwdg.de@>

@q Laurence D. Finston                                                   @>
@q Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen  @>
@q Am Fassberg 11         					         @>
@q 37077 Goettingen              					 @>
@q Germany                           					 @>                                

@q Laurence.Finston@@gwdg.de (@@ stands for a single "at" sign.)@>



@q * (1) Pull client function.  @>
@ Pull client function.  
\initials{LDF 2014.01.31.}

\LOG
\initials{LDF 2014.01.31.}
Added this file.
\ENDLOG

@q * (1) Include files  @>

@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <sys/types.h>
#include <pwd.h>
#include <errno.h>
#include <grp.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>
#include <time.h>
#include <sys/stat.h>
#include <dirent.h>
#include <fcntl.h>

#include <gcrypt.h> /* for |gcry_control| */
#include <gnutls/gnutls.h>
#include<gnutls/x509.h>

#include <string>
#include <iomanip>
#include <ios>
#include <iostream>
#include <stdarg.h>
#include <limits.h>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <time.h>
#include <math.h>
#include <sstream>   

#include <map>
#include <vector>
#include <stack>
#include <deque>
#include <set>

#include <pthread.h>

#include <expat.h>

#if HAVE_CONFIG_H
#include "config.h"
#endif

#include <mysql.h>

#undef NAME_LEN
#undef LOCAL_HOST

#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "excptntp.h++"
#include "helper.h++"
#include "utilfncs.h++"
#include "grouptp.h++"
#include "hndlvltp.h++"
#include "irdsavtp.h++"
#include "prsrclnt.h++"  
#include "scnrclnt.h++"
#include "rspnstp.h++"
#include "irdsobtp.h++"
#include "hndltype.h++"
#include "dcmdsbtp.h++"
#include "dcmtdttp.h++"
#include "x509cert.h++"
#include "dstngnmt.h++"
#include "pullrqtp.h++"
#include "scprpmtp.h++"
#include "exchnsrv.h++"
#include "usrinftp.h++"
#include "gntlsfnc.h++"
#include "ex_rfc2818.h++"

@q ** (2) Pull client function (|pull_client_func|).  @>
@ Pull client function (|pull_client_func|).  
\initials{LDF 2014.01.31.}

\LOG
\initials{LDF 2014.02.12.}
Added argument |string distinguished_name_str|.
\ENDLOG 

@<|pull_client_func| declaration@>=
int
pull_client_func (Scan_Parse_Parameter_Type &param, string distinguished_name_str);

@q *** (3) Definition  @>
@
@<|pull_client_func| definition@>=
int
pull_client_func (Scan_Parse_Parameter_Type &param, string distinguished_name_str)
{
@q **** (4) @>

    bool DEBUG = false;  /* |true|  */
    set_debug_level(DEBUG, 0, 0);

    int status;

    string thread_str;

#if DEBUG_COMPILE
    if (DEBUG)
    {

       lock_cerr_mutex();  
       cerr << "Entering `pull_client_func'." << endl;
       unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>
@
@<|pull_client_func| definition@>=

    User_Info_Type user_info;


    status = user_info.get_user_info_from_database(param.mysql_ptr, 
                                                   distinguished_name_str,  
                                                   param.username, 
                                                   thread_str);

    if (status != 0)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "ERROR!  In `pull_client_func':"
             << endl
             << "`User_Info_Type::get_user_info_from_database' failed, returning " 
             << status << ":"
             << endl 
             << "Failed to set `User_Info_Type user_info' from ";

         if (!distinguished_name_str.empty())
            cerr << "`distinguished_name_str' == " << distinguished_name_str;

         else 
            cerr << "`param.username' == " << param.username;

         cerr << "."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        ++param.errors_occurred; 

        return 1;

    }  /* |if (status != 0)|  */

@q **** (4) @>
@
@<|pull_client_func| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `pull_client_func':  Set `User_Info_Type user_info' successfully." 
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>
@
@<|pull_client_func| definition@>=

   param.user_id             = user_info.user_id;
   param.gpg_key_pair_id     = user_info.gpg_key_pair_id;
   param.gpg_key_fingerprint = user_info.gpg_key_fingerprint;

@q **** (4) @>
@
@<|pull_client_func| definition@>=

   /* !! START HERE:  LDF 2014.02.26.  This will have to be tested for different
      users with different privileges.  */

   int ret, ii;

   const char *err;

   int char_ctr = 0;

   if (!config_dir.empty())
   {
       DEFAULT_CERT_FILENAME = DEFAULT_KEY_FILENAME = DEFAULT_CA_FILENAME
              = config_dir;

       DEFAULT_CERT_FILENAME += "/"; 
       DEFAULT_KEY_FILENAME  += "/"; 
       DEFAULT_CA_FILENAME   += "/"; 
   }

   DEFAULT_CERT_FILENAME += "user_cert.pem";  
   DEFAULT_KEY_FILENAME  += "user_key.pem";
   DEFAULT_CA_FILENAME   += "ca_cert.pem";
   DEFAULT_CRL_FILENAME   = "";
  
   string curr_key_filename;
   string curr_cert_filename;
   string curr_ca_filename; 
   string curr_crl_filename;  

   size_t pos;

@q **** (4) @>

   if (key_filenames.size() == 0)
       curr_key_filename = DEFAULT_KEY_FILENAME;
   else
   {
       curr_key_filename = key_filenames[0];

       if (!config_dir.empty())
       {
           pos = curr_key_filename.find("/");

           if (pos == string::npos)
           {
               curr_key_filename.insert(0, "/");
               curr_key_filename.insert(0, config_dir);
           }
       }
   }

@q **** (4) @>

   if (cert_filenames.size() == 0)
       curr_cert_filename = DEFAULT_CERT_FILENAME;
   else
   {
       curr_cert_filename = cert_filenames[0];

       if (!config_dir.empty())
       {
           pos = curr_cert_filename.find("/");

           if (pos == string::npos)
           {
               curr_cert_filename.insert(0, "/");
               curr_cert_filename.insert(0, config_dir);
           }   
       }

   }

@q ****** (6) @>

   if (ca_filenames.size() == 0)
       curr_ca_filename = DEFAULT_CA_FILENAME;
   else
   {
       curr_ca_filename = ca_filenames[0];

       if (!config_dir.empty())
       {
           pos = curr_ca_filename.find("/");

           if (pos == string::npos)
           {
               curr_ca_filename.insert(0, "/");
               curr_ca_filename.insert(0, config_dir);
           }   
       }
   }

@q ****** (6) @>

   if (crl_filenames.size() == 0)
       curr_crl_filename = DEFAULT_CRL_FILENAME;
   else
   {
       curr_crl_filename = crl_filenames[0];

       if (!config_dir.empty())
       {
           pos = curr_crl_filename.find("/");

           if (pos == string::npos)
           {
               curr_crl_filename.insert(0, "/");
               curr_crl_filename.insert(0, config_dir);
           }   
       }

   }

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "cert_filenames.size() == " << cert_filenames.size() << endl 
            << "key_filenames.size() ==  " << key_filenames.size() << endl 
            << "ca_filenames.size() ==   " << ca_filenames.size() << endl 
            << "curr_key_filename ==     " << curr_key_filename << endl
            << "curr_cert_filename ==    " << curr_cert_filename << endl
            << "curr_ca_filename ==      " << curr_ca_filename << endl
            << "curr_crl_filename ==     " << curr_crl_filename << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   gnutls_certificate_credentials_t xcred;

   gnutls_certificate_allocate_credentials (&xcred);

   status = gnutls_certificate_set_x509_trust_file (xcred, 
                                                    curr_ca_filename.c_str(), 
                                                    GNUTLS_X509_FMT_PEM);   
  
   stringstream temp_strm; 

   if (status < 0)
   {

       lock_cerr_mutex(); 
       cerr << "ERROR!  In `pull_client_func':"
            << endl 
            << "`gnutls_certificate_set_x509_trust_file' failed returning " 
            << status << ":" 
            << gnutls_strerror(status)
            << endl
            << "Exiting function unsuccessfully "
            << "with return value 1."
            << endl;
       unlock_cerr_mutex(); 
 
       close(param.sock);
       param.sock = 0;

       gnutls_certificate_free_credentials (xcred);
       gnutls_deinit (param.session);

       ++param.errors_occurred; 

       return 1;

   }
   else if (DEBUG)
   {

       lock_cerr_mutex(); 
       cerr << "In `pull_client_func':"
                 << endl 
                 << "`gnutls_certificate_set_x509_trust_file' returned " << status 
                 << " (the number of certificates processed)."
                 << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */ 

   gnutls_certificate_set_x509_key_file (xcred, 
                                         curr_cert_filename.c_str(), 
                                         curr_key_filename.c_str(),
                                         GNUTLS_X509_FMT_PEM);
  
  
   gnutls_init(&param.session, GNUTLS_CLIENT);  /* Initialize TLS session   */

   ret = gnutls_priority_set_direct(param.session, "PERFORMANCE", &err); 

   if (ret < 0)   
   {

       if (ret == GNUTLS_E_INVALID_REQUEST) 
       {
           lock_cerr_mutex(); 
           cerr <<  "ERROR!  In `pull_client_func':  Syntax error at " 
                     << err 
                     << endl
                     << "Exiting function unsuccessfully "
                     << "with return value 1."
                     << endl;
           unlock_cerr_mutex(); 
 
           close(param.sock);
           param.sock = 0;

           gnutls_certificate_free_credentials (xcred);
           gnutls_deinit (param.session);

           ++param.errors_occurred; 

           return 1;

       }

            /* !! TODO:  What about other cases?  LDF 2010.02.11.*/

   }  /* |if (ret < 0) |  */
  
   status = gnutls_credentials_set (param.session, GNUTLS_CRD_CERTIFICATE, xcred);

   if (status != 0)
   {
      lock_cerr_mutex(); 
      cerr <<  "ERROR!  In `pull_client_func':  `gnutls_credentials_set' failed, " 
                << "returning " << status
                << endl
                << "Exiting function unsuccessfully "
                << "with return value 1."
                << endl;
      unlock_cerr_mutex(); 


      close(param.sock);
      param.sock = 0;
 
      gnutls_deinit (param.session);    

      ++param.errors_occurred; 

      return 1;

   }  /* |if (status != 0)| */

   else if (DEBUG)
   {

       lock_cerr_mutex(); 
       cerr << "In `pull_client_func':  `gnutls_credentials_set' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */ 

@q **** (4) Connect to the peer.  @>
@ Connect to the peer.
\initials{LDF 2014.01.31.}

@<|pull_client_func| definition@>=

   remote_connection = param.remote_connection = true;  
   anonymous = param.anonymous = false;  

   param.connection_type = Scan_Parse_Parameter_Type::X_509_AUTH_TYPE;


   param.sock = tcp_connect (remote_hostname.c_str(), port_str_x_509);

   if (param.sock == -1)
   {

       temp_strm.str("");

       cerr <<  "ERROR!  In `pull_client_func':  "
                 << "`tcp_connect' failed, returning -1." 
                 << endl
                 << "Exiting function unsuccessfully "
                 << "with return value 1."
                 << endl;


       lock_cerr_mutex(); 
       cerr << temp_strm.str();
       unlock_cerr_mutex(); 
 
       close(param.sock);
       param.sock = 0;

       gnutls_certificate_free_credentials (xcred);
       gnutls_deinit (param.session);

       ++param.errors_occurred; 

       return 1;

   }

   gnutls_transport_set_ptr (param.session, reinterpret_cast<gnutls_transport_ptr_t>(param.sock));


   /* Perform the TLS handshake   */

   ret = gnutls_handshake (param.session);

   if (ret < 0)
   {

      temp_strm.str("");
 
      cerr << "ERROR!  In `pull_client_func':  Handshake failed:"
                << endl;

      lock_cerr_mutex();
      cerr << temp_strm.str();
      gnutls_perror (ret);
      unlock_cerr_mutex();

      temp_strm.str("");

      cerr << "Exiting function unsuccessfully "
                << "with return value 1."
                << endl;

      lock_cerr_mutex();
      cerr << temp_strm.str();
      unlock_cerr_mutex();

      close(param.sock);
      param.sock = 0;

      gnutls_certificate_free_credentials (xcred);
      gnutls_deinit (param.session);

      ++param.errors_occurred; 

      return 1;

   }
#if DEBUG_COMPILE 
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `pull_client_func':  Handshake was completed."
            << endl;
       unlock_cerr_mutex(); 
       
   }
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) Verify certificate.  @>

@ Verify certificate.  
\initials{LDF 2013.05.08.}

\LOG
\initials{LDF 2013.05.08.}
Added this section.
\ENDLOG

@<|pull_client_func| definition@>=

@q ***** (5) @>

   status = verify_certificate(param.session, &param.server_cert);

   if (status != 0)
   {

     lock_cerr_mutex(); 
     cerr << "ERROR!  In `pull_client_func':  `verify_certificate' failed, "
               << "returning " << status << "."
               << endl
               << "Exiting function unsuccessfully "
               << "with return value 1."
               << endl;
     unlock_cerr_mutex(); 

     close(param.sock);
     param.sock = 0;

     gnutls_certificate_free_credentials (xcred);
     gnutls_deinit (param.session);

     ++param.errors_occurred; 

     return 1;

   }  /* |if (status != 0)|  */
#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `pull_client_func':  `verify_certificate' succeeded, returning 0."
           << endl;

       param.server_cert.show("param.server_cert:");

       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   /* !! TODO:  LDF 2014.01.31.  

      Must look into `sudo' and/or |setuid| for access to other users' files and 
      directories.  However, this doesn't have a high priority.
 
   */

   Distinguished_Name_Type distinguished_name;
   distinguished_name = param.server_cert;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       distinguished_name.show("distinguished_name:");
       cerr << "`distinguished_name.output()' == " << distinguished_name.output()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q **** (4) @>
@
@<|pull_client_func| definition@>=

   status = exchange_data_with_server(param);

   if (status == 2)
   {
        lock_cerr_mutex(); 
        cerr << "In `pull_client_func':  `exchange_data_with_server' returned 2:  "
             << "`END_SERVER' command succeeded."
             << endl
             << "Exiting function successfully with return value 2."
             << endl;
        unlock_cerr_mutex(); 

        close(param.sock);
        param.sock = 0;

        gnutls_certificate_free_credentials (xcred);
        gnutls_deinit (param.session);

        return 2;


   }  /* |if (status == 2)|  */

   else if (status != 0)
   {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `pull_client_func':  `exchange_data_with_server' failed, "
             << "returning " << status << "."
             << endl
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        close(param.sock);
        param.sock = 0;

        gnutls_certificate_free_credentials (xcred);
        gnutls_deinit (param.session);

        ++param.errors_occurred; 

        return 1;

   }  /* |else if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
        lock_cerr_mutex(); 
        cerr << "In `pull_client_func':  `exchange_data_with_server' succeeded, returning 0."
             << endl;
        unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */



@q **** (4) @>
@
@<|pull_client_func| definition@>=


#if DEBUG_COMPILE
    if (DEBUG)
    {

       lock_cerr_mutex();  
       cerr << "Exiting |pull_client_func| successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 


    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

#if 0 
    close(param.sock);
    param.sock = 0;

    gnutls_certificate_free_credentials (xcred);
    gnutls_deinit (param.session);
#endif 


    return 0;

}  /* End of |pull_client_func| definition  */

@q **** (4) @>
@
@<Garbage@>=

@q **** (4) @>

@q *** (3) Putting `plclfunc.web' together.  @>

@ Putting {\tt plclfunc\PERIOD web} together.

@q **** (4) This is what's compiled.  @>
@ This is what's compiled.
@c
@<Include files@>@;@/

using namespace std;
using namespace gwrdifpk;
@<|pull_client_func| declaration@>@;@/
@<|pull_client_func| definition@>@;@/
#if 0 
@<Garbage@>@;@/
#endif 

@q **** (4) This is what's written to the header file `plclfunc.h'.  @>

@ This is what's written to the header file \filename{plclfunc.h}.
\initials{LDF 2012.06.27.}

@(plclfunc.h@>=
#ifndef PLCLFUNC_H
#define PLCLFUNC_H 1
using namespace std;
using namespace gwrdifpk;
@<|pull_client_func| declaration@>@;@/
#endif 

@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode))                          @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

