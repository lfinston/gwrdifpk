@q irdsobtp.web @>

@q Created by Laurence D. Finston (LDF) Thu Oct 11 16:07:58 CEST 2012 @>

@q * (1) Copyright and License.@>

@q This file is part of gwrdifpk, a package for long-term archiving.  @>
@q Copyright (C) 2013, 2014 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen @>

@q gwrdifpk is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q gwrdifpk is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License          @>
@q along with gwrdifpk; if not, write to the Free Software                    @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from @>
@q https://github.com/gwdg/gwrdifpk.git    @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gwdg.de@>

@q Laurence D. Finston                                                   @>
@q Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen  @>
@q Am Fassberg 11         					         @>
@q 37077 Goettingen              					 @>
@q Germany                           					 @>                                

@q Laurence.Finston@@gwdg.de (@@ stands for a single "at" sign.)@>


@q * (1) Irods_Object_Type (irdsobtp.web).  @>

@*  \.{Irods\_Object\_Type} (irdsobtp\PERIOD web).

\LOG
\initials{LDF 2012.10.11.}
Added this file.
\ENDLOG

@q ** (2) Include files  @>

@ Include files.

@<Include files@>=

#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE
#endif 

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <unistd.h>
#include <limits.h>

#include <time.h>

#if 0 
#include <sys/time.h>
#include <sys/stat.h>
#endif 

#include <sys/types.h>

#if 0 
#include <dirent.h>
#endif 

#include <string.h>
#if 0 
#include <pwd.h>
#endif 

#include <errno.h>

#include <pthread.h>

#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>
#include <string>
#include <sstream>  
#include <deque>    
#include <map>   
#include <set>   
#include <vector>   
#include <stack>

#include <gcrypt.h> /* for |gcry_control| */
#include <gnutls/gnutls.h>
#include<gnutls/x509.h>

#include <mysql.h>

#include <expat.h>

#if HAVE_CONFIG_H
#include <config.h>
#endif

#undef NAME_LEN
#undef LOCAL_HOST

#include "rspercds.h++"
#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "excptntp.h++"
#include "utilfncs.h++"

#include "parser.h++"
#include "scanner.h++"
#include "grouptp.h++"
#include "hndlvltp.h++"
#include "rspnstp.h++"
#include "irdsavtp.h++"
#include "irdsobtp.h++"
#include "hndltype.h++"
#include "dcmdsbtp.h++"
#include "dcmtdttp.h++"
#include "x509cert.h++"
#include "dstngnmt.h++"
#include "pullrqtp.h++"
#include "scprpmtp.h++"
#include "usrinftp.h++"

@q ** (2) |class Irods_Object_Type|.  @>
@*1 {\bf class Irods\_Object\_Type}.

\LOG
\initials{LDF 2012.10.11.}
Added this |class| declaration.

\initials{LDF 2013.01.07.}
Changed |string name| to |string path|.  Added the data members
|bool deleted|, |time_t created|, |time_t last_modified|, |string created_str|
and |string last_modified_str|.

\initials{LDF 2013.01.08.}
Added data members |vector<unsigned long int> handle_id_vector| 
and |vector<unsigned long int> handle_value_id_vector|.

\initials{LDF 2013.01.31.}
Added |vector<string> handle_name_string_vector|.

\initials{LDF 2013.03.07.}
Changed |vector<Handle_Value_Type> handle_value_vector| to |vector<Handle_Type> handle_vector|.


\initials{LDF 2013.07.21.}
Replaced |bool deleted| with |bool deleted_from_archive|
and |bool deleted_from_gwirdsif_db|.

\initials{LDF 2013.08.07.}
Added the private data members |bool marked_for_deletion_from_archive| and 
|bool marked_for_deletion_from_gwirdsif_db|.

\initials{LDF 2013.08.07.}
Removed |string created_str| and |string last_modified_str|.

\initials{LDF 2013.08.08.}
Added the private data members |time_t delete_from_archive_timestamp| 
and |time_t delete_from_gwirdsif_db_timestamp|.

\initials{LDF 2013.08.08.}
Added |friend| declaration for |purge_irods_archive|.

\initials{LDF 2013.11.27.}
Added the |unsigned long int| data members |dublin_core_metadata_id|,
|dublin_core_metadata_irods_object_id| and |irods_object_ref_id|.

\initials{LDF 2014.01.09.}
Added the following private data members:
|bool encrypted|,
|bool signed_gpg|,
|unsigned long int  detached_signature_irods_object_id|,
|string gpg_key_id_encrypt|
and
|string gpg_key_id_sign|.

\initials{LDF 2014.01.13.}
Changed names of |string gpg_key_id_encrypt| and |string gpg_key_id_sign|.
to |gpg_key_fingerprint_encrypt| and |gpg_key_fingerprint_sign|.
Added |unsigned int gpg_key_pair_id_encrypt| and |unsigned int gpg_key_pair_id_sign|.

\initials{LDF 2014.01.24.}
Added the |bool| data members |compressed_tar_file|, |compressed_gzip| and 
|compressed_bzip2|.
\ENDLOG 

@<Declare |class Irods_Object_Type|@>=

class
Irods_Object_Type
{
    friend class Scan_Parse_Parameter_Type;
    friend int zzparse(yyscan_t);

    friend void* purge_irods_archive(void *v);

    unsigned long int id;
    int user_id;
    int irods_server_id;

    unsigned long int dublin_core_metadata_id;

    unsigned long int dublin_core_metadata_irods_object_id;

    unsigned long int irods_object_ref_id;

    string path;

    bool marked_for_deletion_from_archive;
    bool marked_for_deletion_from_gwirdsif_db;

    bool deleted_from_archive;
    bool deleted_from_gwirdsif_db;

    time_t delete_from_archive_timestamp;
    time_t delete_from_gwirdsif_db_timestamp;

    time_t created;
    time_t last_modified;

    vector<Handle_Type> handle_vector;

    vector<Irods_AVU_Type> avu_vector;

    vector<unsigned long int> handle_id_vector;
    vector<unsigned long int> handle_value_id_vector;
    vector<string> handle_name_string_vector;

    bool encrypted;

    bool signed_gpg;

    bool compressed_tar_file;
    bool compressed_gzip;
    bool compressed_bzip2;

    unsigned long int detached_signature_irods_object_id;

    unsigned int gpg_key_pair_id_encrypt;
    unsigned int gpg_key_pair_id_sign;

    string gpg_key_fingerprint_encrypt;
    string gpg_key_fingerprint_sign;

    public:
        @<|Irods_Object_Type| function declarations@>@;@/

};

@q *** (3) Default constructor.  @>
@ Default constructor.
\initials{LDF 2012.10.11.}

\LOG
\initials{LDF 2012.10.11.}
Added this function.
\ENDLOG


@<|Irods_Object_Type| function declarations@>=

Irods_Object_Type(void);

@
@<|Irods_Object_Type| constructor definitions@>=

Irods_Object_Type::Irods_Object_Type(void)
{

    id = dublin_core_metadata_id = dublin_core_metadata_irods_object_id 
       = irods_object_ref_id = detached_signature_irods_object_id = 0UL;

    gpg_key_pair_id_encrypt = gpg_key_pair_id_sign = 0U;

    user_id = 0;
    irods_server_id = 0;

    marked_for_deletion_from_archive = marked_for_deletion_from_gwirdsif_db 
       = deleted_from_archive = deleted_from_gwirdsif_db = encrypted = signed_gpg 
       = compressed_tar_file = compressed_gzip = compressed_bzip2
       = false;

    delete_from_archive_timestamp = delete_from_gwirdsif_db_timestamp = 
       created = last_modified = static_cast<time_t>(0);

}

@q *** (3) Non-default constructor.  @>
@ Non-default constructor.
\initials{LDF 2013.01.07.}

\LOG
\initials{LDF 2013.01.07.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>


@<|Irods_Object_Type| function declarations@>=

Irods_Object_Type(unsigned int uuser_id, string ppath);

@q **** (4) Definition  @>
@
@<|Irods_Object_Type| constructor definitions@>=

Irods_Object_Type::Irods_Object_Type(unsigned int uuser_id, string ppath)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type' constructor (non-default)."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   user_id = uuser_id;

   path = ppath;

   id = dublin_core_metadata_id = dublin_core_metadata_irods_object_id 
      = irods_object_ref_id = detached_signature_irods_object_id = 0UL;

   gpg_key_pair_id_encrypt = gpg_key_pair_id_sign = 0U;
 
   irods_server_id = 1;

   marked_for_deletion_from_archive = marked_for_deletion_from_gwirdsif_db 
       = deleted_from_archive = deleted_from_gwirdsif_db = encrypted = signed_gpg 
       = compressed_tar_file = compressed_gzip = compressed_bzip2 = false;

   delete_from_archive_timestamp = delete_from_gwirdsif_db_timestamp = last_modified 
      = static_cast<time_t>(0);

   char outstr[200];

   struct tm tmp;

@q ***** (5) @>

   errno = 0;
   created = time(0);

   if (created == static_cast<time_t>(-1))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type' constructor:  `time' failed, "
            << "returning `(time_t) -1':"
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Exiting function unsuccessfully.  "
            << "Throwing `Initialize_Exception_Type'."
            << endl;
       unlock_cerr_mutex(); 

       throw Initialize_Exception_Type();

   }  /* |if|  */
    
@q ***** (5) @>

   if ((gmtime_r(&created, &tmp)) == 0) 
   {

       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type' constructor:  `gmtime_r' failed, "
            << "returning 0."
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Exiting function unsuccessfully.  "
            << "Throwing `Initialize_Exception_Type'."
            << endl;
       unlock_cerr_mutex(); 
       
       throw Initialize_Exception_Type();

   }

@q ***** (5) @>

   if (strftime(outstr, sizeof(outstr), "%Y-%m-%d %H:%M:%S UTC", &tmp) == 0) 
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type' constructor:  `strftime' failed, "
            << "returning 0."
            << endl
            << "Exiting function unsuccessfully.  "
            << "Throwing `Initialize_Exception_Type'."
            << endl; 
       unlock_cerr_mutex(); 

       throw Initialize_Exception_Type();
   }

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type' constructor successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return;

}  /* End of non-default |Irods_Object_Type| constructor definition  */


@q *** (3) Setting function.  @>
@ Setting function.
\initials{LDF 2013.01.08.}

\LOG
\initials{LDF 2013.01.08.}
Added this function.

\initials{LDF 2013.11.27.}
Added optional argument |unsigned long int dc_metadata_id = 0UL|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=

int
set(unsigned int uuser_id, 
    string ppath, 
    unsigned long int dc_metadata_id = 0UL,
    unsigned long int iirods_object_ref_id = 0UL);

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::set| definitions@>=

int
Irods_Object_Type::set(unsigned int uuser_id, 
                       string ppath, 
                       unsigned long int dc_metadata_id, 
                       unsigned long int iirods_object_ref_id)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::set'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   user_id = uuser_id;

   path = ppath;

   dublin_core_metadata_id = dc_metadata_id;

   irods_object_ref_id = iirods_object_ref_id;

   id = dublin_core_metadata_irods_object_id = detached_signature_irods_object_id = 0UL;

   gpg_key_pair_id_encrypt = gpg_key_pair_id_sign = 0U;
 
   irods_server_id = 1;

   marked_for_deletion_from_archive = marked_for_deletion_from_gwirdsif_db 
      = deleted_from_archive = deleted_from_gwirdsif_db = encrypted = signed_gpg 
      = compressed_tar_file = compressed_gzip = compressed_bzip2
      = false;

   delete_from_archive_timestamp = delete_from_gwirdsif_db_timestamp = last_modified 
      = static_cast<time_t>(0);

   gpg_key_fingerprint_encrypt = gpg_key_fingerprint_sign = "";

   handle_vector.clear();
   avu_vector.clear();

   handle_id_vector.clear();
   handle_value_id_vector.clear();
   handle_name_string_vector.clear();

   char outstr[200];

   struct tm tmp;

@q ***** (5) @>

   errno = 0;
   created = time(0);


   if (created == static_cast<time_t>(-1))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::set':  `time' failed, "
            << "returning `(time_t) -1':"
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if|  */
    
@q ***** (5) @>

   if ((gmtime_r(&created, &tmp)) == 0) 
   {

       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::set':  `gmtime_r' failed, "
            << "returning 0."
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 
       
       return 1;

   }

@q ***** (5) @>

   if (strftime(outstr, sizeof(outstr), "%Y-%m-%d %H:%M:%S UTC", &tmp) == 0) 
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::set':  `strftime' failed, "
            << "returning 0."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;
   }

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::set' successfully  with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::set| definition  */

@q *** (3) |get_avus_from_irods_system|.  @>

@ |get_avus_from_irods_system|.
\initials{LDF 2012.10.11.}

\LOG
\initials{LDF 2012.10.11.}
Added this function.

\initials{LDF 2012.10.12.}
Replaced argument |FILE *fp| with |string command|.  Now opening pipe in this function 
instead of |Scan_Parse_Parameter_Type::get_metadata|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
get_avus_from_irods_system(string command, 
                           string filename, 
                           Scan_Parse_Parameter_Type &param, 
                           int *ctr = 0);

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

int
Irods_Object_Type::get_avus_from_irods_system(string command,
                            string filename, 
                            Scan_Parse_Parameter_Type &param, 
                            int *ctr)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::get_avus_from_irods_system'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

   stringstream temp_strm;

   char buffer[4][512];  /* $2^{9}$  */
   memset(buffer, 0, 512);
   
   char *temp_ptr = 0;

   bool first_time = true;
 
   string temp_str;
   size_t pos;

   Irods_AVU_Type avu;

   struct tm tm;

@q ***** (5) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

    FILE *fp;

    fp = popen(command.c_str(), "r");

    if (fp == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_avus_from_irods_system':"
             << endl
             << "`popen' failed, returning NULL."
             << endl
             << "Failed to execute `imeta' command."
             << endl
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        return 1;

    }  /* |if (fp == 0)|  */
       
@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_avus_from_irods_system':"
             << endl
             << "`popen' succeeded."
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

   do
   {
@q ****** (6) @>

      avu.clear();

      for (int i = 0; i < 4; ++i)
      {
@q ******* (7) @>

           memset(buffer[i], 0, 512);
           errno = 0;
           temp_ptr = fgets(buffer[i], 512, fp);

           if (temp_ptr == 0 && first_time)
           {
               lock_cerr_mutex(); 
               cerr << "ERROR!  In `Irods_Object_Type::get_avus_from_irods_system':"
                    << endl
                    << "`fgets' failed, returning 0:"
                    << endl 
                    << "Error:  " << strerror(errno)
                    << endl
                    << "Failed to read output of `imeta' command."
                    << endl
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               pclose(fp);
               fp = 0;

               return 1;

           }  /* |if|  */
                

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

           else if (strlen(buffer[i]) == 512 - 1)
           {
               lock_cerr_mutex(); 
               cerr << "ERROR!  In `Irods_Object_Type::get_avus_from_irods_system':"
                    << endl
                    << "`fgets' read " << (512 - 1) << " characters.  Output of `imeta' command "
                    << "exceeds the maximum permitted length " << (512 - 2) 
                    << " (512 - 2) characters)."
                    << endl
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               pclose(fp);
               fp = 0;

               return 1;


           }  /* |else if|  */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << "In `Irods_Object_Type::get_avus_from_irods_system':"
                    << endl
                    << "`fgets' succeeded, reading " << strlen(buffer[i]) << " characters."
                    << endl
                    << "`buffer[" << i << "]' == " << endl << buffer[i] << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif /* |DEBUG_COMPILE|  */ 

           first_time = false;
           temp_str = buffer[i];

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

           if (i == 0)  /* ``attribute'' line  */
           {
@q ******** (8) @>
               pos = temp_str.find("attribute");

               if (pos != 0)
               {
#if DEBUG_COMPILE
                   if (DEBUG)
                   {
                       lock_cerr_mutex(); 
                       cerr << "`i' == 0 and not \"attribute\" line."
                            << endl
                            << "Skipping."
                            << endl;
                       unlock_cerr_mutex(); 

                   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

                   break;

               } /* |if (pos != 0)|  */

@q ******** (8) @>

#if DEBUG_COMPILE
               else if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "Found \"attribute\" line: " << buffer[i] << endl;
                   unlock_cerr_mutex(); 

               }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

               avu.attribute = temp_str;
               avu.attribute.erase(0, strlen("attribute: "));

               if (avu.attribute[avu.attribute.length() - 1] == '\n')
                  avu.attribute.erase(avu.attribute.length() - 1);

@q ******** (8) @>

#if DEBUG_COMPILE
               if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "`avu.attribute' == `" << avu.attribute << "'" << endl;
                   unlock_cerr_mutex(); 

               }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                

@q ******** (8) @>

           }  /* |if (i == 0)| (``attribute'' line)   */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

           else if (i == 1)  /* ``value'' line  */
           {
@q ******** (8) @>
               pos = temp_str.find("value");

               if (pos != 0)
               {
#if DEBUG_COMPILE
                   if (DEBUG)
                   {
                       lock_cerr_mutex(); 
                       cerr << "`i' == 1 and not \"value\" line."
                            << endl
                            << "Skipping."
                            << endl;
                       unlock_cerr_mutex(); 

                   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

                   break;

               } /* |if (pos != 0)|  */

@q ******** (8) @>

#if DEBUG_COMPILE
               else if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "Found \"value\" line: " << buffer[i] << endl;
                   unlock_cerr_mutex(); 

               }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

               avu.value = temp_str;
               avu.value.erase(0, strlen("value: "));

               if (avu.value[avu.value.length() - 1] == '\n')
                  avu.value.erase(avu.value.length() - 1);

@q ******** (8) @>

#if DEBUG_COMPILE
               if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "`avu.value' == `" << avu.value << "'" << endl;
                   unlock_cerr_mutex(); 

               }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                

           }  /* |else if (i == 1)| (``value'' line)   */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

           else if (i == 2)  /* ``units'' line  */
           {
@q ******** (8) @>
               pos = temp_str.find("units");

               if (pos != 0)
               {
#if DEBUG_COMPILE
                   if (DEBUG)
                   {
                       lock_cerr_mutex(); 
                       cerr << "`i' == 2 and not \"units\" line."
                            << endl
                            << "Skipping."
                            << endl;
                       unlock_cerr_mutex(); 

                   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

                   break;

               } /* |if (pos != 0)|  */

@q ******** (8) @>

#if DEBUG_COMPILE
               else if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "Found \"units\" line: " << buffer[i] << endl;
                   unlock_cerr_mutex(); 

               }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

               avu.units = temp_str;
               avu.units.erase(0, strlen("units: "));

               if (avu.units[avu.units.length() - 1] == '\n')
                  avu.units.erase(avu.units.length() - 1);

@q ******** (8) @>

#if DEBUG_COMPILE
               if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "`avu.units' == `" << avu.units << "'" << endl;
                   unlock_cerr_mutex(); 

               }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                

           }  /* |else if (i == 2)| (``units'' line)   */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

           else if (i == 3)  /* ``time\_set'' line  */
           {
@q ******** (8) @>
               pos = temp_str.find("time set");

               if (pos != 0)
               {
#if DEBUG_COMPILE
                   if (DEBUG)
                   {
                       lock_cerr_mutex(); 
                       cerr << "`i' == 3 and not \"time set\" line."
                            << endl
                            << "Skipping."
                            << endl;
                       unlock_cerr_mutex(); 

                   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

                   break;

               } /* |if (pos != 0)|  */

@q ******** (8) @>

#if DEBUG_COMPILE
               else if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "Found \"time set\" line: " << buffer[i] << endl;
                   unlock_cerr_mutex(); 

               }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

               temp_str.erase(0, strlen("time_set: "));

               if (temp_str[temp_str.length() - 1] == '\n')
                  temp_str.erase(temp_str.length() - 1);

               if(strptime(temp_str.c_str(), "%Y-%m-%d.%H:%M:%S", &tm))
                  avu.time_set = static_cast<unsigned int>(mktime(&tm)); 
@q ******** (8) @>

#if DEBUG_COMPILE
               if (DEBUG)
               {
                   lock_cerr_mutex(); 
                   cerr << "temp_str == " << temp_str << endl
                        << "`avu.time_set' == `" << avu.time_set << "'" << endl;
                   unlock_cerr_mutex(); 

               }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
  
               avu_vector.push_back(avu);              

           }  /* |else if (i == 3)| (``time\_set'' line)   */

@q ******* (7) @>

      }  /* |for|  */

@q ****** (6) @>

   }  /* |do|  */

   while (temp_ptr && !feof(fp) && !ferror(fp));

@q ***** (5) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

   pclose(fp);
   fp = 0;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::get_avus':  "
            << "`avu_vector.size()' == " << avu_vector.size() 
            << endl;
#if 0 
        for (vector<Irods_AVU_Type>::const_iterator iter = avu_vector.begin();
             iter != avu_vector.end();
             ++iter)
        {
             iter->show();
        }
#endif 

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (ctr)
      *ctr = avu_vector.size();

@q ***** (5) @>
@
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::get_avus_from_irods_system' successfully "
            << "with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::get_avus_from_irods_system| definition  */

@q *** (3) Clear.  @>
@ Clear.  
\initials{LDF 2012.10.12.}

\LOG
\initials{LDF 2012.10.12.}
Added this function.
\ENDLOG

@<|Irods_Object_Type| function declarations@>=
void 
clear(void);

@
@<|Irods_Object_Type::clear| definition@>=

void 
Irods_Object_Type::clear(void) 
{

   id = dublin_core_metadata_id = dublin_core_metadata_irods_object_id 
      = irods_object_ref_id = detached_signature_irods_object_id = 0UL;

   user_id = 0;
   irods_server_id = 0;

   gpg_key_pair_id_encrypt = gpg_key_pair_id_sign = 0U;

   marked_for_deletion_from_archive = marked_for_deletion_from_gwirdsif_db 
      = deleted_from_archive = deleted_from_gwirdsif_db = encrypted = signed_gpg
      = compressed_tar_file = compressed_gzip = compressed_bzip2 = false;

   delete_from_archive_timestamp = delete_from_gwirdsif_db_timestamp = 
      created = last_modified = static_cast<time_t>(0);

   path = gpg_key_fingerprint_encrypt = gpg_key_fingerprint_sign = ""; 
   
   handle_vector.clear();

   avu_vector.clear();

   handle_id_vector.clear();
   handle_value_id_vector.clear();
   handle_name_string_vector.clear();

   return; 

}  /* End of |Irods_Object_Type::clear| definition  */

@q *** (3) Show.  @>

@ Show.
\initials{LDF 2012.10.12.}

\LOG
\initials{LDF 2012.10.12.}
Added this function.

\initials{LDF 2013.03.14.}
Made this function |const|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
void
show(string s = "", stringstream *strm = 0) const;

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::show| definition@>=
void
Irods_Object_Type::show(string s, stringstream *strm) const
{

   stringstream temp_strm;

   if (s.empty())
     s = "Irods_Object_Type:";
   
   temp_strm << s 
            << endl 
            << "id                                   == " << id     
            << endl 
            << "dublin_core_metadata_id              == " << dublin_core_metadata_id 
            << endl 
            << "dublin_core_metadata_irods_object_id == " << dublin_core_metadata_irods_object_id
            << endl 
            << "irods_object_ref_id                  == " << irods_object_ref_id
            << endl 
            << "path                                 == " << path
            << endl 
            << "user_id                              == " << user_id
            << endl 
            << "irods_server_id                      == " << irods_server_id
            << endl 

            << "marked_for_deletion_from_archive     == " << marked_for_deletion_from_archive
            << endl 
            << "deleted_from_archive                 == " << deleted_from_archive
            << endl 
            << "delete_from_archive_timestamp        == " 
            << delete_from_archive_timestamp << " "
            << (delete_from_archive_timestamp > 0 
                  ? convert_seconds(delete_from_archive_timestamp) : "")
            << endl 

            << "marked_for_deletion_from_gwirdsif_db == " << marked_for_deletion_from_gwirdsif_db
            << endl 
            << "deleted_from_gwirdsif_db             == " << deleted_from_gwirdsif_db
            << endl 
            << "delete_from_gwirdsif_db_timestamp    == " 
            << delete_from_gwirdsif_db_timestamp << " "
            << (delete_from_gwirdsif_db_timestamp > 0 
                  ? convert_seconds(delete_from_gwirdsif_db_timestamp) : "")
            << endl 

            << "created                              == " << created << " " 
            << (created > 0 ? convert_seconds(created) : "")
            << endl 
            << "last_modified                        == " << last_modified << " "
            << (last_modified > 0 ? convert_seconds(last_modified) : "")
            << endl 
            << "encrypted                            == " << encrypted
            << endl 
            << "signed_gpg                           == " << signed_gpg
            << endl 
            << "detached_signature_irods_object_id   == " << detached_signature_irods_object_id
            << endl 
            << "gpg_key_pair_id_encrypt              == " << gpg_key_pair_id_encrypt
            << endl
            << "gpg_key_pair_id_sign                 == " << gpg_key_pair_id_sign
            << endl 
            << "gpg_key_fingerprint_encrypt          == " << gpg_key_fingerprint_encrypt
            << endl 
            << "gpg_key_fingerprint_sign             == " << gpg_key_fingerprint_sign
            << endl
            << "compressed_tar_file                  == " << compressed_tar_file
            << endl
            << "compressed_gzip                      == " << compressed_gzip
            << endl
            << "compressed_bzip2                     == " << compressed_bzip2
            << endl;

   if (avu_vector.size() > 0)
   {
       temp_strm << "avu_vector.size() == " << avu_vector.size() 
                 << endl
                 << "Showing avu_vector:"
                 << endl;

       for (vector<Irods_AVU_Type>::const_iterator iter = avu_vector.begin();
            iter != avu_vector.end();
            ++iter)
       {
            iter->show("", &temp_strm);
       }  
       temp_strm << endl;
   }
   else 
      temp_strm << "avu_vector is empty." << endl;


   if (handle_vector.size() > 0)
   {
       temp_strm << "handle_vector.size() == " << handle_vector.size() 
                 << endl
                 << "Showing handle_vector:"
                 << endl;

       for (vector<Handle_Type>::const_iterator iter = handle_vector.begin();
            iter != handle_vector.end();
            ++iter)
       {
           iter->show("", &temp_strm);
       }  
       temp_strm << endl;
   }
   else 
      temp_strm << "handle_vector is empty." << endl;

   if (handle_id_vector.size() > 0)
   {
       temp_strm << "handle_id_vector.size() == " << handle_id_vector.size() 
                 << endl
                 << "Showing handle_id_vector:"
                 << endl;

       for (vector<unsigned long int>::const_iterator iter = handle_id_vector.begin();
            iter != handle_id_vector.end();
            ++iter)
       {
            temp_strm << *iter << endl;
       }  
       temp_strm << endl;
   }
   else 
      temp_strm << "handle_id_vector is empty." << endl;

   if (handle_value_id_vector.size() > 0)
   {
       temp_strm << "handle_value_id_vector.size() == " << handle_value_id_vector.size() 
                 << endl
                 << "Showing handle_value_id_vector:"
                 << endl;

       for (vector<unsigned long int>::const_iterator iter = handle_value_id_vector.begin();
            iter != handle_value_id_vector.end();
            ++iter)
       {
            temp_strm << *iter << endl;
       }  
       temp_strm << endl;
   }
   else 
      temp_strm << "handle_value_id_vector is empty." << endl;

   temp_strm << endl;

   if (handle_name_string_vector.size() > 0)
   {
       temp_strm << "handle_name_string_vector.size() == " << handle_name_string_vector.size() 
                 << endl
                 << "Showing handle_name_string_vector:"
                 << endl;

       for (vector<string>::const_iterator iter = handle_name_string_vector.begin();
            iter != handle_name_string_vector.end();
            ++iter)
       {
            temp_strm << *iter << endl;
       }  
       temp_strm << endl;
   }
   else 
      temp_strm << "handle_name_string_vector is empty." << endl;

   temp_strm << endl;


   if (strm)
      *strm << temp_strm.str();
   else
      cerr << temp_strm.str();

   return;

}  /* End of |Irods_Object_Type::show|  */

@q *** (3) Write to database (|write_to_database|).  @>

@ Write to database (|write_to_database|).
\initials{LDF 2013.01.07.}

\LOG
\initials{LDF 2013.01.07.}
Added this function.

\initials{LDF 2014.01.09.}
Added code to data members added to account for encryption options to the \.{put} command.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
write_to_database(MYSQL *mysql_ptr, string thread_str = "");

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::write_to_database| definition@>=

int
Irods_Object_Type::write_to_database(MYSQL *mysql_ptr, string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::write_to_database'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   MYSQL_RES *result = 0;
   MYSQL_ROW curr_row;
   unsigned int row_ctr;
   unsigned int field_ctr;
   long int affected_rows;

   stringstream sql_strm;

   int ret_val = 0;

   stringstream temp_strm;
   string temp_str;

   string database_name;

@q ***** (5) @>
@
\LOG
\initials{LDF 2014.01.10.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::write_to_database| definition@>=
 
   if (is_gwirdsif)
      database_name = "gwirdsif";
   else if (is_gwirdcli)
      database_name = "gwirdcli";
   else
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl
            << "`is_gwirdsif' == `false' and `is_gwirdcli' == `false'."
            << endl
            << "Can't set `database_name'."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |else|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   status = mysql_select_db(mysql_ptr, database_name.c_str());

   if (status == 0)
   {  

#if DEBUG_COMPILE
        
        if (DEBUG)
        {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::write_to_database':  "
                << "`mysql_select_db succeeded'."
                << endl
                << "Selected `" << database_name << "' database successfully."
                << endl;
           unlock_cerr_mutex();

        }  /* |if (DEBUG)|  */ 

#endif  /* |DEBUG_COMPILE|  */ 

   }  /* |if (status == 0)| */

   else /* |status != 0| */
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "In `Irods_Object_Type::write_to_database':  "  
           << "`mysql_select_db' failed, returning " << status 
           << endl
           << "Failed to select `" << database_name << "' database:"
           << endl
           << "Error:  " << mysql_error(mysql_ptr)
           << endl 
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex();

      return 1;

   }   /* |else| (|status != 0|) */

@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   pthread_mutex_lock(&sql_lock_tables_mutex);

   temp_str 
      = "lock tables Irods_Objects write, Irods_AVUs write, Irods_Objects_Handles write";

   status = submit_mysql_query(temp_str, result, mysql_ptr);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to lock `Irods_Objects' and `Irods_Objects_Handles' tables."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result);

       pthread_mutex_unlock(&sql_lock_tables_mutex);

       return 1;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Locked `Irods_Objects', `Irods_AVUs' and `Irods_Objects_Handles' "
            << "tables successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

   temp_str = "";

   mysql_free_result(result);
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.06.06.}
Now calling |Scan_Parse_Parameter_Type::get_highest_value|.  Removed explicit code
for querying the database and handling the result.
\ENDLOG 

@<|Irods_Object_Type::write_to_database| definition@>=

   status = Scan_Parse_Parameter_Type::get_highest_value(mysql_ptr, 
                                                         "Irods_Objects", 
                                                         "irods_object_id",
                                                         id,
                                                         true);

   if (status != 0)
   {
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl
            << "`Scan_Parse_Parameter_Type::get_highest_value' failed, returning " 
            << status << "."
            << endl
            << "Failed to retrieve highest value of `Irods_Objects.irods_object_id'."
            << endl
            << "Will try to unlock tables "
            << "before exiting unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       ret_val = 1;

       goto UNLOCK_TABLES_WTD;

   }  /* |if (status != 0)|  */
#if DEBUG_COMPILE

   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Retrieved highest value of `Irods_Objects.irods_object_id' successfully "
            << "and incremented it."
            << endl
            << "`id' == " << id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   mysql_free_result(result);
   result = 0;

   sql_strm.str("");

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.06.06.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::write_to_database| definition@>=

   unsigned long avu_id;

   status = Scan_Parse_Parameter_Type::get_highest_value(mysql_ptr,
                                                         "Irods_AVUs", 
                                                         "irods_avu_id", 
                                                         avu_id, 
                                                         true);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`Scan_Parse_Parameter_Type::get_highest_value' failed, returning " 
            << status << "."
            << endl 
            << "Failed to retrieve highest value of `Irods_AVUs.irods_avu_id' from "
            << "database.  Failed to set `avu_id'."
            << endl 
            << "Will try to unlock tables before exiting unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       ret_val = 1;

       goto UNLOCK_TABLES_WTD;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`Scan_Parse_Parameter_Type::get_highest_value' succeeded, returning 0." 
            << endl 
            << "Retrieved highest value of `Irods_AVUs.irods_avu_id' from "
            << "database successfully and incremented it."  
            << endl 
            << "`avu_id' == " << avu_id
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   temp_strm.str("");

   if (created > 0)
   {

       temp_strm << "from_unixtime(" << created << "), ";
   }
   else 
       temp_strm << "0, ";

   if (last_modified > 0)
   {

       temp_strm << "from_unixtime(" << last_modified << ")";
   }
   else 
       temp_strm << "0";


   sql_strm << "insert into Irods_Objects (irods_object_id, user_id, irods_server_id, "
            << "irods_object_path, marked_for_deletion_from_archive, "
            << "marked_for_deletion_from_gwirdsif_db, "
            << "deleted_from_archive, created, last_modified, "
            << "dublin_core_metadata_id, dublin_core_metadata_irods_object_id, "
            << "irods_object_ref_id, encrypted, signed_gpg, "
            << "detached_signature_irods_object_id, "
            << "gpg_key_pair_id_encrypt, gpg_key_pair_id_sign, "
            << "gpg_key_fingerprint_encrypt, gpg_key_fingerprint_sign, "
            << "compressed_tar_file, compressed_gzip, compressed_bzip2) "
            << "values (" << id << ", " << user_id << ", 1, '" << path << "', "
            << "false, false, false, " << temp_strm.str() << ", "
            << dublin_core_metadata_id << ", " << dublin_core_metadata_irods_object_id
            << ", " << irods_object_ref_id << ", "
            << encrypted << ", " << signed_gpg << ", " 
            << detached_signature_irods_object_id << ", "
            << gpg_key_pair_id_encrypt << ", " << gpg_key_pair_id_sign << ", "
            << "'" << gpg_key_fingerprint_encrypt << "', " 
            << "'" << gpg_key_fingerprint_sign << "', "
            << compressed_tar_file << ", " << compressed_gzip << ", " 
            << compressed_bzip2 << ")";

   temp_strm.str("");

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "sql_strm.str() == " << sql_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str().c_str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Failed to insert row into `Irods_Objects' database table."
            << endl 
            << "Will try to unlock tables before exiting unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       ret_val = 1;

       goto UNLOCK_TABLES_WTD;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' succeeded, returning 0."
            << endl 
            << "Inserted row into `Irods_Objects' database table successfully."
            << endl 
            << "`affected_rows' == " << affected_rows 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   mysql_free_result(result);
   result = 0;

   sql_strm.str("");   


@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   if (handle_id_vector.size() > 0)
   {
@q ****** (6) @>

       string comma_str;

       sql_strm << "insert into Irods_Objects_Handles (irods_object_id, handle_id) values ";

       for (vector<unsigned long int>::const_iterator iter = handle_id_vector.begin();
            iter != handle_id_vector.end();
            ++iter)
       {
           sql_strm << comma_str << "(" << id << ", " << *iter << ")";

           comma_str = ", ";
       }

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "sql_strm.str() == " << sql_strm.str() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */      
    
@q ****** (6) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   status = submit_mysql_query(sql_strm.str().c_str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Failed to insert row(s) into `Irods_Objects_Handles' database table."
            << endl 
            << "Will try to unlock  tables before exiting unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       ret_val = 1;

       goto UNLOCK_TABLES_WTD;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' succeeded, returning 0."
            << endl 
            << "Inserted row(s) into `Irods_Objects_Handles' database table successfully."
            << endl 
            << "`affected_rows' == " << affected_rows 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       mysql_free_result(result);
       result = 0;
       sql_strm.str("");

@q ****** (6) @>

   }  /* |if (handle_id_vector.size() > 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':  "
            << "`handle_id_vector.size()' == 0."
            << endl 
            << "Not writing rows to `Irods_Objects_Handles' database table."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
\LOG
\initials{LDF 2013.06.06.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::write_to_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':  "
            << "avu_vector.size() == " << avu_vector.size() 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (avu_vector.size() > 0)
   {
@q ****** (6) @>

       string comma_str;

       sql_strm.str("");

       sql_strm << "insert into Irods_AVUs "
                << "(irods_avu_id, irods_object_id, attribute, value, units, time_set) "
                << "values ";

       for (vector<Irods_AVU_Type>::const_iterator iter = avu_vector.begin();
            iter != avu_vector.end();
            ++iter)
       {
@q ******* (7) @>
@
\LOG
\initials{LDF 2014.01.10.}
@:BUG FIX@> BUG FIX:  Now using |avu_id| instead of |id| to set the value of the 
\.{irods\_avu\_id} column.  Previously, |id| was used and incremented, which caused
|this->id| to have an incorrect value.
\ENDLOG 

@<|Irods_Object_Type::write_to_database| definition@>=

#if DEBUG_COMPILE
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << "convert_seconds(iter->time_set) == " 
                    << convert_seconds(iter->time_set) 
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

           sql_strm << comma_str << "(" << avu_id++ << ", " << id << ", "
                    << "'" << iter->attribute << "', '" << iter->value << "', "
                    << "'" << iter->units << "', " 
                    << "from_unixtime(" << iter->time_set << "))";

           comma_str = ", ";

@q ******* (7) @>

       }  /* |for|  */

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "sql_strm.str() == " << sql_strm.str() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */      


@q ****** (6) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   status = submit_mysql_query(sql_strm.str().c_str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Failed to insert row(s) into `Irods_AVUs' database table."
            << endl 
            << "Will try to unlock  tables before exiting unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       ret_val = 1;

       goto UNLOCK_TABLES_WTD;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl 
            << "`submit_mysql_query' succeeded, returning 0."
            << endl 
            << "Inserted row(s) into `Irods_AVUs' database table successfully."
            << endl 
            << "`affected_rows' == " << affected_rows 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       mysql_free_result(result);
       result = 0;

@q ****** (6) @>

   }  /* |if (avu_vector.size() > 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':  "
            << "`avu_vector.size()' == 0."
            << endl 
            << "Not writing rows to `Irods_AVUs' database table."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   if (result)
   {
      mysql_free_result(result);
      result = 0;
   }

   sql_strm.str("");


@q ***** (5) If |irods_object_ref_id > 0|, update row in \.{Irods\_Objects} table.  @>

@ If |irods_object_ref_id > 0|, update row in \.{Irods\_Objects} table.  
\initials{LDF 2013.11.27.}

\LOG
\initials{LDF 2013.11.27.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::write_to_database| definition@>=

   if (irods_object_ref_id > 0UL)
   {
@q ****** (6) @>

        sql_strm << "update Irods_Objects set dublin_core_metadata_irods_object_id = "
                 << id << " where irods_object_id = " << irods_object_ref_id;

#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
                 << endl 
                 << "`sql_strm.str()' == " << sql_strm.str()
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

        status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

        if (status != 0)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
                 << endl 
                 << "`submit_mysql_query' failed, returning " << status << "."
                 << endl 
                 << "Failed to update row in `Irods_Objects' database table."
                 << endl 
                 << "Will try to unlock  tables before exiting unsuccessfully."
                 << endl;
            unlock_cerr_mutex(); 

            if (result)
            {
               mysql_free_result(result);
               result = 0;
            }

            ret_val = 1;

            goto UNLOCK_TABLES_WTD;

        }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
                 << endl 
                 << "`submit_mysql_query' succeeded, returning 0."
                 << endl 
                 << "Updated row in `Irods_Objects' database table successfully."
                 << endl 
                 << "`affected_rows' == " << affected_rows 
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

       mysql_free_result(result);
       result = 0;

@q ****** (6) @>

   }  /* |if (irods_object_ref_id > 0UL)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

UNLOCK_TABLES_WTD:

   status = submit_mysql_query("unlock tables", result, mysql_ptr);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::write_to_database':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to unlock tables (`Irods_Objects', `Irods_AVUs' "
            << "and `Irods_Objects_Handles' "
            << "were locked)."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result);


       pthread_mutex_unlock(&sql_lock_tables_mutex);

       return 1;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::write_to_database':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Unlocked tables successfully.  (`Irods_Objects' and `Irods_Objects_Handles' "
            << "tables were locked.)"
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

   pthread_mutex_unlock(&sql_lock_tables_mutex);
   mysql_free_result(result);
   result = 0;

@q ***** (5) @>
@
@<|Irods_Object_Type::write_to_database| definition@>=

   if (ret_val != 0)
   {
       lock_cerr_mutex();
       cerr << thread_str << "Exiting `Irods_Object_Type::write_to_database' unsuccessfully with "
            << "return value " << ret_val << "." 
            << endl;
       unlock_cerr_mutex(); 

       return ret_val;

   }  /* |if (ret_val != 0)|  */

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::write_to_database' successfully "
            << "with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::write_to_database| definition  */

@q *** (3) Get from database (|get_from_database|).  @>

@ Get from database (|get_from_database|).
\initials{LDF 2013.01.08.}

Returns number of rows retrieved or a negative integer upon error.  The number
of rows should be either 0 or 1.  Currently, only -1 is returned in the error cases.
\initials{LDF 2013.01.09.}

\LOG
\initials{LDF 2013.01.08.}
Added this function.

\initials{LDF 2013.01.09.}
Changed name of argument |bool row_count_only| to |id_only|:  |Irods_Object_Type::id| 
must always be set, but the other data from the \.{Irods\_Objects} table may not be 
needed.  Added code for fetching the value.

\initials{LDF 2013.01.31.}
Added code for retrieving \.{handle\_id} values from the \.{Irods\_Objects\_Handles} database
table.

\initials{LDF 2014.01.09.}
Added code to data members added to account for encryption options to the \.{put} command.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
get_from_database(MYSQL *mysql_ptr, bool id_only = false, string thread_str = "");

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::get_from_database| definition@>=

int
Irods_Object_Type::get_from_database(MYSQL *mysql_ptr, bool id_only, string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */ 

   set_debug_level(DEBUG, 0, 0);

   int status;

   int ret_val;

   unsigned long int curr_handle_id = 0;
 
   Handle_Value_Type curr_handle;

   unsigned long int temp_val = 0UL;

   string handles_database = (standalone_handle) ? "handlesystem_standalone" : "handlesystem";

   string database_name;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::get_from_database'."
            << endl
            << "`id_only' == " << id_only
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
\LOG
\initials{LDF 2014.01.10.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=
 
   if (is_gwirdsif)
      database_name = "gwirdsif";
   else if (is_gwirdcli)
      database_name = "gwirdcli";
   else
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::get_from_database':"
            << endl
            << "`is_gwirdsif' == `false' and `is_gwirdcli' == `false'."
            << endl
            << "Can't set `database_name'."
            << endl 
            << "Exiting function unsuccessfully with return value -1."
            << endl;
       unlock_cerr_mutex(); 

       return -1;

   }  /* |else|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

   MYSQL_RES *result = 0;
   MYSQL_ROW curr_row;
   unsigned int row_ctr;
   unsigned int field_ctr;
   long int affected_rows;

   stringstream sql_strm;

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

   status = mysql_select_db(mysql_ptr, database_name.c_str());

   if (status == 0)
   {  

#if DEBUG_COMPILE
        
        if (DEBUG)
        {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':  "
                << "`mysql_select_db succeeded'."
                << endl
                << "Selected `" << database_name << "' database successfully."
                << endl;
           unlock_cerr_mutex();

        }  /* |if (DEBUG)|  */ 

#endif  /* |DEBUG_COMPILE|  */ 

   }  /* |if (status == 0)| */

   else /* |status != 0| */
   {
      lock_cerr_mutex(); 
      cerr << "In `Irods_Object_Type::get_from_database':  "  
           << "`mysql_select_db' failed, returning " << status 
           << endl
           << "Failed to select `" << database_name << "' database:"
           << endl
           << "Error:  " << mysql_error(mysql_ptr)
           << endl 
           << "Exiting function unsuccessfully with return value -1."
           << endl;
      unlock_cerr_mutex();

      return -1;

   }   /* |else| (|status != 0|) */


@q ******* (7) Check whether a row already exists for |irods_object_filename| @>
@q ******* (7) in the \.{Irods\_Objects} database table.                      @>

@ Check whether a row already exists for |irods_object_filename|
in the \.{Irods\_Objects} database table.
\initials{LDF 2013.01.07.}

There should only be one row, so the ``order'' clause in the ``select'' query
is just for insurance.
\initials{LDF 2013.01.09.}

\LOG
\initials{LDF 2013.08.12.}
Added code for retrieving data from the database if |id > 0|.
\ENDLOG 

@<|Irods_Object_Type::get_from_database| definition@>=

    sql_strm.str("");

    sql_strm << "select irods_object_id, irods_server_id, "
             << "marked_for_deletion_from_archive, marked_for_deletion_from_gwirdsif_db, "
             << "deleted_from_archive, unix_timestamp(created), "
             << "unix_timestamp(last_modified), "
             << "unix_timestamp(delete_from_archive_timestamp), "
             << "unix_timestamp(delete_from_gwirdsif_db_timestamp), irods_object_path, "
             << "dublin_core_metadata_id, dublin_core_metadata_irods_object_id, "
             << "irods_object_ref_id, encrypted, signed_gpg, detached_signature_irods_object_id, "
             << "gpg_key_pair_id_encrypt, gpg_key_pair_id_sign, "
             << "gpg_key_fingerprint_encrypt, gpg_key_fingerprint_sign, "
             << "compressed_tar_file, compressed_gzip, compressed_bzip2 "
             << "from " << database_name << ".Irods_Objects ";

    if (id > 0)
       sql_strm << "where irods_object_id = " << id << " ";
    else
       sql_strm << "where user_id = " << user_id << " and irods_object_path = "
             << "'" << path << "' ";

    sql_strm << "order by irods_object_id desc";

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "sql_strm.str() == " << sql_strm.str() << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (status != 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR! In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' failed, returning " 
             << status << "."
             << endl
             << mysql_error(mysql_ptr)
             << endl 
             << "Failed to retrieve data from `Irods_Objects' table for "
             << "`path' == `" << path << "'."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

       if (result)
             mysql_free_result(result);

       return -1;

    }  /* |if (status != 0)|  */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' succeeded, returning 0." 
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.01.10.}
@:BUG FIX@> BUG FIX:  Added this section.  Previously, the value of |row_ctr| wasn't
tested, so |mysql_fetch_row| was called even if no rows had been returned 
from the query.

\initials{LDF 2013.01.31.}
Now setting |ret_val = row_ctr|.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

    if (row_ctr == 0)
    {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`row_ctr' == 0.  No rows retrieved."
                 << endl 
                 << "Exiting function successfully with return value 0."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        mysql_free_result(result);

        return 0;

    }  /* |if (row_ctr == 0)|  */

    else if (row_ctr > 0)
       ret_val = row_ctr;

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if ((curr_row = mysql_fetch_row(result)) == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`mysql_fetch_row' failed:"
             << endl
             << mysql_error(mysql_ptr)
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        mysql_free_result(result);

        return -1;

    }  /* |if (curr_row = mysql_fetch_row(result) == 0)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`mysql_fetch_row' succeeded."
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 
    
@q ***** (5) |irods_object_id|.  @>
@ |irods_object_id|.
\initials{LDF Undated.}

@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`curr_row[0]' is NULL or empty."
             << endl 
             << "Failed to read `Irods_Objects.irods_object_id' from "
             << "database.  Can't set `id'."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
        {
           mysql_free_result(result);
           result = 0;
        }

        return -1;

    }  /* |if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "curr_row[0] == " << curr_row[0] << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    id = strtoul(curr_row[0], 0, 10);

    if (id == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.irods_object_id' from "
             << "database.  Failed to set `id'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        id = 0;

        if (result)
        {
           mysql_free_result(result);
           result = 0;
        }

        return -1;

    }  /* |if (id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`id':  " << id << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (id_only)
    {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::get_from_database':"
                 << endl
                 << "`id_only' == `true'.  Only fetching |irods_object_id|, not other data."
                 << endl 
                 << "Exiting function successfully with return value `ret_val' == " 
                 << ret_val << "."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */

        mysql_free_result(result); 

        return ret_val;

    }   /* |if (id_only)|  */


@q ***** (5) Fetch other fields from |curr_row| and set data members.  @>

@ Fetch other fields from |curr_row| and set data members.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "`id_only' == `false'.  Fetching more data."
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |irods_server_id|.  @>

@ |irods_server_id|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[1], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert `" << database_name << ".Irods_Objects.irods_server_id' "
              << "value from database.  Failed to set `irods_server_id'.  Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     irods_server_id = temp_val;

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`irods_server_id':  " << irods_server_id << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |marked_for_deletion_from_archive|.  @>

@ |marked_for_deletion_from_archive|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[2], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.marked_for_deletion_from_archive' "
              << "value from "
              << "database.  Failed to set `marked_for_deletion_from_archive'.  "
              << "Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     marked_for_deletion_from_archive = (temp_val == 0UL) ? false : true;

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`marked_for_deletion_from_archive':  " 
              << marked_for_deletion_from_archive << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |marked_for_deletion_from_gwirdsif_db|.  @>

@ |marked_for_deletion_from_gwirdsif_db|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[3], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.marked_for_deletion_from_gwirdsif_db' "
              << "value from "
              << "database.  Failed to set `marked_for_deletion_from_gwirdsif_db'.  "
              << "Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     marked_for_deletion_from_gwirdsif_db = (temp_val == 0UL) ? false : true;

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`marked_for_deletion_from_gwirdsif_db':  " 
              << marked_for_deletion_from_gwirdsif_db << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |deleted_from_archive|.  @>

@ |deleted_from_archive|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[4], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.deleted_from_archive' value from "
              << "database.  Failed to set `deleted_from_archive'.  Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     deleted_from_archive = (temp_val == 0UL) ? false : true;

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`deleted_from_archive':  " 
              << deleted_from_archive << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |created|.  @>

@ |created|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[5], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert `" << database_name << ".Irods_Objects.created' value from "
              << "database.  Failed to set `created'.  Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     created = static_cast<time_t>(temp_val);

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`created':  " 
              << created << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |last_modified|.  @>

@ |last_modified|.  
\initials{LDF 2013.08.07.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[6], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.last_modified' value from "
              << "database.  Failed to set `last_modified'.  Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     last_modified = static_cast<time_t>(temp_val);

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`last_modified':  " 
              << last_modified << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |delete_from_archive_timestamp|.  @>

@ |delete_from_archive_timestamp|.  
\initials{LDF 2013.08.08.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[7], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.delete_from_archive_timestamp' "
              << "value from "
              << "database.  Failed to set `delete_from_archive_timestamp'.  "
              << "Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     delete_from_archive_timestamp = static_cast<time_t>(temp_val);

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`delete_from_archive_timestamp':  " 
              << delete_from_archive_timestamp << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 


@q ****** (6) |delete_from_gwirdsif_db_timestamp|.  @>

@ |delete_from_gwirdsif_db_timestamp|.  
\initials{LDF 2013.08.08.}

@<|Irods_Object_Type::get_from_database| definition@>=

     temp_val = strtoul(curr_row[8], 0, 10);

     if (temp_val == ULONG_MAX)
     {
         lock_cerr_mutex(); 
         cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
              << endl 
              << "`strtoul' failed, returning `ULONG_MAX':"
              << endl 
              << "Error:  " << strerror(errno)
              << endl 
              << "Failed to convert "
              << "`" << database_name << ".Irods_Objects.delete_from_gwirdsif_db_timestamp' "
              << "value from "
              << "database.  Failed to set `delete_from_gwirdsif_db_timestamp'.  "
              << "Will set `id' to 0."
              << endl 
              << "Exiting function unsuccessfully with return value -1."
              << endl;
         unlock_cerr_mutex(); 

         id = 0;

         mysql_free_result(result);

         return -1;

     }  /* |if (temp_val == ULONG_MAX)|  */

     delete_from_gwirdsif_db_timestamp = static_cast<time_t>(temp_val);

@q ******* (7) @>

#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "In `Irods_Object_Type::get_from_database':  "
              << "`delete_from_gwirdsif_db_timestamp':  " 
              << delete_from_gwirdsif_db_timestamp << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |path|.  @>
@ |path|.  
\initials{LDF 2013.08.16.}

\LOG
\initials{LDF 2013.08.16.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[9] != 0 && strlen(curr_row[9]) > 0)
       path = curr_row[9];
    else
       path = "";


@q ****** (6) |dublin_core_metadata_id|.  @>
@ |dublin_core_metadata_id|.
\initials{LDF 2013.11.27.}

@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[10] == 0 || strlen(curr_row[10]) == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`curr_row[10]' is NULL or empty."
             << endl 
             << "Failed to read `Irods_Objects.dublin_core_metadata_id' from "
             << "database.  Can't set `dublin_core_metadata_id'."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        mysql_free_result(result);

        return -1;

    }  /* |if (curr_row[10] == 0 || strlen(curr_row[10]) == 0)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "curr_row[10] == " << curr_row[10] << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    dublin_core_metadata_id = strtoul(curr_row[10], 0, 10);

    if (dublin_core_metadata_id == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.dublin_core_metadata_id' from "
             << "database.  Failed to set `dublin_core_metadata_id'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        dublin_core_metadata_id = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (dublin_core_metadata_id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`dublin_core_metadata_id':  " << dublin_core_metadata_id << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |dublin_core_metadata_irods_object_id|.  @>
@ |dublin_core_metadata_irods_object_id|.
\initials{LDF 2013.11.27.}

@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[11] == 0 || strlen(curr_row[11]) == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`curr_row[11]' is NULL or empty."
             << endl 
             << "Failed to read `Irods_Objects.dublin_core_metadata_irods_object_id' from "
             << "database.  Can't set `dublin_core_metadata_irods_object_id'."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        mysql_free_result(result);

        return -1;

    }  /* |if (curr_row[11] == 0 || strlen(curr_row[11]) == 0)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "curr_row[11] == " << curr_row[11] << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    dublin_core_metadata_irods_object_id = strtoul(curr_row[11], 0, 10);

    if (dublin_core_metadata_irods_object_id == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.dublin_core_metadata_irods_object_id' from "
             << "database.  Failed to set `dublin_core_metadata_irods_object_id'.  "
             << "Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        dublin_core_metadata_irods_object_id = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (dublin_core_metadata_irods_object_id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`dublin_core_metadata_irods_object_id':  " 
             << dublin_core_metadata_irods_object_id << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |irods_object_ref_id|.  @>
@ |irods_object_ref_id|.
\initials{LDF 2013.11.27.}

@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[12] == 0 || strlen(curr_row[12]) == 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`curr_row[12]' is NULL or empty."
             << endl 
             << "Failed to read `Irods_Objects.irods_object_ref_id' from "
             << "database.  Can't set `irods_object_ref_id'."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        mysql_free_result(result);

        return -1;

    }  /* |if (curr_row[12] == 0 || strlen(curr_row[12]) == 0)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "curr_row[12] == " << curr_row[12] << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    irods_object_ref_id = strtoul(curr_row[12], 0, 10);

    if (irods_object_ref_id == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.irods_object_ref_id' from "
             << "database.  Failed to set `irods_object_ref_id'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        irods_object_ref_id = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (irods_object_ref_id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`irods_object_ref_id':  " 
             << irods_object_ref_id << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) encrypted @>
@ |encrypted|.
\initials{LDF 2014.01.09.}

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[13], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.encrypted' from "
             << "database.  Failed to set `encrypted'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        encrypted = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (encrypted == ULONG_MAX)|  */

    else if (temp_val > 1)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`temp_val' == " << temp_val << " (> 1)"
             << endl 
             << "Failed to convert `Irods_Objects.encrypted' from "
             << "database.  Failed to set `encrypted'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        encrypted = 0;

        mysql_free_result(result);

        return -1;

    }  /* |else if (temp_val > 1)|  */

@q ******** (8) @>

    encrypted = static_cast<bool>(temp_val); 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`encrypted':  " 
             << encrypted << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>


@q ******* (7) signed_gpg @>
@ |signed_gpg|.

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[14], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.signed_gpg' from "
             << "database.  Failed to set `signed_gpg'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        signed_gpg = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (signed_gpg == ULONG_MAX)|  */

    else if (temp_val > 1)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`temp_val' == " << temp_val << " (> 1)"
             << endl 
             << "Failed to convert `Irods_Objects.signed_gpg' from "
             << "database.  Failed to set `signed_gpg'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        signed_gpg = 0;

        mysql_free_result(result);

        return -1;

    }  /* |else if (temp_val > 1)|  */

@q ******** (8) @>

    signed_gpg = static_cast<bool>(temp_val); 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`signed_gpg':  " 
             << signed_gpg << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

@q ******* (7) detached_signature_irods_object_id @>
@ |detached_signature_irods_object_id|.
\initials{LDF 2014.01.09.}

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[15], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.detached_signature_irods_object_id' from "
             << "database.  Failed to set `detached_signature_irods_object_id'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        detached_signature_irods_object_id = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (detached_signature_irods_object_id == ULONG_MAX)|  */

@q ******** (8) @>

    detached_signature_irods_object_id = temp_val; 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`detached_signature_irods_object_id':  " 
             << detached_signature_irods_object_id << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

@q ******* (7) gpg_key_pair_id_encrypt @>
@ |gpg_key_pair_id_encrypt|.
\initials{LDF 2014.01.09.}

@<|Irods_Object_Type::get_from_database| definition@>=

@q ******** (8) @>

    if (curr_row[16] == 0)
    {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`curr_row[16]' NULL:"
                 << endl 
                 << "This is not permitted."
                 << endl 
                 << "Failed to retrieve `Irods_Objects.gpg_key_pair_id_encrypt' from "
                 << "database.  Will set to 0."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_encrypt = 0;

            mysql_free_result(result);

            return -1;

    }  /* |if (curr_row[16] == 0)|  */

@q ******** (8) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    else if (strlen(curr_row[16]) == 0)
    {
        gpg_key_pair_id_encrypt = 0;

    }  /* |else if (strlen(curr_row[16]) == 0)|  */

@q ******** (8) @>

    else
    {
@q ******** (8) @>
    
        temp_val = strtoul(curr_row[16], 0, 10);
 
        if (temp_val == ULONG_MAX)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`strtoul' failed, returning `ULONG_MAX':"
                 << endl 
                 << "Error:  " << strerror(errno)
                 << endl 
                 << "Failed to convert `Irods_Objects.gpg_key_pair_id_encrypt' from "
                 << "database.  Failed to set `gpg_key_pair_id_encrypt'.  Will set to 0."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_encrypt = 0;

            mysql_free_result(result);

            return -1;

        }  /* |if (gpg_key_pair_id_encrypt == ULONG_MAX)|  */

        else if (temp_val > UINT_MAX)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`temp_val' > `UINT_MAX'.  This is not permitted."
                 << endl 
                 << "Can't set `Irods_Objects.gpg_key_pair_id_encrypt'."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_encrypt = 0;

            mysql_free_result(result);            

            return -1;

        }  /* |if (gpg_key_pair_id_encrypt > UINT_MAX)|  */

    }  /* |else|  */

@q ******* (7) gpg_key_pair_id_sign @>
@ |gpg_key_pair_id_sign|.
\initials{LDF 2014.01.09.}

@<|Irods_Object_Type::get_from_database| definition@>=

@q ******** (8) @>

    if (curr_row[17] == 0)
    {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`curr_row[17]' NULL:"
                 << endl 
                 << "This is not permitted."
                 << endl 
                 << "Failed to retrieve `Irods_Objects.gpg_key_pair_id_sign' from "
                 << "database.  Will set to 0."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_sign = 0;

            mysql_free_result(result);

            return -1;

    }  /* |if (curr_row[17] == 0)|  */

@q ******** (8) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    else if (strlen(curr_row[17]) == 0)
    {
        gpg_key_pair_id_sign = 0;

    }  /* |else if (strlen(curr_row[17]) == 0)|  */

@q ******** (8) @>

    else
    {
@q ******** (8) @>
    
        temp_val = strtoul(curr_row[17], 0, 10);
 
        if (temp_val == ULONG_MAX)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`strtoul' failed, returning `ULONG_MAX':"
                 << endl 
                 << "Error:  " << strerror(errno)
                 << endl 
                 << "Failed to convert `Irods_Objects.gpg_key_pair_id_sign' from "
                 << "database.  Failed to set `gpg_key_pair_id_sign'.  Will set to 0."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_sign = 0;

            mysql_free_result(result);

            return -1;

        }  /* |if (gpg_key_pair_id_sign == ULONG_MAX)|  */

        else if (temp_val > UINT_MAX)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`temp_val' > `UINT_MAX'.  This is not permitted."
                 << endl 
                 << "Can't set `Irods_Objects.gpg_key_pair_id_sign'."
                 << endl 
                 << "Exiting function unsuccessfully with return value -1."
                 << endl;
            unlock_cerr_mutex(); 

            gpg_key_pair_id_sign = 0;

            mysql_free_result(result);            

            return -1;

        }  /* |if (gpg_key_pair_id_sign > UINT_MAX)|  */

    }  /* |else|  */

@q ******* (7) gpg_key_fingerprint_encrypt @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[18] && strlen(curr_row[18]) > 0)
       gpg_key_fingerprint_encrypt = curr_row[18];
    else 
       gpg_key_fingerprint_encrypt = "";

@q ******* (7) gpg_key_fingerprint_sign @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (curr_row[19] && strlen(curr_row[19]) > 0)
       gpg_key_fingerprint_sign = curr_row[19];
    else 
       gpg_key_fingerprint_sign = "";

@q ******* (7) compressed_tar_file @>
@
\LOG
\initials{LDF 2014.01.24.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[20], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.compressed_tar_file' from "
             << "database.  Failed to set `compressed_tar_file'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_tar_file = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (compressed_tar_file == ULONG_MAX)|  */

    else if (temp_val > 1)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`temp_val' == " << temp_val << " (> 1)"
             << endl 
             << "Failed to convert `Irods_Objects.compressed_tar_file' from "
             << "database.  Failed to set `compressed_tar_file'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_tar_file = 0;

        mysql_free_result(result);

        return -1;

    }  /* |else if (temp_val > 1)|  */

@q ******** (8) @>

    compressed_tar_file = static_cast<bool>(temp_val); 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`compressed_tar_file':  " 
             << compressed_tar_file << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

@q ******* (7) compressed_gzip @>
@
\LOG
\initials{LDF 2014.01.24.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[21], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.compressed_gzip' from "
             << "database.  Failed to set `compressed_gzip'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_gzip = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (compressed_gzip == ULONG_MAX)|  */

    else if (temp_val > 1)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`temp_val' == " << temp_val << " (> 1)"
             << endl 
             << "Failed to convert `Irods_Objects.compressed_gzip' from "
             << "database.  Failed to set `compressed_gzip'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_gzip = 0;

        mysql_free_result(result);

        return -1;

    }  /* |else if (temp_val > 1)|  */

@q ******** (8) @>

    compressed_gzip = static_cast<bool>(temp_val); 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`compressed_gzip':  " 
             << compressed_gzip << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

@q ******* (7) compressed_bzip2 @>
@
\LOG
\initials{LDF 2014.01.24.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

    errno = 0;
    temp_val = strtoul(curr_row[22], 0, 10);

    if (temp_val == ULONG_MAX)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`strtoul' failed, returning `ULONG_MAX':"
             << endl 
             << "Error:  " << strerror(errno)
             << endl 
             << "Failed to convert `Irods_Objects.compressed_bzip2' from "
             << "database.  Failed to set `compressed_bzip2'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_bzip2 = 0;

        mysql_free_result(result);

        return -1;

    }  /* |if (compressed_bzip2 == ULONG_MAX)|  */

    else if (temp_val > 1)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
             << endl 
             << "`temp_val' == " << temp_val << " (> 1)"
             << endl 
             << "Failed to convert `Irods_Objects.compressed_bzip2' from "
             << "database.  Failed to set `compressed_bzip2'.  Will set to 0."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

        compressed_bzip2 = 0;

        mysql_free_result(result);

        return -1;

    }  /* |else if (temp_val > 1)|  */

@q ******** (8) @>

    compressed_bzip2 = static_cast<bool>(temp_val); 

@q ******** (8) @>

#if DEBUG_COMPILE 
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':  "
             << "`compressed_bzip2':  " 
             << compressed_bzip2 << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

@q ******* (7) @>

@q ****** (6) @>

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       show("*this:");
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    mysql_free_result(result);
    result = 0;
    sql_strm.str("");

    sql_strm << "select distinct h.handle_id, h.handle " 
             << "from " << handles_database << ".handles as h, "
             << "" << database_name << ".Irods_Objects_Handles as ioh "
             << "where ioh.irods_object_id = " << id << " "
             << "and h.handle_id = ioh.handle_id "
             << "order by h.handle_id";

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "sql_strm.str() == " << sql_strm.str() << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (status != 0)
    {
        lock_cerr_mutex(); 
        cerr << "ERROR! In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' failed, returning " 
             << status << "."
             << endl
             << mysql_error(mysql_ptr)
             << endl 
             << "Failed to retrieve data from `Irods_Objects_Handle' table for "
             << "`id' == " << id << "."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

       if (result)
             mysql_free_result(result);

       return -1;

    }  /* |if (status != 0)|  */

@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' succeeded, returning 0." 
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (row_ctr == 0)
    {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`row_ctr' == 0.  No rows retrieved from `Irods_Objects_Handles'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        mysql_free_result(result);
        result = 0;

    }  /* |if (row_ctr == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

   for (int i = 0; i < row_ctr; ++i)
   {
@q ****** (6) @>
       if ((curr_row = mysql_fetch_row(result)) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`mysql_fetch_row' failed:"
                << endl
                << mysql_error(mysql_ptr)
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result);

           return -1;

       }  /* |if (curr_row = mysql_fetch_row(result) == 0)|  */

#if DEBUG_COMPILE 
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`mysql_fetch_row' succeeded."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 
    
@q ****** (6) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[0]' is NULL or empty."
                << endl 
                << "Failed to read `Irods_Objects_Handles.handle_id' from "
                << "database.  Can't set `id'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result);

           return -1;

       }  /* |if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)|  */

#if DEBUG_COMPILE
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "curr_row[0] == " << curr_row[0] << endl;
           cerr << "curr_row[1] == " << curr_row[1] << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

       errno = 0;
       curr_handle_id = strtoul(curr_row[0], 0, 10);

       if (curr_handle_id == ULONG_MAX)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`strtoul' failed, returning `ULONG_MAX':"
                << endl 
                << "Error:  " << strerror(errno)
                << endl 
                << "Failed to convert `Irods_Objects_Handles.handle_id' from "
                << "database.  Failed to set `curr_handle_id'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result);

           return -1;

       }  /* |if (curr_handle_id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':  "
                << "`curr_handle_id':  " << curr_handle_id << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>   

       handle_id_vector.push_back(curr_handle_id);
       handle_name_string_vector.push_back(curr_row[1]);

   }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "handle_id_vector.size() == " << handle_id_vector.size() << endl;
       cerr << "handle_name_string_vector.size() == " << handle_name_string_vector.size() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) Retrieve AVUs.  @>

@ Retrieve AVUs.  
\initials{LDF 2013.06.06.}

\LOG
\initials{LDF 2013.06.06.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::get_from_database| definition@>=

   mysql_free_result(result);
   result = 0;
   sql_strm.str("");

   Irods_AVU_Type curr_avu;
 
   sql_strm << "select irods_avu_id, attribute, value, units, time_set from "
            << "Irods_AVUs where irods_object_id = " << id << " order by irods_avu_id";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::get_from_database':  "
            << "`sql_strm.str()':  " << sql_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

   if (status != 0)
   {
        lock_cerr_mutex(); 
        cerr << "ERROR! In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' failed, returning " 
             << status << "."
             << endl
             << mysql_error(mysql_ptr)
             << endl 
             << "Failed to retrieve data from `Irods_AVUs' table for "
             << "`irods_object_id' == " << id << "."
             << endl 
             << "Exiting function unsuccessfully with return value -1."
             << endl;
        unlock_cerr_mutex(); 

       if (result)
             mysql_free_result(result);

       return -1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << "In `Irods_Object_Type::get_from_database':"
             << endl
             << "`Scan_Parse_Parameter_Type::submit_mysql_query' succeeded, returning 0." 
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

    if (row_ctr == 0)
    {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::get_from_database':"
                 << endl 
                 << "`row_ctr' == 0.  No rows retrieved from `Irods_AVUs'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        mysql_free_result(result);
        result = 0;

    }  /* |if (row_ctr == 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::get_from_database':"
            << endl 
            << "`row_ctr' == " << row_ctr << "."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

   for (int i = 0; i < row_ctr; ++i)
   {
@q ****** (6) @>

       if ((curr_row = mysql_fetch_row(result)) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`mysql_fetch_row' failed:"
                << endl
                << mysql_error(mysql_ptr)
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row = mysql_fetch_row(result) == 0)|  */

#if DEBUG_COMPILE 
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`mysql_fetch_row' succeeded."
                << endl;

           for (int j = 0; j < field_ctr; ++j)
           {
              if (curr_row[j] && strlen(curr_row[j]) > 0)
                   cerr << "curr_row[" << j << "] == " 
                        << curr_row[j] << endl;
              else
                   cerr << "`curr_row[" << j << "]' is NULL or empty." 
                   << endl;
           }
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 
    
@q ****** (6) |id|.  @>

@ |id|.  
\initials{LDF 2013.06.06.}

@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[0]' is NULL or empty."
                << endl 
                << "Failed to read `Irods_AVUs.irods_avu_id' from "
                << "database.  Can't set `curr_avu.id'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row[0] == 0 || strlen(curr_row[0]) == 0)|  */


@q ******* (7) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

       errno = 0;
       curr_avu.id = strtoul(curr_row[0], 0, 10);

       if (curr_avu.id == ULONG_MAX)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`strtoul' failed, returning `ULONG_MAX':"
                << endl 
                << "Error:  " << strerror(errno)
                << endl 
                << "Failed to convert the value of `Irods_AVUs.irods_avu_id' "
                << "retrieved from the database."
                << endl
                << "Failed to set `curr_avu.id'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_avu.id == ULONG_MAX)|  */

#if DEBUG_COMPILE 
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':  "
                << "`curr_avu.id':  " << curr_avu.id << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) |attribute|.  @>

@ |attribute|.  
\initials{LDF 2013.06.06.}

@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[1] == 0 || strlen(curr_row[1]) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[1]' is NULL or empty."
                << endl 
                << "Failed to read `Irods_AVUs.attribute' from "
                << "database.  Can't set `curr_avu.attribute'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row[1] == 0 || strlen(curr_row[1]) == 0)|  */

       else
       {
            curr_avu.attribute = curr_row[1];
       }


@q ****** (6) |value|.  @>

@ |value|.  
\initials{LDF 2013.06.06.}

@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[2] == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[2]' is NULL."
                << endl 
                << "Failed to read `Irods_AVUs.value' from "
                << "database.  Can't set `curr_avu.value'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row[2] == 0)|  */

       else if (strlen(curr_row[2]) > 0)
       {
            curr_avu.value = curr_row[2];
       }
       else 
            curr_avu.value = "";

@q ****** (6) |units|.  @>

@ |units|.  
\initials{LDF 2013.06.06.}

@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[3] == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[3]' is NULL."
                << endl 
                << "Failed to read `Irods_AVUs.units' from "
                << "database.  Can't set `curr_avu.units'."
                << endl 
                << "Exiting function unsuccessfully with return units -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row[3] == 0)|  */

       else if (strlen(curr_row[3]) > 0)
       {
            curr_avu.units = curr_row[3];
       }
       else 
            curr_avu.units = "";


@q ****** (6) |time_set|.  @>

@ |time_set|.  
\initials{LDF 2013.06.06.}

@<|Irods_Object_Type::get_from_database| definition@>=

       if (curr_row[4] == 0 || strlen(curr_row[4]) == 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`curr_row[4]' is NULL or empty."
                << endl 
                << "Failed to read `Irods_AVUs.irods_avu_time_set' from "
                << "database.  Can't set `curr_avu.time_set'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_row[4] == 0 || strlen(curr_row[4]) == 0)|  */


@q ****** (6) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

       time_t temp_time_val;


       status = get_seconds_since_epoch(curr_row[4], temp_time_val);

       if (status != 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::get_from_database':"
                << endl 
                << "`get_seconds_since_epoch' failed, returning " << status << "."
                << endl 
                << "Failed to convert the value of `Irods_AVUs.irods_avu_time_set' "
                << "retrieved from the database."
                << endl
                << "Failed to set `curr_avu.time_set'."
                << endl 
                << "Exiting function unsuccessfully with return value -1."
                << endl;
           unlock_cerr_mutex(); 

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           return -1;

       }  /* |if (curr_avu.time_set == ULONG_MAX)|  */

       else
       {
             curr_avu.time_set = static_cast<unsigned long int>(temp_time_val); 
           
#if DEBUG_COMPILE 
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << "In `Irods_Object_Type::get_from_database':  "
                    << "`curr_avu.time_set':  " << curr_avu.time_set << " "
                    << convert_seconds(curr_avu.time_set) 
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

       }  /* |else|  */


@q ****** (6) @>   

       curr_avu.irods_object_id = id;

       avu_vector.push_back(curr_avu);
       curr_avu.clear();

   }  /* |for|  */

#if DEBUG_COMPILE 
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::get_from_database':  "
                << "`avu_vector.size()':  " << avu_vector.size() 
                << endl;

           if (avu_vector.size() > 0)
           {

                cerr << "`avu_vector':" << endl;
 
                for (vector<Irods_AVU_Type>::iterator iter = avu_vector.begin();
                     iter != avu_vector.end();
                     ++iter)
                {
                     iter->show();
                }

                cerr << endl;

           }  /* |if (avu_vector.size() > 0)|  */

           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 


   if (result)
   {
        mysql_free_result(result);
        result = 0;
   }

   sql_strm.str("");


@q ***** (5) @>
@
@<|Irods_Object_Type::get_from_database| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::get_from_database' successfully with return value "
            << "`ret_val' == " << ret_val << "."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return ret_val;

}  /* End of |Irods_Object_Type::get_from_database| definition  */


@q *** (3) Update database entry (|update|).  @>

@ Update database entry (|update|).
\initials{LDF 2013.01.09.}

\LOG
\initials{LDF 2013.01.09.}
Added this function.

\initials{LDF 2014.02.13.}
Added the optional argument |unsigned int flags = 0U|.  If |flags & 1|, the
\.{last\_modified} field is set to the current date and time.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
update(MYSQL *mysql_ptr, unsigned int flags = 0U, string thread_str = "");

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::update| definition@>=

int
Irods_Object_Type::update(MYSQL *mysql_ptr, unsigned int flags, string thread_str)
{
@q ***** (5) @>

   /* !! TODO:  LDF 2013.03.20.  Add code for writing to `Irods\_AVUs' table.  */

   bool DEBUG = false;  /* |true|  */ 

   set_debug_level(DEBUG, 0, 0);

   int status;

   size_t temp_val = 0;

   stringstream temp_strm;

   time_t curr_time = static_cast<time_t>(0); 


#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::update'."
            << endl;
      
       show("*this:");

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) Error handling:  |id == 0|.  @>

@ Error handling:  |id == 0|.  
\initials{LDF 2013.01.09.}

@<|Irods_Object_Type::update| definition@>=

   if (id == 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':"
            << endl
            << "`id' == 0.  Can't update database entry."
            << endl
            << "Use `Irods_Object_Type::get_from_database' to set `id'."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;
 
   }  /* |if (id == 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "`id' == " << id << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   MYSQL_RES *result = 0;
   MYSQL_ROW curr_row;
   unsigned int row_ctr;
   unsigned int field_ctr;
   long int affected_rows;

   stringstream sql_strm;

   int ret_val = 0;

   string temp_str;

   char outstr[200];

   struct tm tmp;

   string database_name;

@q ***** (5) @>
@
\LOG
\initials{LDF 2014.01.10.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::update| definition@>=
 
   if (is_gwirdsif)
      database_name = "gwirdsif";
   else if (is_gwirdcli)
      database_name = "gwirdcli";
   else
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::update':"
            << endl
            << "`is_gwirdsif' == `false' and `is_gwirdcli' == `false'."
            << endl
            << "Can't set `database_name'."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |else|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   status = mysql_select_db(mysql_ptr, database_name.c_str());

   if (status == 0)
   {  

#if DEBUG_COMPILE
        
        if (DEBUG)
        {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::update':  "
                << "`mysql_select_db succeeded'."
                << endl
                << "Selected `" << database_name << "' database successfully."
                << endl;
           unlock_cerr_mutex();

        }  /* |if (DEBUG)|  */ 

#endif  /* |DEBUG_COMPILE|  */ 

   }  /* |if (status == 0)| */

   else /* |status != 0| */
   {
      lock_cerr_mutex(); 
      cerr << "In `Irods_Object_Type::update':  "  
           << "`mysql_select_db' failed, returning " << status 
           << endl
           << "Failed to select `" << database_name << "' database:"
           << endl
           << "Error:  " << mysql_error(mysql_ptr)
           << endl 
           << "Exiting function unsuccessfully with return value 1."
           << endl;
      unlock_cerr_mutex();

      return 1;

   }   /* |else| (|status != 0|) */

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   pthread_mutex_lock(&sql_lock_tables_mutex);

   status = submit_mysql_query("lock tables Irods_Objects write, Irods_Objects_Handles write",
                                result, mysql_ptr);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to lock `Irods_Objects' and `Irods_Objects_Handles' tables."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result);


       pthread_mutex_unlock(&sql_lock_tables_mutex);

       return 1;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Locked `Irods_Objects' and `Irods_Objects_Handles' tables successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

   mysql_free_result(result);
   result = 0;

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   errno = 0;
   curr_time = time(0);

   if (curr_time == static_cast<time_t>(-1))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':  `time' failed, "
            << "returning `(time_t) -1':"
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Will try to unlock tables before exiting function unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       ret_val = 1;

       goto UNLOCK_TABLES_UPDATE;

   }  /* |if|  */
    
@q ***** (5) @>

   if ((gmtime_r(&curr_time, &tmp)) == 0) 
   {

       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':  `gmtime_r' failed, "
            << "returning 0."
            << endl
            << "Error:  " << strerror(errno)
            << endl
            << "Will try to unlock tables before exiting function unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       ret_val = 1;

       goto UNLOCK_TABLES_UPDATE;

   }

@q ***** (5) @>

   if (strftime(outstr, sizeof(outstr), "%Y-%m-%d %H:%M:%S UTC", &tmp) == 0) 
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':  `strftime' failed, "
            << "returning 0."
            << endl
            << "Will try to unlock tables before exiting function unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       ret_val = 1;

       goto UNLOCK_TABLES_UPDATE;

   }

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   temp_strm.str("");

   if (last_modified == created)  
   {
       /* Unset |last_modified| if it has the same value as |created|.  
          \initials{LDF 2013.07.21.}
       */

       last_modified = 0;
   }
  
   if (flags & 1U)
      temp_strm << "from_unixtime(" << curr_time << ")";
   else if (last_modified > 0)
      temp_strm << "from_unixtime(" << last_modified << ")";
   else
      temp_strm << "0";

   sql_strm << "update Irods_Objects set last_modified = "
            << temp_strm.str() << " "
            << "where irods_object_id = " << id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "sql_strm.str() == " << sql_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   temp_strm.str("");

   status = submit_mysql_query(sql_strm.str().c_str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to update `Irods_Objects' table."
            << endl
            << "Will try to unlock tables before exiting function unsuccessfully."
            << endl;
       unlock_cerr_mutex(); 

       ret_val = 1;

       if (result)
       {
          mysql_free_result(result);
          result = 0;
       }

       goto UNLOCK_TABLES_UPDATE;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Updated `Irods_Objects' table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

   mysql_free_result(result);
   result = 0;

   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "handle_id_vector.size() == " << handle_id_vector.size() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

   if (handle_id_vector.size() > 0)
   {
@q ****** (6) @>

       sql_strm << "insert into Irods_Objects_Handles (irods_object_id, handle_id) values ";

       string comma_str = "";

       for (vector<unsigned long int>::const_iterator iter = handle_id_vector.begin();
            iter != handle_id_vector.end();
            ++iter)
       {
           sql_strm << comma_str << "(" << id << ", " << *iter << ")";
          
           comma_str = ", ";

       }  /* |for|  */

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "sql_strm.str() == " << sql_strm.str() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */        

@q ****** (6) @>
@
@<|Irods_Object_Type::update| definition@>=

       status = submit_mysql_query(sql_strm.str().c_str(), 
                                   result, 
                                   mysql_ptr, 
                                   0, 
                                   0, 
                                   &affected_rows);

       if (status != 0)
       {
           lock_cerr_mutex(); 
           cerr << "ERROR!  In `Irods_Object_Type::update':"
                << endl
                << "`submit_mysql_query' failed, returning " << status << "."
                << endl
                << "Failed to insert into `Irods_Objects_Handles' table."
                << endl
                << "Will try to unlock tables before exiting function unsuccessfully."
                << endl;
           unlock_cerr_mutex(); 

           ret_val = 1;

           if (result)
           {
              mysql_free_result(result);
              result = 0;
           }

           goto UNLOCK_TABLES_UPDATE;

       }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::update':"
                << endl
                << "`submit_mysql_query' succeeded, returning 0."
                << endl
                << "Inserted into `Irods_Objects_Handles' table successfully."
                << endl
                << "`affected_rows' == " << affected_rows
                << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

       mysql_free_result(result);
       result = 0;

       sql_strm.str("");

@q ****** (6) @>

   }  /* |if (handle_id_vector.size() > 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

UNLOCK_TABLES_UPDATE:

   status = submit_mysql_query("unlock tables", result, mysql_ptr);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to unlock tables (`Irods_Objects' and `Irods_Objects_Handles' were locked)."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result);

       pthread_mutex_unlock(&sql_lock_tables_mutex);

       return 1;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::update':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0."
            << endl
            << "Unlocked tables successfully.  (`Irods_Objects' and `Irods_Objects_Handles' "
            << "tables were locked.)"
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

   pthread_mutex_unlock(&sql_lock_tables_mutex);
   mysql_free_result(result);
   result = 0;

@q ***** (5) @>
@
@<|Irods_Object_Type::update| definition@>=

   if (ret_val != 0)
   {
       lock_cerr_mutex();
       cerr << "Exiting `Irods_Object_Type::update' unsuccessfully with "
            << "return value " << ret_val << "." 
            << endl;
       unlock_cerr_mutex(); 

       return ret_val;

   }  /* |if (ret_val != 0)|  */

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::update' successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::update| definition  */

@q *** (3) Put iRODS object (|put_irods_object|).  @>

@ Put iRODS object (|put_irods_object|).  
\initials{LDF 2013.03.07.}

\LOG
\initials{LDF 2013.03.07.}
Added this function.

\initials{LDF 2013.03.22.}
Added argument |string irods_env_filename|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
put_irods_object(string filename, string irods_env_filename, bool force = false);

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::put_irods_object| definition@>=

int
Irods_Object_Type::put_irods_object(string filename, string irods_env_filename, bool force)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

   stringstream temp_strm;

   char buffer[1024];
   memset(buffer, 0, 1024); 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::put_irods_object'."
            << endl;
      
       show("*this:");
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=
 
   temp_strm << "env irodsEnvFile=" << irods_env_filename << " iput ";

   if (force)
       temp_strm << "-f ";

   temp_strm << "'" << filename << "' "
             << "'" << path << "'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::put_irods_object':"
            << endl 
            << "`temp_strm.str()' == " << temp_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = system(temp_strm.str().c_str());

   if (status == -1 || !WIFEXITED(status))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::put_irods_object':  "
            << "`system' failed, returning " << status << "."
            << endl;

       if (WIFEXITED(status))
          cerr << "WEXITSTATUS(status) == " << WEXITSTATUS(status) 
               << endl;
       else
          cerr << "Process failed to exit."
               << endl;
 
       cerr << "Exiting `Irods_Object_Type::put_irods_object' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }   /* |(status == -1 || !WIFEXITED(status))|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=

   else if (WEXITSTATUS(status) != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::put_irods_object':  "
            << "`iput' command (called via `system') failed, "
            << "returning " << WEXITSTATUS(status) << "."
            << endl
            << "Exiting `Irods_Object_Type::put_irods_object' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |else if (WEXITSTATUS(status) != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::put_irods_object':"
            << endl 
            << "`system' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex();            

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=

   if (avu_vector.size() > 0)
   {
@q ****** (6) @>

       temp_strm.str("");

       temp_strm << "echo \"";

       for (vector<Irods_AVU_Type>::iterator iter = avu_vector.begin();
            iter != avu_vector.end();
            ++iter)
       {
@q ******* (7) @>

            temp_strm << "add -d '" << path << "' '" << iter->attribute << "' "
                      << "'" << iter->value << "'";

            if (!iter->units.empty())
            {
                temp_strm << " '" << iter->units << "'";
            }

            temp_strm << "\n";

@q ******* (7) @>

       }  /* |for|  */

       temp_strm << "\" | env irodsEnvFile=" << irods_env_filename 
                 << " imeta >/dev/null 2>/dev/null";

@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "temp_strm.str() == " << temp_strm.str() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=

   status = system(temp_strm.str().c_str());

   if (status == -1 || !WIFEXITED(status))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::put_irods_object':  "
            << "`system' failed, returning " << status << "."
            << endl;

       if (WIFEXITED(status))
          cerr << "WEXITSTATUS(status) == " << WEXITSTATUS(status) 
               << endl;
       else
          cerr << "Process failed to exit."
               << endl;
 
       cerr << "Exiting `Irods_Object_Type::put_irods_object' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }   /* |(status == -1 || !WIFEXITED(status))|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=

   else if (WEXITSTATUS(status) != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::put_irods_object':  "
            << "`imeta' command (called via `system') failed, "
            << "returning " << WEXITSTATUS(status) << "."
            << endl
            << "Exiting `Irods_Object_Type::put_irods_object' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |else if (WEXITSTATUS(status) != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::put_irods_object':"
            << endl 
            << "`system' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex();            

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

   }  /* |if|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::put_irods_object| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::put_irods_object' successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::put_irods_object| definition  */


@q *** (3) Add AVU (|add_avu|).  @>

@ Add AVU (|add_avu|).  
\initials{LDF 2013.03.08.}

\LOG
\initials{LDF 2013.03.08.}
Added this function.

\initials{LDF 2013.03.22.}
Added argument |string irods_env_filename|.

\initials{LDF 2013.08.16.}
Added arguments and code for pushing the AVU onto |avu_vector| and/or writing it
to the database.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
add_avu(Irods_AVU_Type avu, 
        string irods_env_filename,
        bool call_imeta = true, 
        bool push_onto_vector = true, 
        bool database = true,
        MYSQL *mysql_ptr = 0,
        int thread_ctr = 0);

@q **** (4) Definition  @>

@
@<|Irods_Object_Type::add_avu| definition@>=

int
Irods_Object_Type::add_avu(Irods_AVU_Type avu,  
                           string irods_env_filename, 
                           bool call_imeta, 
                           bool push_onto_vector,
                           bool database,
                           MYSQL *mysql_ptr,
                           int thread_ctr)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

   stringstream temp_strm;

   char buffer[1024];
   memset(buffer, 0, 1024); 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::add_avu'."
            << endl;
      
       show("*this:");
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu| definition@>=

   if (database == true && mysql_ptr == 0)
   {
       lock_cerr_mutex(); 
       cerr << "WARNING!  In `Irods_Object_Type::add_avu':"
            << endl
            << "`database' == `true', but `mysql_ptr' == NULL."
            << endl
            << "Resetting `database' to `false' and continuing."
            << endl;
       unlock_cerr_mutex(); 

       database = false;

   }  /* |if (database == true && mysql_ptr == 0)|  */

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.16.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::add_avu| definition@>=

   if (call_imeta == false)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "In `Irods_Object_Type::add_avu':"
                << endl
                << "`call_imeta' == `false'.  Skipping to `END_CALL_IMETA'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       goto END_CALL_IMETA;

   }  /* |if (call_imeta == false)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu| definition@>=

   temp_strm << "env irodsEnvFile=" << irods_env_filename 
             << " imeta add -d '" << path << "' " 
             << "'" << avu.attribute << "' '" << avu.value << "'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "temp_strm.str() == " << temp_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = system(temp_strm.str().c_str());

   if (status == -1 || !WIFEXITED(status))
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::add_avu':  "
            << "`system' failed, returning " << status << "."
            << endl;

       if (WIFEXITED(status))
          cerr << "WEXITSTATUS(status) == " << WEXITSTATUS(status) 
               << endl;
       else
          cerr << "Process failed to exit."
               << endl;
 
       cerr << "Exiting `Irods_Object_Type::add_avu' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }   /* |(status == -1 || !WIFEXITED(status))|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu| definition@>=

   else if (WEXITSTATUS(status) != 0)
   {
       lock_cerr_mutex(); 
       cerr << "ERROR!  In `Irods_Object_Type::add_avu':  "
            << "`imeta add' command (called via `system') failed, "
            << "returning " << WEXITSTATUS(status) << "."
            << endl
            << "Exiting `Irods_Object_Type::add_avu' "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |else if (WEXITSTATUS(status) != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `Irods_Object_Type::add_avu':"
            << endl 
            << "`system' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex();            

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

END_CALL_IMETA:
   
@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.16.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::add_avu| definition@>=

   if (push_onto_vector)
      avu_vector.push_back(avu);


@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.16.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::add_avu| definition@>=

   if (database)
   {
@q ****** (6) @>

      status = avu.write_to_database(mysql_ptr, thread_ctr);

@q ****** (6) @>

      if (status != 0)
      {
          lock_cerr_mutex(); 
          cerr << "ERROR!  In `Irods_Object_Type::add_avu':  "
               << "`Irods_AVU_Type::write_to_database' failed, returning " << status << "."
               << endl
               << "Exiting `Irods_Object_Type::add_avu' "
               << "unsuccessfully with return value 1."
               << endl;
          unlock_cerr_mutex(); 

          return 1;

      }  /* |if (status != 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
      else if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << "In `Irods_Object_Type::add_avu':  "
               << "`Irods_AVU_Type::write_to_database' succeeded, returning 0."
               << endl;
          unlock_cerr_mutex(); 

      }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

   }  /* |if (database)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Exiting `Irods_Object_Type::add_avu' successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::add_avu|  definition  */

@q *** (3) Add AVU conditionally (|add_avu_cond|).  @>

@ Add AVU conditionally (|add_avu_cond|).
\initials{LDF 2013.08.16.}

\LOG
\initials{LDF 2013.08.16.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
add_avu_cond(string irods_env_filename, 
             string check_attrib,
             string check_val, 
             string new_attrib,
             MYSQL *mysql_ptr = 0,
             string new_val = "",  
             bool database = true,
             bool push_onto_vector = true, 
             int thread_ctr = 0);

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::add_avu_cond| definition@>=
int
Irods_Object_Type::add_avu_cond(string irods_env_filename, 
                                string check_attrib,
                                string check_val, 
                                string new_attrib,
                                MYSQL *mysql_ptr,
                                string new_val,
                                bool push_onto_vector,
                                bool database,
                                int thread_ctr)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "Entering `Irods_Object_Type::add_avu_cond'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu_cond| definition@>=

   vector<Irods_AVU_Type>::iterator iter = find_avu(check_attrib, check_val);

   Irods_AVU_Type curr_avu;

   bool call_imeta;

   if (iter != avu_vector.end())
   {
@q ****** (6) @>

#if DEBUG_COMPILE
      if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << "In `Irods_Object_Type::add_avu_cond':"
               << endl 
               << "Matching AVU found.  Will call `Irods_AVU_Type::add_avu'."
               << endl;
          unlock_cerr_mutex(); 

      }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       curr_avu = *iter;
       curr_avu.attribute = new_attrib;

       curr_avu.value = (new_val.empty()) ? check_val : new_val;

       time_t curr_time = time(0);

       if (   deleted_from_archive
           || (   marked_for_deletion_from_archive 
               && delete_from_archive_timestamp < curr_time - purge_irods_archive_limit))
          call_imeta = false;
       else
          call_imeta = true;

       status = add_avu(curr_avu, 
                        irods_env_filename, 
                        call_imeta,
                        push_onto_vector,
                        database,
                        mysql_ptr,
                        thread_ctr);

@q ****** (6) @>

      if (status != 0)
      {
          lock_cerr_mutex(); 
          cerr << "ERROR!  In `Irods_Object_Type::add_avu_cond':"
               << endl 
               << "`Irods_AVU_Type::add_avu' failed, returning " << status << "."
               << endl
               << "Exiting function unsuccessfully with return value -1."
               << endl;
          unlock_cerr_mutex(); 

          return -1;

      }  /* |if (status != 0)|  */
 
@q ****** (6) @>

#if DEBUG_COMPILE
      else if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << "In `Irods_Object_Type::add_avu_cond':"
               << endl 
               << "`Irods_AVU_Type::add_avu' succeeded, returning 0."
               << endl
               << "Exiting function successfully with return value 1."
               << endl;
          unlock_cerr_mutex(); 

      }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

      return 1;

   }  /* |if (iter != avu_vector.end())|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::add_avu_cond| definition@>=

   else
   {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::add_avu_cond':"
                 << endl 
                 << "No matching AVU found.  Not adding AVU."
                 << endl
                 << "Exiting function successfully with return value 0."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        return 0;

   }  /* |else|  */

@q ***** (5) @>

}  /* |Irods_Object_Type::add_avu_cond|  */


@q *** (3) Mark for deletion.  @>
@ Mark for deletion (|mark_for_deletion|).  
\initials{LDF 2013.08.07.}

\LOG
\initials{LDF 2013.08.07.}
Added this function.

\initials{LDF 2013.08.08.}
Added argument |time_t &save_delay|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=

static
int
mark_for_deletion(vector<Irods_Object_Type> &irods_object_vector, 
                  MYSQL *&mysql_ptr, 
                  Response_Type &response,
                  int user_id,
                  string irods_env_filename,
                  time_t &save_delay,
                  string thread_str = "",
                  bool wake_purge_thread = false);

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

int
Irods_Object_Type::mark_for_deletion(vector<Irods_Object_Type> &irods_object_vector, 
                                     MYSQL *&mysql_ptr, 
                                     Response_Type &response,
                                     int user_id,
                                     string irods_env_filename,
                                     time_t &save_delay,
                                     string thread_str,
                                     bool wake_purge_thread)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */  
   set_debug_level(DEBUG, 0, 0);

   stringstream sql_strm;
   stringstream sql_strm_1;
   
   MYSQL_RES *result   = 0;
   MYSQL_RES *result_1 = 0;

#if 0 
   MYSQL_ROW curr_row;
   unsigned int row_ctr;
   unsigned int field_ctr;
#endif 

   long int affected_rows;
   long int affected_rows_1;

   int status = 0;

   int ret_val = -1;

   FILE *fp = 0;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::mark_for_deletion'."
            << endl;

       response.show("response:");

       cerr << "response.delay_value == " << response.delay_value << endl;

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

   if (irods_object_vector.size() == 0)
   {
       lock_cerr_mutex();
       cerr << thread_str << "WARNING!  In `Irods_Object_Type::mark_for_deletion':"
            << endl
            << "`irods_object_vector.size() == 0'.  No `Irods_Object_Type' objects "
            << "to mark for deletion."
            << endl
            << "Exiting function unsuccessfully with return value 2."
            << endl;
       unlock_cerr_mutex(); 

       return 2;

   }  /* |if (irods_object_vector.size() == 0)|  */
   

@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "irods_object_vector.size() == " << irods_object_vector.size() << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@ |response.delay_value| will be 1 if the \.{rm} command has been used with the
\.{delay} option without an argument.  In this case, the iRODS object will be
deleted by |purge_server_database| after |purge_database_interval| seconds.
\par
It is not possible to distinguish between \.{delay} with no argument and
\.{delay} with 1 second as its argument.  However, a delay of 1 second is of no
practical use, so I think it's better to use 1 as described.  Otherwise, some
other value would have to be ``sacrificed'' in this way.
\initials{LDF 2013.08.08.}

@<|Irods_Object_Type::mark_for_deletion| definition@>=

   errno = 0;
   time_t temp_time_val = time(0);  

   time_t curr_time;
                                    
   if (temp_time_val == static_cast<time_t>(-1))
   {
       lock_cerr_mutex();
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
            << endl
            << "`time' failed, returning (time_t) -1:"
            << endl
            << "Error number:  " << errno << ":"
            << endl
            << strerror(errno)
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (temp_time_val == static_cast<time_t>(-1))|  */

@q ***** (5) @>

@ The value used below 31622400 $=$ Number of seconds in a year $+$ 1 day (366 days).
This way, it will be possible to identify iRODS objects entries 
in the \.{gwirdsif.Irods\_Objects} or \.{gwirdcli.Irods\_Objects} database table 
that have been marked for immediate deletion easily, because the value in the 
\.{delete\_from\_gwirdsif\_db} field will be more than a year older 
than the current date/time.
\initials{LDF 2013.08.12.}

@<|Irods_Object_Type::mark_for_deletion| definition@>=

   curr_time = temp_time_val;

   if (response.delay_value == 1) 
   {
       save_delay = temp_time_val;
   }
   else if (response.delay_value > 1) 
   {
      temp_time_val += static_cast<time_t>(response.delay_value);
      save_delay = temp_time_val;
   }
   else  /* Mark iRODS objects for immediate deletion  */
   {
      if (   temp_time_val <= purge_irods_archive_limit
          || (temp_time_val - purge_irods_archive_limit) <= 31622400)
      {

          /* Error handling.  \initials{LDF 2013.08.14.}  */

          lock_cerr_mutex();
          cerr << thread_str << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
               << endl
               << "`temp_time_val' and/or `purge_irods_archive_limit' has invalid value:"
               << endl 
               << "`temp_time_val' <= `purge_irods_archive_limit'"
               << endl 
               << "or `temp_time_val' - `purge_irods_archive_limit' <= 31622400"
               << endl
               << "`temp_time_val' ==                               " << temp_time_val
               << endl 
               << "`purge_irods_archive_limit' ==                   " 
               << purge_irods_archive_limit
               << endl 
               << "`temp_time_val' - `purge_irods_archive_limit' == " 
               << (temp_time_val - purge_irods_archive_limit)
               << endl 
               << "Invalid timestamp value for immediate deletion."
               << endl
               << "This shouldn't ever happen."
               << endl 
               << "`purge_irods_archive_limit' probably has a bad value:"
               << endl 
               << "Exiting function unsuccessfully with return value 1."
               << endl;
          unlock_cerr_mutex(); 

          return 1;

      }  /* |if|  */
      else
      {
          temp_time_val -= purge_irods_archive_limit + 31622400;

      }

   }  /* |else|  */

   sql_strm   << "update gwirdsif.Irods_Objects set ";

   sql_strm_1 << "update gwirdsif.Irods_Objects set ";

   if (!(response.options & 4U))
   {

       sql_strm << "marked_for_deletion_from_archive = 1, "
                << "delete_from_archive_timestamp = "
                << "from_unixtime(" << temp_time_val << "), ";
   
   }
   if (response.options & 2U || response.options & 4U)
   {
      sql_strm_1 << "marked_for_deletion_from_gwirdsif_db = 1, "
                 << "delete_from_gwirdsif_db_timestamp = "
                 << "from_unixtime(" << temp_time_val << "), ";

   }

   sql_strm << "last_modified = now() "
            << "where irods_object_id in (";     

   sql_strm_1 << "last_modified = now() "
              << "where irods_object_id in (";     

   string comma_str = "";

   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
            iter != irods_object_vector.end();
            ++iter)
   {
@q ****** (6) @>

#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            iter->show();
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
           
@q ****** (6) @>

        sql_strm   << comma_str << iter->id;
        sql_strm_1 << comma_str << iter->id;

        comma_str = ", ";


@q ****** (6) @>

   }  /* |for|  */

   sql_strm    << ") and marked_for_deletion_from_archive = 0 and deleted_from_archive = 0";

   sql_strm_1 << ") and marked_for_deletion_from_gwirdsif_db = 0";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "sql_strm.str() == " << sql_strm.str() << endl
            << "sql_strm_1.str() == " << sql_strm_1.str() << endl;

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status == 0)
       status = submit_mysql_query(sql_strm_1.str(), result_1, mysql_ptr, 0, 0, &affected_rows_1);

   if (status != 0)
   {
       cerr << thread_str 
            << "ERROR! In `Irods_Object_Type::mark_for_deletion':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to update `gwirdsif.Irods_Objects' database table."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result);

       if (result_1)
          mysql_free_result(result_1);

       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "In `Irods_Object_Type::mark_for_deletion':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0." 
            << endl
            << "`affected_rows' == " << affected_rows
            << endl 
            << "`affected_rows_1' == " << affected_rows_1
            << endl 
            << "Updated `gwirdsif.Irods_Objects' database table successfully."
            << endl; 
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   mysql_free_result(result);
   mysql_free_result(result_1);

   result   = 0;
   result_1 = 0;

@q ***** (5) Create AVUs.  @>

@ Create AVUs.
\initials{LDF 2013.08.09.}

This should be done even if |response.delay_value == 0| (``immediate deletion''), 
because the purging might have been suppressed, i.e., the thread for 
running |purge_irods_archive| might not have been started.
\initials{LDF 2013.08.14.}

@:NOTE@> !! PLEASE NOTE: The rows in \.{gwirdsif.Irods\_Objects} or
\.{gwirdcli.Irods\_Objects} are updated, i.e., the fields
|marked_for_deletion_from_archive| and/or
|marked_for_deletion_from_gwirdsif_database| are set to true and the
corresponding timestamps are updated as applicable, but no rows are added to
\.{Irods\_AVUs}.  Under normal circumstances, the iRODS objects will either be
deleted by |purge_irods_archive| or undeleted by the user, so that any new rows
in \.{Irods\_AVUs} would normally only exist for a short time before being
deleted.  At present, I don't see any need to create any, especially considering
that they would contain no information that isn't already stored in the
\.{Irods\_Objects} table.
\initials{LDF 2013.08.19.}

\LOG
\initials{LDF 2013.08.09.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::mark_for_deletion| definition@>=

@q ****** (6) @>

   stringstream cmnd_strm;

   cmnd_strm << "export irodsEnvFile=" << irods_env_filename << "; a=`";

   string save_delay_str = convert_seconds(save_delay, true);

   string and_str = "";

   bool found = false;

   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
            iter != irods_object_vector.end();
            ++iter)
   {

        if (iter->deleted_from_archive == false && !(response.options & 4U))
        {
            found = true;

            cmnd_strm << and_str << "imeta add -d \"" << iter->path << "\" "
                      << "\"MARKED_FOR_DELETION_FROM_ARCHIVE\" "
                      << "\"" << save_delay << " " << save_delay_str << "\" 2>&1";

            and_str = " && ";
        }

        if (   iter->deleted_from_archive == false 
            && (response.options & 2U || response.options & 4U))
        {
            found = true;

            cmnd_strm << and_str << "imeta add -d \"" << iter->path << "\" "
                      << "\"MARKED_FOR_DELETION_FROM_GWIRDSIF_DATABASE\" "
                      << "\"" << save_delay << " " << save_delay_str << "\" 2>&1";

            and_str = " && ";
        }


   }  /* |for|  */
   
   cmnd_strm << "`; echo $?; echo $a";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "In `Irods_Object_Type::mark_for_deletion':"
            << endl
            << "`cmnd_strm.str()' == " << cmnd_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ****** (6) @>
@
\LOG
\initials{LDF 2013.08.12.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::mark_for_deletion| definition@>=

   if (found == false)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str 
                << "In `Irods_Object_Type::mark_for_deletion':"
                << endl
                << "`found' == `false'.  iRODS object(s) already deleted from archive."
                << endl
                << "Not creating AVUs."
                << endl 
                << "Skipping to `END_MARK_FOR_DELETION'."
                << endl; 
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        goto END_AVUS_MARK_FOR_DELETION;

   }  /* |if (found == false)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "cmnd_strm.str() == " << cmnd_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ****** (6) @>

   errno = 0;

   fp = popen(cmnd_strm.str().c_str(), "r");

   if (fp == 0)
   {
       lock_cerr_mutex();
       cerr << thread_str 
            << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
            << endl 
            << "`popen' failed, returning 0."
            << endl;

       if (errno != 0)
          cerr << "Error number:  " << errno
               << endl
               << "Error:         " << strerror(errno)
               << endl;

       cerr << "Exiting function unsuccessfully with return value 3."
            << endl;
       
       unlock_cerr_mutex(); 

       return 3;

   }  /* |if (fp == 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "In `Irods_Object_Type::mark_for_deletion':"
            << endl 
            << "`popen' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   ret_val = -1;

   errno = 0;
   status = fscanf(fp, "%d", &ret_val);

   if (status != 1)
   {
       lock_cerr_mutex();
       cerr << thread_str 
            << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
            << endl 
            << "`fscanf' failed, returning " << status << "."
            << endl
            << "Failed to read return value of `imeta' command."
            << endl;

       if (errno != 0)
           cerr << "Error number:  " << errno
                << endl
                << "Error:         " << strerror(errno)
                << endl;

       cerr << "Exiting function unsuccessfully with return value 3."
            << endl;
       
       unlock_cerr_mutex(); 

       pclose(fp);

       return 3;

   }  /* |if (status != 1)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "`ret_val' == " << ret_val << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

   if (ret_val != 0)
   {
@q ******* (7) @>

       lock_cerr_mutex();
       cerr << thread_str 
            << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
            << endl 
            << "`imeta' command(s) called via `popen' failed, returning " << ret_val << "."
            << endl
            << "Failed to add AVUs to iRODS objects."
            << endl;
       unlock_cerr_mutex(); 

       char buffer[1024];
       memset(buffer, 0, 1024);

       status = fread(buffer, 1, 1024, fp);

       if (status == 0)
       {

           lock_cerr_mutex(); 
           cerr << thread_str 
                << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
                << endl 
                << "`fread' failed, returning 0:"
                << endl
                << "Failed to read error output from `imeta' command(s) called via `popen'."
                << endl;
           unlock_cerr_mutex(); 
       }       

@q ******* (7) @>

       else if (status == 1024)
       {

           lock_cerr_mutex(); 
           cerr << thread_str 
                << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
                << endl 
                << "`fread' returned 1024:  Error output exceeds maximum amount (1023 characters)."
                << endl
                << "Too much error output from `imeta' command(s) called via `popen'."
                << endl
                << "This isn't permitted."
                << endl;
           unlock_cerr_mutex(); 
       }       

@q ******* (7) @>

       else
       {
           lock_cerr_mutex(); 
           cerr << "Error output from `imeta' commands called via `popen':"
                << endl
                << buffer
                << endl;
           unlock_cerr_mutex(); 
       }

       lock_cerr_mutex(); 
       cerr << "Exiting function unsuccessfully with return value 3."
            << endl;
       unlock_cerr_mutex(); 

       pclose(fp);

       return 3;

@q ******* (7) @>

   }  /* |if (ret_val != 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "In `Irods_Object_Type::mark_for_deletion':"
            << endl 
            << "`imeta' command(s) called via `popen' succeeded, returning 0."
            << endl
            << "Added AVUs to iRODS objects successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   pclose(fp);
   fp = 0;

END_AVUS_MARK_FOR_DELETION:

@q ****** (6) @>

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.12.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::mark_for_deletion| definition@>=

   map<unsigned long int, Handle_Value_Type>::iterator hv_iter;

   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
            iter != irods_object_vector.end();
            ++iter)
   {
@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "iter->handle_vector.size() == " << iter->handle_vector.size() << endl;
           cerr << "iter->handle_id_vector.size() == " << iter->handle_id_vector.size() << endl;
           cerr << "iter->handle_name_string_vector.size() == " 
                << iter->handle_name_string_vector.size() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */             

@q ****** (6) @>
@
\LOG
\initials{LDF 2013.08.21.}
@:BUG FIX@> BUG FIX:  Added this section.
\ENDLOG

@<|Irods_Object_Type::mark_for_deletion| definition@>=

       if (iter->handle_vector.size() == 0)
       {
#if DEBUG_COMPILE
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str 
                    << "In `Irods_Object_Type::mark_for_deletion':"
                    << endl 
                    << "`iter->handle_vector.size()' == 0.  "
                    << "Not calling Handle_Type::fetch_handles_from_database."
                    << endl
                    << "Continuing."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

            continue;

       }  /* |if (iter->handle_vector.size() == 0)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

       status = Handle_Type::fetch_handles_from_database(mysql_ptr, 
                                                         iter->handle_id_vector,
                                                         iter->handle_vector,
                                                         "",
                                                         thread_str);
       if (status != 0)
       {
           lock_cerr_mutex(); 
           cerr << thread_str 
                << "WARNING!  In `Irods_Object_Type::mark_for_deletion':"
                << endl 
                << "`Handle_Type::fetch_handles_from_database' failed, "
                << "returning " << status << "."
                << endl
                << "Failed to fetch handle(s) from database."
                << endl
                << "Will try to continue."
                << endl;
           unlock_cerr_mutex(); 

           iter->handle_vector.clear();

           continue;


       }  /* |if (status != 0)|  */
 
@q ****** (6) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

#if DEBUG_COMPILE
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str 
                << "In `Irods_Object_Type::mark_for_deletion':"
                << endl 
                << "`Handle_Type::fetch_handles_from_database' succeeded, "
                << "returning 0."
                << endl
                << "Fetched handle(s) from database successfully."
                << endl
                << "`iter->handle_vector.size()' == " << iter->handle_vector.size()
                << endl;

            if (iter->handle_vector.size() > 0)
               cerr << "`iter->handle_vector':"
                    << endl;

            unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

       for (vector<Handle_Type>::iterator iter_1 = iter->handle_vector.begin();
            iter_1 != iter->handle_vector.end();
            ++iter_1)
       {
@q ******* (7) @>

#if DEBUG_COMPILE
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               iter_1->show();
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

           hv_iter = iter_1->find("IRODS_OBJECT");
  
           if (hv_iter != iter_1->handle_value_map.end())
           {
               status = 0;

               if (response.options & 2U || response.options & 4U)
               {
                  status = iter_1->add_value(mysql_ptr, 
                   Handle_Value_Type::IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB_INDEX,
                   "IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB",
                   convert_seconds(save_delay),
                   hv_iter->second.created_by_user_id);
               }

               if (status == 0 && !(response.options & 4U))
               {
                  status = iter_1->add_value(mysql_ptr, 
                 Handle_Value_Type::IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE_INDEX,
                 "IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE",
                 convert_seconds(save_delay),
                 hv_iter->second.created_by_user_id);
 
               }

               if (status != 0)
               {
       
                    lock_cerr_mutex(); 
                    cerr << thread_str 
                         << "WARNING!  In `Irods_Object_Type::mark_for_deletion':"
                         << endl 
                         << "`Handle_Type::add_value' failed, returning "
                         << status << "."
                         << endl
                         << "Failed to add handle value to handle."
                         << endl
                         << "Will try to continue."
                         << endl;
                    unlock_cerr_mutex(); 


               }

           }  /* |if (hv_iter != iter_1->handle_vector.end())|  */

@q ******* (7) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

           hv_iter = iter_1->find("DC_METADATA_IRODS_OBJECT");
  
           if (hv_iter != iter_1->handle_value_map.end())
           {
               status = 0;

               if (response.options & 2U || response.options & 4U)
               {
                  status = iter_1->add_value(mysql_ptr, 
        Handle_Value_Type::DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB_INDEX,
        "DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB",
        convert_seconds(save_delay),
        hv_iter->second.created_by_user_id);

               }

               if (status == 0 && !(response.options & 4U))
               {
                  status = iter_1->add_value(mysql_ptr, 
        Handle_Value_Type::DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE_INDEX,
        "DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE",
        convert_seconds(save_delay),
        hv_iter->second.created_by_user_id);

               }

               if (status != 0)
               {
       
                    lock_cerr_mutex(); 
                    cerr << thread_str 
                         << "WARNING!  In `Irods_Object_Type::mark_for_deletion':"
                         << endl 
                         << "`Handle_Type::add_value' failed, returning "
                         << status << "."
                         << endl
                         << "Failed to add handle value to handle."
                         << endl
                         << "Will try to continue."
                         << endl;
                    unlock_cerr_mutex(); 


               }

           }  /* |if (hv_iter != iter_1->handle_vector.end())|  */



@q ******* (7) @>

       }  /* Inner |for|  */

@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           if (iter->handle_vector.size() > 0)
               cerr << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>


   }  /* Outer |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex();
       cerr << thread_str 
            << "NOTICE:  In `Irods_Object_Type::mark_for_deletion':"
            << endl  
            << "`wake_purge_thread' == " << wake_purge_thread
            << endl;

       if (wake_purge_thread && response.delay_value == 0)
          cerr << "`wake_purge_thread' == `true' and `response.delay_value' == 0:"
               << endl 
               << "Will wake purge thread for immediate deletion."
            << endl;
       else 
          cerr << "`wake_purge_thread' == " << wake_purge_thread << " "
               << "and `response.delay_value' == " 
               << response.delay_value << ":"
               << endl 
               << "Will not wake purge thread for immediate deletion."
               << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */   

    if (wake_purge_thread && response.delay_value == 0)
    {
@q ****** (6) @>

        if (purge_irods_archive_thread_id == static_cast<pthread_t>(0))
        {
            lock_cerr_mutex(); 
            cerr << thread_str 
                 << "NOTICE:  In `Irods_Object_Type::mark_for_deletion':"
                 << endl 
                 << "`purge_irods_archive_thread_id' == 0:"
                 << endl
                 << "\"Purge iRODS archive thread\" not running."
                 << endl
                 << "iRODS objects marked for immediate deletion will "
                 << "be deleted the next time `gwirdsif' is started with"
                 << endl
                 << "purging the iRODS archive enabled."
                 << endl
                 << "Not calling `pthread_cond_signal'.  Continuing."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if|  */
@q ****** (6) @>

        else 
        {
@q ******* (7) @>

#if DEBUG_COMPILE
            if (DEBUG)
            {
                lock_cerr_mutex(); 
                cerr << thread_str 
                     << "In `Irods_Object_Type::mark_for_deletion':"
                     << endl 
                     << "`purge_irods_archive_thread_id' != 0:"
                     << endl
                     << "\"Purge iRODS archive thread\" running.  "
                     << "Calling `pthread_cond_signal' to wake it up."
                     << endl;
                unlock_cerr_mutex(); 

            }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>

            pthread_mutex_lock(&purge_irods_archive_mutex);

            status = pthread_cond_signal(&purge_irods_archive_cond);

            if (status != 0)
            {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::mark_for_deletion':"
                    << endl
                    << "`pthread_cond_signal' failed, returning " << status << ":"
                    << endl
                    << "Error:  " << strerror(status)
                    << endl
                    << "Exiting function unsuccessfully with return value 1." 
                    << endl;
               unlock_cerr_mutex(); 

               return 1;

            }



#if DEBUG_COMPILE
            else if (DEBUG)
            {
                lock_cerr_mutex(); 
                cerr << thread_str << "In `Irods_Object_Type::mark_for_deletion':"
                     << endl
                     << "`pthread_cond_signal' succeeded, returning 0."
                     << endl;
                unlock_cerr_mutex(); 

            }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>

            pthread_mutex_unlock(&purge_irods_archive_mutex); 

@q ******* (7) @>

        }  /* |else|  */
       
@q ****** (6) @>

    }  /* |if (wake_purge_thread && response.delay_value == 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::mark_for_deletion| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "Exiting `Irods_Object_Type::mark_for_deletion' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::mark_for_deletion| definition  */


@q *** (3) Delete from archive.  @>
@ Delete from archive (|delete_from_archive|).  
\initials{LDF 2013.08.08.}

This function is called by |purge_irods_archive|.  It only requires the 
|id|, |user_id| and |path| data members to have been set.
\initials{LDF 2013.08.08.}


\LOG
\initials{LDF 2013.08.08.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=

int
delete_from_archive(MYSQL *&mysql_ptr, 
                    string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

int
Irods_Object_Type::delete_from_archive(MYSQL *&mysql_ptr, 
                                       string thread_str)

{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */  
   set_debug_level(DEBUG, 0, 0);

   int status = 0;

   stringstream sql_strm;

   stringstream cmnd_strm;
   
   MYSQL_RES *result = 0;

   MYSQL_ROW curr_row     = 0;
   unsigned int row_ctr   = 0U;
   unsigned int field_ctr = 0U;
   long int affected_rows = 0UL;

   char buffer[1024];
   memset(buffer, 0, 1024);

   int temp_val = 0;

   unsigned long int temp_val_1 = 0;

   FILE *fp = 0;

   vector<unsigned long int> temp_handle_id_vector; 
   vector<Handle_Type> temp_handle_vector; 

   vector<unsigned long int> irods_object_id_vector;   
   vector<Irods_Object_Type> irods_object_vector;   

   Irods_Object_Type curr_irods_object;

   vector<Irods_AVU_Type>::iterator avu_iter;

   Irods_AVU_Type curr_avu;

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::delete_from_archive'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) Retrieve user info.  @>

@ Retrieve user info.  It's required in order to have access to the iRODS environment
file for the user.
\initials{LDF 2013.08.16.}

@<|Irods_Object_Type::delete_from_archive| definition@>=

   if (id == 0UL || user_id == 0 || path.length() == 0)
   {
       lock_cerr_mutex();
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`id', `user_id' or `path' has invalid value:"
            << endl
            << "`id' == " << id
            << endl
            << "`user_id' == " << user_id
            << endl
            << "`path' == " << path
            << endl
            << "Can't delete iRODS object from archive."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (id == 0UL || user_id == 0 || path.length() == 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   Scan_Parse_Parameter_Type param;

   User_Info_Type user_info;

   pthread_mutex_lock(&global_user_info_map_mutex);

   map<int, User_Info_Type>::iterator iter = global_user_info_map.find(user_id);

@q ***** (5) @>

   if (iter == global_user_info_map.end())
   {
@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "User info for user " << user_id << " not found on "
                << "`global_user_info_map'."
                << endl
                << "Will call `Scan_Parse_Parameter_Type::get_user'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */       

       status = param.get_user(user_id, 0, "", &user_info, true);

@q ****** (6) @>

       if (status != 0)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`Scan_Parse_Parameter_Type::get_user' failed, returning " << status << "."
                << endl
                << "Can't delete iRODS object from archive."
                << endl
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           pthread_mutex_unlock(&global_user_info_map_mutex);

           return 1;

       }  /* |if (status != 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`Scan_Parse_Parameter_Type::get_user' succeeded, returning 0."
                << endl;

#if 0 
           param.show("param:");
           user_info.show("user_info:");
#endif 

           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

        global_user_info_map[user_id] = user_info;

@q ****** (6) @>

   }  /* |if (iter == global_user_info_map.end())|  */

@q ***** (5) @>

   else 
   {

       user_info = iter->second;

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "User info for user " << user_id << " found on "
                << "`global_user_info_map'."
                << endl;

#if 1 
           user_info.show("user_info:");
#endif 

           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */       

   }  /* |if (iter == global_user_info_map.end())|  */

   pthread_mutex_unlock(&global_user_info_map_mutex);

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.14.}
@:BUG FIX@> BUG FIX:  Now calling the shellscript \filename{gw\_irm.sh} instead of
passing the ``raw'' commands to |popen|.  Formerly, I was getting the 
following error:  \.{sh: line 0: echo: write error: Broken pipe}\hfil\break 
I don't know why this was happening, but using the shellscript seems to have 
fixed the problem.  The problem may have been the \.{echo} commands and 
using \.{bash} rather than \.{sh} may have fixed the problem (whatever it was).
(See below.  \initials{LDF 2013.08.16.})

\initials{LDF 2013.08.16.}
@:BUG FIX@> BUG FIX:  Now calling |fread| and |sscanf| instead of |fscanf| followed 
conditionally by |fread|:  This fixes the ``broken pipe'' error (see above).  It probably
isn't necessary to use the shellscript \filename{gw\_irm.sh}, but I'm leaving this
as it is for the moment, since I don't see any particular disadvantage to using it.
Using it is probably not significantly slower than passing the commands directly
to \.{sh}.
\ENDLOG 

@<|Irods_Object_Type::delete_from_archive| definition@>=

   cmnd_strm << config_dir << "/gw_irm.sh \"" << user_info.get_irods_env_filename() << "\" "
             << "\"" << path << "\"";


#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "cmnd_strm.str() == " << cmnd_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   errno = 0;
   fp = popen(cmnd_strm.str().c_str(), "r");

   if (fp == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`popen' failed, returning NULL."
            << endl;

       if (errno != 0)
           cerr << "`errno' == " << errno
                << endl
                << strerror(errno)
                << endl;

       cerr << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (fp == 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl 
            << "`popen' succeeded." << endl; 
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   memset(buffer, 0, 1024);

   status = fread(buffer, 1, 1024, fp);

   if (status == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`fread' failed, returning 0."
            << endl
            << "Failed to read output of `gw_irm.sh'."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       pclose(fp);

       return 1;

   }  /* |if (status == 0)|  */

   else if (status == 1024)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`fread' read 1024 characters."
            << endl
            << "Output of `gw_irm.sh' exceeds maximum amount (1023 characters)."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       pclose(fp);

       return 1;

   }  /* |if (status = 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`fread' succeeded, returning " << status << "."
            << endl
            << "`buffer' == "
            << endl
            << buffer
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=
   
   pclose(fp);
   fp = 0;

   status = sscanf(buffer, "%d", &temp_val);

   if (status != 1)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`sscanf' failed, returning " << status << "."
            << endl
            << "Failed to read exit status of `irm' command from the output of `gw_irm.sh'."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (status != 1)|  */

   

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`sscanf' succeeded, returning  1."
            << endl
            << "`temp_val' == " << temp_val
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   if (temp_val != 0)
   {
        lock_cerr_mutex(); 
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
             << endl
             << "`gw_irm.sh' failed, returning " << temp_val << " (!= 0)"
             << endl
             << "`gw_irm.sh' output:"
             << endl
             << buffer
             << endl;

        return 1;

   }  /* |else if (temp_val != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`gw_irm.sh' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   sql_strm.str("");

   sql_strm << "update gwirdsif.Irods_Objects set deleted_from_archive = 1, "
            << "marked_for_deletion_from_archive = 0, "
            << "last_modified = now(), "
            << "delete_from_archive_timestamp = now() "
            << "where irods_object_id = " << id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

@q ***** (5) @>

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Failed to update `gwirdsif.Irods_Objects' database table."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
           mysql_free_result(result); 

       return 1;

   }  /* |if (status != 0)|  */
   
#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl 
             << "`affected_rows' == " << affected_rows
             << endl 
             << "Updated `gwirdsif.Irods_Objects' database table successfully."
             << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   mysql_free_result(result); 
   result = 0;

@q ***** (5) Update associated handles.  @>

@ Update associated handles.  
\initials{LDF 2013.08.16.}

@<|Irods_Object_Type::delete_from_archive| definition@>=

   sql_strm.str("");

   string handle_database = (standalone_handle) ? "handlesystem_standalone" : "handlesystem";

   sql_strm << "select distinct handle_id from " << handle_database << ".handles "
            << "where (type = 'IRODS_OBJECT' or type = 'DC_METADATA_IRODS_OBJECT' "
            << "or type = 'IRODS_OBJECT_REF' or type = 'DC_METADATA_IRODS_OBJECT_REF') "
            << "and data = '" << path << "' "
            << "and created_by_user_id = " << user_id 
            << " order by handle_id";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "`Irods_Object_Type::delete_from_archive':"
            << endl
            << "sql_strm.str() == " << sql_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

@q ***** (5) @>

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Failed to retrieve handle ID(s) from "
            << "`" << handle_database << ".handles' database table."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
           mysql_free_result(result); 

       return 1;

   }  /* |if (status != 0)|  */
   
#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl 
             << "`row_ctr' == " << row_ctr
             << endl 
             << "Retrieved handle ID(s) from "
             << "`" << handle_database << ".handles' database table successfully."
             << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

  for (int i = 0; i < row_ctr; ++i)
  {
@q ****** (6) @>

      if ((curr_row = mysql_fetch_row(result)) == 0)
      {
           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`mysql_fetch_row' failed, returning " << status << ":"
                << endl 
                << mysql_error(mysql_ptr)
                << endl 
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result); 

           return 1;           

      }  /* |if|  */

@q ****** (6) @>

#if DEBUG_COMPILE
      else if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
               << endl
               << "`mysql_fetch_row' succeeded."
               << endl 
               << "`curr_row[0]' == " << curr_row[0]
               << endl;
          unlock_cerr_mutex(); 

      }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

      errno = 0;
      temp_val_1 = strtoul(curr_row[0], 0, 10);

      if (temp_val_1 == ULONG_MAX)
      {
           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`strtoul' failed, returning `ULONG_MAX':" 
                << endl 
                << strerror(errno)
                << endl 
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           mysql_free_result(result); 

           return 1;           


      }  /* |if (temp_val_1 == ULONG_MAX)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
      else if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
               << endl
               << "`strtoul' succeeded."
               << endl 
               << "`temp_val_1' == " << temp_val_1
               << endl;
          unlock_cerr_mutex(); 

      }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

      temp_handle_id_vector.push_back(temp_val_1);
      

@q ****** (6) @>

  }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   if (result)
   {
       mysql_free_result(result); 
       result = 0;
   }

   sql_strm.str("");


@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 

       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << "`temp_handle_id_vector.size()' == " << temp_handle_id_vector.size()
            << endl;

       if (temp_handle_id_vector.size() > 0)
       {

           cerr << "temp_handle_id_vector:"
                << endl;

           for (vector<unsigned long int>::const_iterator iter = temp_handle_id_vector.begin();
                iter != temp_handle_id_vector.end();
                ++iter)
           {
                cerr << *iter << endl;
           }

           cerr << endl;

       }  /* |if (temp_handle_id_vector.size() > 0)|  */

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   if (temp_handle_id_vector.size() > 0)
   {
@q ****** (6) @>


@q ****** (6) @>


        status = param.fetch_handles_from_database(temp_handle_id_vector, temp_handle_vector);

        if (status != 0)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                 << endl
                 << "`Scan_Parse_Parameter_Type::fetch_handles_from_database' failed, "
                 << "returning " << status << "."
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

            return 1;                      
 
        }  /* |if (status != 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                 << endl
                 << "`Scan_Parse_Parameter_Type::fetch_handles_from_database' succeeded, "
                 << "returning 0." 
                 << endl 
                 << "`temp_handle_vector.size()' == " << temp_handle_vector.size()
                 << endl;

            if (temp_handle_vector.size() > 0)
            {

                cerr << "temp_handle_vector:"
                     << endl;

                for (vector<Handle_Type>::const_iterator iter = temp_handle_vector.begin();
                     iter != temp_handle_vector.end();
                     ++iter)
                {
                     iter->show();
                }

                cerr << endl;

            }  /* |if (temp_handle_vector.size() > 0)|  */

            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

        string comma_str = "";

        sql_strm << "delete from " << handle_database << ".handles where handle_id in (";

        int handle_value_ctr = 0;

        for (vector<Handle_Type>::iterator iter = temp_handle_vector.begin();
             iter != temp_handle_vector.end();
             ++iter)
        {
@q ******* (7) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

             handle_value_ctr = 0;

             sql_strm << comma_str << iter->handle_id;

             comma_str = ", ";

             status = add_handle_value(*iter, 
                                       mysql_ptr,
                                       "IRODS_OBJECT", 
                                       path,
                                       Handle_Value_Type::IRODS_OBJECT_DELETED_FROM_ARCHIVE_INDEX,
                                       "IRODS_OBJECT_DELETED_FROM_ARCHIVE",
                                       "",
                                       thread_str);

            if (status >= 0)
            {
               handle_value_ctr += status;

               status = add_handle_value(*iter, 
                                         mysql_ptr,
                                         "DC_METADATA_IRODS_OBJECT", 
                                         path,
                  Handle_Value_Type::DC_METADATA_IRODS_OBJECT_DELETED_FROM_ARCHIVE_INDEX,
                                          "DC_METADATA_IRODS_OBJECT_DELETED_FROM_ARCHIVE",
                                          "",
                                          thread_str);
            }
           

            
    
            if (status >= 0) 
            {

               handle_value_ctr += status;

               status = add_handle_value(*iter, 
                                         mysql_ptr,
                                         "IRODS_OBJECT_REF", 
                                         path,
                                    Handle_Value_Type::IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE_INDEX,
                                         "IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE",
                                         "",
                                         thread_str);
            }

            if (status >= 0) 
            {
               handle_value_ctr += status;

               status = add_handle_value(*iter, 
                                         mysql_ptr,
                                         "DC_METADATA_IRODS_OBJECT_REF", 
                                         path,
                  Handle_Value_Type::DC_METADATA_IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE_INDEX,
                                          "DC_METADATA_IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE",
                                          "",
                                          thread_str);

            }
            if (status >= 0) 
            {
                 handle_value_ctr += status;
            }

@q ******* (7) @>

            if (status < 0)
            {

                lock_cerr_mutex(); 
                cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                     << endl
                     << "`Irods_Object_Type::add_handle_value' failed, returning "
                     << status << "."
                     << endl 
                     << "Failed to add handle value to handle."
                     << endl 
                     << "Exiting function unsuccessfully with return value 1."
                     << endl;
                unlock_cerr_mutex(); 

                return 1;

            }  /* |if (status < 0)|  */


@q ******* (7) @>

#if DEBUG_COMPILE
                else if (DEBUG)
                {
                    lock_cerr_mutex(); 
                    cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                         << endl
                         << "`Irods_Object_Type::add_handle_value' succeeded (multiple times)."
                         << endl 
                         << "Added " << handle_value_ctr << " handle value(s) to handle."
                         << endl 
                         << "(0 is a permissible value.)"
                         << endl;
                    unlock_cerr_mutex(); 

                }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
\LOG
\initials{LDF 2013.08.16.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::delete_from_archive| definition@>=
                
           

@q ******* (7) @>

        }  /* |for|  */

   
@q ****** (6) @>

        sql_strm << ") and (type = 'IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE' "
                 << "or type = "
                 << "'DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE')";

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
        if (DEBUG)   
        {
            lock_cerr_mutex(); 
            cerr << thread_str
                 << "In `Irods_Object_Type::delete_from_archive':"
                 << endl 
                 << "`sql_strm.str()' == " << sql_strm.str()
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ********* (9) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

        status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

        if (status != 0)
        {
              lock_cerr_mutex(); 
              cerr << thread_str << "ERROR!  "
                   << "In `Irods_Object_Type::delete_from_archive':"
                   << endl 
                   << "`submit_mysql_query' failed, "
                   << "returning " << status << "."
                   << endl
                   << "Exiting function unsuccessfully with return value 1."
                   << endl;
              unlock_cerr_mutex(); 

              if (result)
                 mysql_free_result(result);  

              return 1;

        }  /* |if (status != 0)|  */


@q ********* (9) @>

#if DEBUG_COMPILE
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str 
                 << "In `Irods_Object_Type::delete_from_archive':"
                 << endl 
                 << "`submit_mysql_query' succeeded, "
                 << "returning " << status << "."
                 << endl
                 << "`affected_rows' == " << affected_rows
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ********* (9) @>
  
        mysql_free_result(result);
        result = 0;
        sql_strm.str("");

@q ****** (6) @>

   }  /* |if (temp_handle_id_vector.size() > 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl 
            << "`temp_handle_id_vector' is empty.  No handles to update."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */   


@q ***** (5) Update "reference" ("REF") AVUs for other iRODS objects.  @>

@ Update "reference" ("REF") AVUs for other iRODS objects.  
\initials{LDF 2013.08.16.}

@<|Irods_Object_Type::delete_from_archive| definition@>=


   sql_strm << "select distinct irods_object_id from gwirdsif.Irods_Info "
            << "where user_id = " << user_id << " "
            << "and (attribute = 'IRODS_OBJECT_REF' "
            << "or attribute = 'DC_METADATA_IRODS_OBJECT_REF') "
            << "and value = '" << path << "'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr, 0);

   if (status != 0)
   {
         lock_cerr_mutex(); 
         cerr << thread_str << "ERROR!  "
              << "In `Irods_Object_Type::delete_from_archive':"
              << endl 
              << "`submit_mysql_query' failed, "
              << "returning " << status << "."
              << endl
              << "Exiting function unsuccessfully with return value 1."
              << endl;
         unlock_cerr_mutex(); 

         if (result)
            mysql_free_result(result);  

         return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str 
            << "In `Irods_Object_Type::delete_from_archive':"
            << endl 
            << "`submit_mysql_query' succeeded, "
            << "returning " << status << "."
            << endl
            << "`row_ctr' == " << row_ctr
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   if (row_ctr == 0)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str 
                << "In `Irods_Object_Type::delete_from_archive':"
                << endl 
                << "`row_ctr' == 0.  Skipping to `END_DELETE_FROM_ARCHIVE'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       mysql_free_result(result);  
       result = 0;

       goto END_DELETE_FROM_ARCHIVE;

   }  /* |if (row_ctr == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   for (int i = 0; i < row_ctr; ++i)
   {
@q ****** (6) @>

        if ((curr_row = mysql_fetch_row(result)) == 0)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                 << endl 
                 << "`mysql_fetch_row' failed:"
                 << endl
                 << mysql_error(mysql_ptr)
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

            mysql_free_result(result);            

            return 1;

        }  /* |if (curr_row = mysql_fetch_row(result) == 0)|  */

#if DEBUG_COMPILE 
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::delete_from_archive':"
                 << endl 
                 << "`mysql_fetch_row' succeeded."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

        errno = 0;
        temp_val_1 = strtoul(curr_row[0], 0, 10);

        if (temp_val_1 == ULONG_MAX)
        {
             lock_cerr_mutex(); 
             cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                  << endl
                  << "`strtoul' failed, returning `ULONG_MAX':" 
                  << endl 
                  << strerror(errno)
                  << endl 
                  << "Exiting function unsuccessfully with return value 1."
                  << endl;
             unlock_cerr_mutex(); 

             mysql_free_result(result); 

             return 1;           


        }  /* |if (temp_val_1 == ULONG_MAX)|  */

        else
        {

#if DEBUG_COMPILE
            if (DEBUG)
            {
                lock_cerr_mutex(); 
                cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                     << endl
                     << "`strtoul' succeeded."
                     << endl 
                     << "`temp_val_1' == " << temp_val_1
                     << endl;
                unlock_cerr_mutex(); 

            }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

            irods_object_id_vector.push_back(temp_val_1);

        }  /* |else|  */


@q ****** (6) @>

   }  /* |for|  */

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`irods_object_id_vector.size()' == " << irods_object_id_vector.size()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (irods_object_id_vector.size() == 0)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`irods_object_id_vector.size()' == 0."
                << endl
                << "Skipping to `END_DELETE_FROM_ARCHIVE'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       goto END_DELETE_FROM_ARCHIVE;

   }  /* |if (irods_object_id_vector.size() == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

   for (vector<unsigned long int>::const_iterator iter = irods_object_id_vector.begin();
        iter != irods_object_id_vector.end();
        ++iter)
   {
@q ****** (6) @>

       curr_irods_object.clear();

       curr_irods_object.id = *iter;

       status = curr_irods_object.get_from_database(mysql_ptr, false);

       if (status <= 0)
       {
 #if DEBUG_COMPILE
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "WARNING!  In `Irods_Object_Type::delete_from_archive':"
                    << endl
                    << "`Irods_Object::get_from_database' failed, returning " << status << "."
                    << endl
                    << "Will try to continue."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

           continue;

       }  /* |if (status <= 0)|  */

@q ****** (6) @>


 #if DEBUG_COMPILE
       else if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`Irods_Object::get_from_database' succeeded,, returning " << status << "."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       irods_object_vector.push_back(curr_irods_object);

@q ****** (6) @>

   }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`irods_object_vector.size()' == " << irods_object_vector.size()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (irods_object_vector.size() == 0)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
                << endl
                << "`irods_object_vector.size()' == 0."
                << endl
                << "Skipping to `END_DELETE_FROM_ARCHIVE'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       goto END_DELETE_FROM_ARCHIVE;

   }  /* |if (irods_object_vector.size() == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex();  
       cerr << thread_str << "In `Irods_Object_Type::delete_from_archive':"
            << endl
            << "`irods_object_vector':" 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "path == " << path << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
        iter != irods_object_vector.end();
        ++iter)
   {
@q ****** (6) @>
 

        status = iter->add_avu_cond(user_info.get_irods_env_filename(), 
                                    "IRODS_OBJECT_REF",
                                    path,
                                    "IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE",
                                    mysql_ptr);

        if (status >= 0)
           status = iter->add_avu_cond(user_info.get_irods_env_filename(), 
                                       "DC_METADATA_IRODS_OBJECT_REF",
                                       path,
                                       "DC_METADATA_IRODS_OBJECT_REF_DELETED_FROM_ARCHIVE",
                                       mysql_ptr);
      


        if (status < 0)
        {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_archive':"
                    << endl
                    << "`Irods_Object::add_avu_cond' failed, returning " << status << "."
                    << endl
                    << "Will try to continue."
                    << endl;
               unlock_cerr_mutex(); 
        }

@q ****** (6) @>

   }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_archive| definition@>=

END_DELETE_FROM_ARCHIVE:
   
   if (result)
      mysql_free_result(result);  

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::delete_from_archive' successfully "
            << "with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::delete_from_archive| definition  */

@q *** (3) Delete from `gwirdsif' database (|delete_from_gwirdsif_db|).  @>

@ Delete from `gwirdsif' database (|delete_from_gwirdsif_db|). 
\initials{LDF 2013.08.12.}

@q **** (4) Declaration @>
@<|Irods_Object_Type| function declarations@>=
int
delete_from_gwirdsif_db(MYSQL *&mysql_ptr, string thread_str = "");

@q **** (4) Definition @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=
int
Irods_Object_Type::delete_from_gwirdsif_db(MYSQL *&mysql_ptr, string thread_str)
{
@q ***** (5) @>

    bool DEBUG = false;  /* |true|  */
    set_debug_level(DEBUG, 0, 0); 

    MYSQL_RES *result = 0;
    MYSQL_ROW curr_row;
    unsigned int row_ctr;
    unsigned int field_ctr;

    long int affected_rows;

    stringstream sql_strm;

    string comma_str = "";

#if 0 
    int ret_val = 0;

    stringstream temp_strm;
    string temp_str;
#endif 

    int status = 0;

    unsigned long temp_val = 0UL;

    vector<unsigned long int> temp_handle_id_vector; 
    vector<Handle_Type> temp_handle_vector; 

    int handle_value_ctr = 0;

    map<unsigned long int, Handle_Value_Type>::iterator hv_iter;
 
#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "Entering `Irods_Object_Type::delete_from_gwirdsif_db'."
             << endl; 
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    if (id == 0)
    {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`id' == 0.  Can't delete row(s) from `gwirdsif.Irods_Objects' database table."
             << endl
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        return 1;

    }  /* |if (id == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    string handle_database = (standalone_handle) ? "handlesystem_standalone" : "handlesystem"; 


    if (handle_id_vector.size() == 0)
    {
         lock_cerr_mutex();
         cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
              << endl
              << "`handle_id_vector.size()' == 0."
              << endl
              << "Not calling `Handle_Type::fetch_handles_from_database'."
              << endl 
              << "Skipping to `POST_HANDLES'."
              << endl;
         unlock_cerr_mutex(); 

         goto POST_HANDLES;

    }  /* |if (handle_id_vector.size() == 0)|  */


    status = Handle_Type::fetch_handles_from_database(mysql_ptr, 
                                                      handle_id_vector,
                                                      handle_vector,
                                                      "",
                                                      thread_str);
   if (status == 2)
   {
        lock_cerr_mutex();
        cerr << thread_str << "WARNING!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`Handle_Type::fetch_handles_from_database' returned 2:"
             << endl
             << "No rows retrieved from `" << handle_database << ".handles' "
             << "database table."
             << endl 
             << "Skipping to `POST_HANDLES'."
             << endl;
        unlock_cerr_mutex(); 

        goto POST_HANDLES;

   }  /* |if (status == 2)|  */

@q ***** (5) @>

   else if (status != 0)
   {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`Handle_Type::fetch_handles_from_database' failed, returning " << status << "."
             << endl
             << "Failed to retrieve handles from `" << handle_database << ".handles' "
             << "database table."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        return 1;

   }  /* |else if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`Handle_Type::fetch_handles_from_database' succeeded, returning 0."
             << "`handle_vector.size()' == " << handle_vector.size()
             << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

   sql_strm << "delete from " << handle_database << ".handles "
            << "where handle_id in (";

   comma_str = "";

   for (vector<Handle_Type>::iterator iter = handle_vector.begin();
        iter != handle_vector.end();
        ++iter)
   {

        sql_strm << comma_str << iter->handle_id;

        comma_str = ", ";

   }  /* |for|  */

   sql_strm << ") and (type = 'IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB' "
            << "or type = 'DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB')";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex();
       cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {
       lock_cerr_mutex();
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << "."
            << endl
            << "Failed to delete rows from the `" << handle_database << ".handles' database table."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       if (result)
          mysql_free_result(result); 

       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`affected_rows' == " << affected_rows
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    mysql_free_result(result); 
    result = 0;

    sql_strm.str("");
   

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

   for (vector<Handle_Type>::iterator iter = handle_vector.begin();
        iter != handle_vector.end();
        ++iter)
   {
@q ****** (6) @>

        handle_value_ctr = 0;

        status = add_handle_value(*iter, 
                                  mysql_ptr,
                                  "IRODS_OBJECT", 
                                  path,
                                  Handle_Value_Type::IRODS_OBJECT_DELETED_FROM_GWIRDSIF_DB_INDEX,
                                  "IRODS_OBJECT_DELETED_FROM_GWIRDSIF_DB",
                                  "",
                                  thread_str);

       if (status >= 0)
       {
          handle_value_ctr += status;

          status = add_handle_value(*iter, 
                                    mysql_ptr,
                                    "DC_METADATA_IRODS_OBJECT", 
                                    path,
             Handle_Value_Type::DC_METADATA_IRODS_OBJECT_DELETED_FROM_GWIRDSIF_DB_INDEX,
                                     "DC_METADATA_IRODS_OBJECT_DELETED_FROM_GWIRDSIF_DB",
                                     "",
                                     thread_str);
       }

       if (status >= 0) 
       {
            handle_value_ctr += status;
       }

@q ****** (6) @>

       if (status < 0)
       {

           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
                << endl
                << "`Irods_Object_Type::add_handle_value' failed, returning "
                << status << "."
                << endl 
                << "Failed to add handle value to handle."
                << endl 
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           return 1;

       }  /* |if (status < 0)|  */


@q ****** (6) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                    << endl
                    << "`Irods_Object_Type::add_handle_value' succeeded (multiple times)."
                    << endl 
                    << "Added " << handle_value_ctr << " handle value(s) to handle."
                    << endl 
                    << "(0 is a permissible value.)"
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
           


@q ****** (6) @>

   }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

POST_HANDLES:

    if (result)
    {
        mysql_free_result(result); 
        result = 0;
    }

    sql_strm.str("");

    sql_strm << "delete from gwirdsif.Irods_Objects where irods_object_id = " << id;

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`sql_strm.str()' == " << sql_strm.str()
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     


@q ***** (5) @>

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

    if (status != 0)
    {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' failed, returning " << status << "."
             << endl
             << "Failed to delete row from the `gwirdsif.Irods_Objects' database table."
             << endl
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
           mysql_free_result(result); 

        return 1;

    }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`affected_rows' == " << affected_rows
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
     

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=


    if (result)
    {
        mysql_free_result(result); 
        result = 0;
    }


    sql_strm.str("");

    sql_strm << "delete from gwirdsif.Irods_AVUs where irods_object_id = " << id;

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`sql_strm.str()' == " << sql_strm.str()
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     


@q ***** (5) @>

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

    if (status != 0)
    {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' failed, returning " << status << "."
             << endl
             << "Failed to delete row(s) from the `gwirdsif.Irods_AVUs' database table."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
           mysql_free_result(result); 

        return 1;

    }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`affected_rows' == " << affected_rows
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    mysql_free_result(result); 
    result = 0;

    sql_strm.str("");

    sql_strm << "delete from gwirdsif.Irods_Objects_Handles where irods_object_id = " << id;

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`sql_strm.str()' == " << sql_strm.str()
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     


@q ***** (5) @>

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

    if (status != 0)
    {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' failed, returning " << status << "."
             << endl
             << "Failed to delete row(s) from the `gwirdsif.Irods_Objects_Handles' database table."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
           mysql_free_result(result); 

        return 1;

    }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`affected_rows' == " << affected_rows
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.11.28.}
Added this section.
\ENDLOG

@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    mysql_free_result(result); 
    result = 0;
    sql_strm.str("");

    sql_strm << "update gwirdsif.Irods_Objects set dublin_core_metadata_irods_object_id = 0 "
             << "where dublin_core_metadata_irods_object_id = " << id;

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`sql_strm.str()' == " << sql_strm.str()
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     

@q ***** (5) @>

    status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

    if (status != 0)
    {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' failed, returning " << status << "."
             << endl
             << "Failed to update row(s) in the `gwirdsif.Irods_Objects_Handles' database table."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
           mysql_free_result(result); 

        return 1;

    }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`affected_rows' == " << affected_rows
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.15.}
Added this section.
\ENDLOG
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    mysql_free_result(result);     
    result = 0;     
    sql_strm.str("");

    sql_strm << "select distinct handle_id from " << handle_database << ".handles "
             << "where (type = 'IRODS_OBJECT_REF' or type = 'DC_METADATA_IRODS_OBJECT_REF') "
             << "and data = '" << path << "' order by handle_id";

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`sql_strm.str()' == " << sql_strm.str()
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     

@q ***** (5) @>

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

   if (status != 0)
   {
        lock_cerr_mutex();
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' failed, returning " << status << "."
             << endl
             << "Failed to retrieve row(s) from the `" << handle_database << ".handles' "
             << "database table."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        if (result)
           mysql_free_result(result); 

        return 1;

   }  /* |if (status != 0)|  */

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl
             << "`submit_mysql_query' succeeded, returning 0."
             << endl
             << "`row_ctr' == " << row_ctr
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

    if (row_ctr == 0)
    {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl
                 << "`row_ctr' == 0.  Skipping to `END_DELETE_FROM_GWIRDSIF_DB'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
  
        mysql_free_result(result); 
        result = 0;

        goto END_DELETE_FROM_GWIRDSIF_DB;

    }  /* |if (row_ctr == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=    

    for (int i = 0; i < row_ctr;  ++i)
    {
@q ****** (6) @>

        if ((curr_row = mysql_fetch_row(result)) == 0)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl 
                 << "`mysql_fetch_row' failed:"
                 << endl
                 << mysql_error(mysql_ptr)
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

            mysql_free_result(result);            
           
            return 1;

        }  /* |if (curr_row = mysql_fetch_row(result) == 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE 
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl 
                 << "`mysql_fetch_row' succeeded."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

        temp_val = strtoul(curr_row[0], 0, 10);

        errno = 0;

        if (temp_val == ULONG_MAX)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl 
                 << "`strtoul' failed, returning `UNLONG_MAX':"
                 << endl
                 << strerror(errno)
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

            mysql_free_result(result);

            return 1;           

        }  /* |if (temp_val == ULONG_MAX)|  */

@q ****** (6) @>

        else
        {
#if DEBUG_COMPILE 
             if (DEBUG)
             {
                 lock_cerr_mutex(); 
                 cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                      << endl 
                      << "`strtoul' succeeded."
                      << endl
                      << "`temp_val' == " << temp_val
                      << endl;
                 unlock_cerr_mutex(); 

             }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

             temp_handle_id_vector.push_back(temp_val);

        }  /* |else|  */



@q ****** (6) @>

    }  /* |for|  */

@q ***** (5) @>

    mysql_free_result(result); 
    result = 0;

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
            << endl 
            << "`temp_handle_id_vector.size()' == " << temp_handle_id_vector.size()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     

   if (temp_handle_id_vector.size() == 0)
   {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl
                 << "`temp_handle_id_vector.size()' == 0.  No handles to fetch."
                 << endl 
                 << "Skipping to `END_DELETE_FROM_GWIRDSIF_DB'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
  
        goto END_DELETE_FROM_GWIRDSIF_DB;

   }  /* |if (temp_handle_id_vector.size() == 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

   status = Handle_Type::fetch_handles_from_database(mysql_ptr, 
                                                     temp_handle_id_vector,
                                                     temp_handle_vector,
                                                     "",
                                                     thread_str);

   if (status == 2)
   {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl 
                 << "`Handle_Type::fetch_handles_from_database' returned 2, i.e.,"
                 << endl
                 << "No rows retrieved from `" << handle_database << ".handles'."
                 << endl 
                 << "Skipping to `END_DELETE_FROM_GWIRDSIF_DB'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        goto END_DELETE_FROM_GWIRDSIF_DB;

   }  /* |if (status == 2)|  */

   else if (status != 0)
   {
        lock_cerr_mutex(); 
        cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
             << endl 
             << "`Handle_Type::fetch_handles_from_database' failed, returning " << status << "."
             << endl
             << "Failed to retrieve handles."
             << endl 
             << "Exiting function unsuccessfully with return value 1."
             << endl;
        unlock_cerr_mutex(); 

        return 1;           

   }  /* |else if (status != 0)|  */

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
            << endl 
            << "`Handle_Type::fetch_handles_from_database' succeeded, returning 0."
            << endl
            << "`temp_handle_vector.size()' == " << temp_handle_vector.size()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   if (temp_handle_vector.size() == 0)
   {
#if DEBUG_COMPILE
        if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                 << endl
                 << "`temp_handle_vector.size()' == 0.  No handles."
                 << endl 
                 << "Skipping to `END_DELETE_FROM_GWIRDSIF_DB'."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
  
        goto END_DELETE_FROM_GWIRDSIF_DB;

   }  /* |if (temp_handle_id_vector.size() == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "`temp_handle_vector':"
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   for (vector<Handle_Type>::iterator iter = temp_handle_vector.begin();
        iter != temp_handle_vector.end();
        ++iter)
   {

        handle_value_ctr = 0;

@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           iter->show();
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

       status = add_handle_value(*iter, 
                                 mysql_ptr,
                                 "IRODS_OBJECT_REF", 
                                 path,
                   Handle_Value_Type::IRODS_OBJECT_REF_DELETED_FROM_GWIRDSIF_DB_INDEX,
                                 "IRODS_OBJECT_REF_DELETED_FROM_GWIRDSIF_DB",
                                 "",
                                 thread_str);
       
       if (status >= 0)
       {
          handle_value_ctr += status;

          status = add_handle_value(*iter, 
                                    mysql_ptr,
                                    "DC_METADATA_IRODS_OBJECT_REF", 
                                    path,
             Handle_Value_Type::DC_METADATA_IRODS_OBJECT_REF_DELETED_FROM_GWIRDSIF_DB_INDEX,
                                     "DC_METADATA_IRODS_OBJECT_REF_DELETED_FROM_GWIRDSIF_DB",
                                     "",
                                     thread_str);
       }

       if (status >= 0) 
       {
            handle_value_ctr += status;
       }

@q ****** (6) @>

       if (status < 0)
       {

           lock_cerr_mutex(); 
           cerr << thread_str << "ERROR!  In `Irods_Object_Type::delete_from_gwirdsif_db':"
                << endl
                << "`Irods_Object_Type::add_handle_value' failed, returning "
                << status << "."
                << endl 
                << "Failed to add handle value to handle."
                << endl 
                << "Exiting function unsuccessfully with return value 1."
                << endl;
           unlock_cerr_mutex(); 

           return 1;

       }  /* |if (status < 0)|  */


@q ****** (6) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::delete_from_gwirdsif_db':"
                    << endl
                    << "`Irods_Object_Type::add_handle_value' succeeded (multiple times)."
                    << endl 
                    << "Added " << handle_value_ctr << " handle value(s) to handle."
                    << endl 
                    << "(0 is a permissible value.)"
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
        
@q ****** (6) @>

   }  /* |for|  */


@q ***** (5) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>=

END_DELETE_FROM_GWIRDSIF_DB:

    if (result)
    {
        mysql_free_result(result); 
        result = 0;
    }


#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "Exiting `Irods_Object_Type::delete_from_gwirdsif_db' "
             << "successfully with return value 0."
             << endl; 
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */     

    return 0;

}  /* End of |Irods_Object_Type::delete_from_gwirdsif_db| definition  */

@q *** (3) Add handle value.  @>
@ Add handle value.
\initials{LDF 2013.08.15.}

\begingroup
\obeylines
\parindent=0pt
\setbox0=\hbox{$-1$:}
Return values:
\leavevmode\hbox to \wd0{\hfil $0$:}\ No handle value with type |old_type_str|.
\leavevmode\hbox to \wd0{\hfil $1$:}\ Handle value with type |old_type_str| exists, %
   added one with type |new_type_str|.
\leavevmode\hbox{$-1$:}\ |Handle_Type::add_value| failed.
\par
\endgroup

\LOG
\initials{LDF 2013.08.15.}
Added this function.  It's called in and |Irods_Object_Type::delete_from_archive|
and |Irods_Object_Type::delete_from_gwirdsif_db|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
add_handle_value(Handle_Type &handle,
                 MYSQL *&mysql_ptr,
                 string old_type_str,
                 string path, 
                 unsigned int index,
                 string new_type_str,
                 string data_str,
                 string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::add_handle_value| definition@>=

int
Irods_Object_Type::add_handle_value(Handle_Type &handle,
                                    MYSQL *&mysql_ptr,
                                    string old_type_str,
                                    string path, 
                                    unsigned int index,
                                    string new_type_str,
                                    string data_str,
                                    string thread_str)
{
@q ***** (5) @>

    bool DEBUG = false;  /* |true|  */
    set_debug_level(DEBUG, 0, 0); 


@q ***** (5) @>
@
@<|Irods_Object_Type::add_handle_value| definition@>=

#if DEBUG_COMPILE
    if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "Entering `Irods_Object_Type::add_handle_value'."
             << endl;
        unlock_cerr_mutex(); 

    }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    


@q ***** (5) @>

    int status;

    map<unsigned long int, Handle_Value_Type>::iterator hv_iter; 

    hv_iter = handle.find(old_type_str);

@q ***** (5) @>

     if (hv_iter != handle.handle_value_map.end())
     {
@q ****** (6) @>

#if DEBUG_COMPILE
        if (DEBUG)   
        {
            lock_cerr_mutex(); 
            cerr << thread_str << "In `Irods_Object_Type::add_handle_value':"
                 << endl 
                 << "Handle value with type == `" << old_type_str << "' present."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::add_handle_value| definition@>=

        if (strncmp(hv_iter->second.data, path.c_str(), hv_iter->second.data_length) != 0)
        {
#if DEBUG_COMPILE
            if (DEBUG)   
            {
                lock_cerr_mutex(); 
                cerr << thread_str << "In `Irods_Object_Type::add_handle_value':"
                     << endl 
                     << "`hv_iter->second.data' == ";

                fwrite(hv_iter->second.data, 1, hv_iter->second.data_length, stderr);

                 cerr << endl
                      << "`path' ==                 " << path
                      << endl
                      << "`hv_iter->second.data' != `path'.  Not adding handle."
                      << endl
                      << "Exiting function successfully with return value 0."
                      << endl;
                unlock_cerr_mutex(); 

            }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

            return 0;

        }  /* |if|  */
 
@q ***** (5) @>
@
@<|Irods_Object_Type::add_handle_value| definition@>=

#if DEBUG_COMPILE
        else if (DEBUG)
        {
            lock_cerr_mutex();
            cerr << thread_str << "In `Irods_Object_Type::add_handle_value':"
                 << endl 
                 << "`hv_iter->second.data' == ";

            fwrite(hv_iter->second.data, 1, hv_iter->second.data_length, stderr);

            cerr << endl
                 << "`path' == " << path
                 << endl
                 << "`hv_iter->second.data' == `path'.  Continuing."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::add_handle_value| definition@>=

        if (data_str.empty())
        {
            data_str = path;
        }

        status = handle.add_value(
                          mysql_ptr, 
                          index,
                          new_type_str,
                          data_str,
                          hv_iter->second.created_by_user_id);

@q ****** (6) @>

        if (status != 0)
        {
            lock_cerr_mutex(); 
            cerr << "ERROR!  In `Irods_Object_Type::add_handle_value':"
                 << endl
                 << "`Handle_Type::add_value' failed, "
                 << "returning " << status << "."
                 << endl 
                 << "Exiting function unsuccessfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

            return -1;                      

        }

@q ****** (6) @>

#if DEBUG_COMPILE
        else if (DEBUG)
        {
            lock_cerr_mutex(); 
            cerr << "In `Irods_Object_Type::add_handle_value':"
                 << endl
                 << "`Handle_Type::add_value' succeeded, returning 0."
                 << endl
                 << "Exiting function successfully with return value 1."
                 << endl;
            unlock_cerr_mutex(); 

        }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        return 1;

@q ****** (6) @>

     }  /* |if (hv_iter != handle.handle_value_map.end())|  */

@q ***** (5) @>

#if DEBUG_COMPILE
     else if (DEBUG)
     {
         lock_cerr_mutex(); 
         cerr << "Handle value with type == `IRODS_OBJECT' not present."
              << endl
              << endl
              << "Exiting function successfully with return value 0."
              << endl;
         unlock_cerr_mutex(); 

     }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

     return 0; 

@q ***** (5) @>

}  /* End of |Irods_Object_Type::add_handle_value| definition  */


@q *** (3) Find AVU.  (|find_avu|).  @>

@ Find AVU.  (|find_avu|).  
\initials{LDF 2013.08.16.}

\LOG
\initials{LDF 2013.08.16.}
Added this function.

\initials{LDF 2014.01.15.}
Added optional argument |bool match_attrib_only = false|.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=

const vector<Irods_AVU_Type>::iterator
find_avu(string attrib, 
         string val, 
         bool match_attrib_only = false, 
         string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::find_avu| definition@>=

const vector<Irods_AVU_Type>::iterator
Irods_Object_Type::find_avu(string attrib, 
                            string val, 
                            bool match_attrib_only, 
                            string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::find_avu'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   if (avu_vector.size() == 0)
   {
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::find_avu':"
                << endl
                << "`avu_vector.size()' == 0"
                << endl 
                << "Exiting function successfully with return value "
                << "`avu_vector.end()'."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

      return avu_vector.end();

   }  /* |if (avu_vector.size() == 0)|  */

@q ***** (5) @>
   
   vector<Irods_AVU_Type>::iterator iter;

   for (iter = avu_vector.begin();
        iter != avu_vector.end();
        ++iter)
   {
       if (iter->attribute == attrib) 
       {
           if (match_attrib_only == false && iter->value != val)
              continue;

#if DEBUG_COMPILE
           if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::find_avu':"
                    << endl
                    << "AVU with `attribute' == " << attrib << " and "
                    << "`value' == " << val << " found:"
                    << endl;

               iter->show();

               cerr << "Exiting function successfully with return value "
                    << "`iter'."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

           return iter;

       }  /* |if| (found matching AVU) */

   }  /* |for|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::find_avu':"
            << endl
            << "AVU with `attribute' == " << attrib << " ";

       if (match_attrib_only == false)
          cerr << "and "
               << "`value' == " << val << " ";

       cerr << "not found."
            << endl 
            << "Exiting function successfully with return value "
            << "`avu_vector.end()'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return avu_vector.end();

}  /* End of |Irods_Object_Type::find_avu| definition  */

@q *** (3) Undelete iRODS objects (|undelete_irods_objects|).  @>
@ Undelete iRODS objects (|undelete_irods_objects|).
\initials{LDF 2013.08.16.}

\LOG
\initials{LDF 2013.08.16.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
static
int 
undelete_irods_objects(vector<Irods_Object_Type> &irods_object_vector, 
                       MYSQL *&mysql_ptr, 
                       bool archive,
                       bool database,
                       vector<Response_Type> &response_vector,
                       string irods_env_filename,
                       string thread_str = "");


@q **** (4) Definition  @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=
int 
Irods_Object_Type::undelete_irods_objects(vector<Irods_Object_Type> &irods_object_vector, 
                                          MYSQL *&mysql_ptr, 
                                          bool archive,
                                          bool database,
                                          vector<Response_Type> &response_vector,
                                          string irods_env_filename,
                                          string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status;

   Response_Type response;

   stringstream temp_strm;

   unsigned long temp_val;

   int temp_val_1;

   MYSQL_RES *result_array[4] = {0, 0, 0, 0};

   MYSQL_ROW curr_row;

   vector<unsigned int *> row_ctr_vector;
   vector<unsigned int *> field_ctr_vector;
   vector<long int *> affected_rows_vector;

   stringstream sql_strm[4];

   vector<string> query_vector;

   string comma_str[2];

   std::set<unsigned long int> handle_id_set;
   vector<string> handle_value_type_vector;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::undelete_irods_objects'."
            << endl
            << "archive == " << archive << endl
            << "database == " << database << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.08.19.}
Added this section.
\ENDLOG
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (!(archive || database))
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "WARNING!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`archive' and `database' are both `false'."
            << endl
            << "Not deleting `Irods_Object_Type' objects."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (!(archive || database))|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (irods_object_vector.size() == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`irods_object_vector.size()' == 0"
            << endl
            << "No `Irods_Object_Type' objects to undelete."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (irods_object_vector.size() == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`irods_object_vector.size()' == " << irods_object_vector.size()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=


   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
        iter != irods_object_vector.end();
        ++iter)
   {
@q ****** (6) @>

#if 0 
#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           iter->show("*iter:");
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
#endif 

@q ****** (6) @>

        if (archive && iter->deleted_from_archive)
        {
 
            response.clear();
            response.type = Response_Type::COMMAND_ONLY_TYPE;

            temp_strm.str("");

            temp_strm << "UNDELETE RESPONSE 1 \"" << iter->path << "\" "
                      << "\"iRODS object already deleted from archive\"";

            response.command = temp_strm.str();

            temp_strm.str("");

            response_vector.push_back(response);

        }

@q ****** (6) @>

        else if (archive && iter->marked_for_deletion_from_archive)
        {
            sql_strm[0] << comma_str[0] << iter->id;
            comma_str[0] = ", "; 

        }

@q ****** (6) @>

        if (database && iter->deleted_from_gwirdsif_db)
        {
 
            response.clear();
            response.type = Response_Type::COMMAND_ONLY_TYPE;

            temp_strm.str("");

            temp_strm << "UNDELETE RESPONSE 1 \"" << iter->path << "\" "
                      << "\"iRODS object already deleted from `gwirdsif' database\"";

            response.command = temp_strm.str();

            temp_strm.str("");

            response_vector.push_back(response);

        }

@q ****** (6) @>

        else if (database && iter->marked_for_deletion_from_gwirdsif_db)
        {
            sql_strm[1] << comma_str[1] << iter->id;
            comma_str[1] = ", "; 

        }

@q ****** (6) @>

   }  /* |for|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=


#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`sql_strm[0].str()' == " << sql_strm[0].str()
            << endl
            << "`sql_strm[1].str()' == " << sql_strm[1].str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (!sql_strm[0].str().empty())
   {

       sql_strm[2] << sql_strm[0].str();

       temp_strm.str("");

       temp_strm << "update gwirdsif.Irods_Objects set marked_for_deletion_from_archive = 0, "
                 << "delete_from_archive_timestamp = 0, last_modified = now() "
                 << "where irods_object_id in (" << sql_strm[0].str() << ")";

       sql_strm[0].str("");

       sql_strm[0] << temp_strm.str();

       temp_strm.str("");

       temp_strm << "select handle_id from gwirdsif.Irods_Objects_Handles "
                 << "where irods_object_id in (" << sql_strm[2].str() << ")";

       sql_strm[2].str("");

       sql_strm[2] << temp_strm.str();

       temp_strm.str("");


   }

   if (!sql_strm[1].str().empty())
   {

       sql_strm[3] << sql_strm[1].str();

       temp_strm.str("");

       temp_strm << "update gwirdsif.Irods_Objects set marked_for_deletion_from_gwirdsif_db = 0, "
                 << "delete_from_gwirdsif_db_timestamp = 0, last_modified = now() "
                 << "where irods_object_id in (" << sql_strm[1].str() << ")";

       sql_strm[1].str("");

       sql_strm[1] << temp_strm.str();

       temp_strm.str("");

       temp_strm << "select handle_id from gwirdsif.Irods_Objects_Handles "
                 << "where irods_object_id in (" << sql_strm[3].str() << ")";

       sql_strm[3].str("");

       sql_strm[3] << temp_strm.str();

       temp_strm.str("");

   }

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl;

       for (int i = 0; i < 4; ++i)
          cerr << "`sql_strm[" << i << "].str()' == " << sql_strm[i].str()
            << endl;


       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.09.03.}
@:BUG FIX@> 
@:memory leaks (fixed)@>
BUG FIX:  Added section |@<Delete pointers and clear vectors@>|.  
Now inserting it to |delete| the heap objects created by the calls to |new| below.
This fixes a memory leak.
\ENDLOG 

@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   temp_strm.str("");

   query_vector.clear();
   
   query_vector.push_back(sql_strm[0].str());
   query_vector.push_back(sql_strm[1].str());
   query_vector.push_back(sql_strm[2].str());
   query_vector.push_back(sql_strm[3].str());

   affected_rows_vector.push_back(new long int(0UL));
   affected_rows_vector.push_back(new long int(0UL));
   affected_rows_vector.push_back(0);
   affected_rows_vector.push_back(0);

   row_ctr_vector.push_back(0);
   row_ctr_vector.push_back(0);
   row_ctr_vector.push_back(new unsigned int(0U));
   row_ctr_vector.push_back(new unsigned int(0U));

   field_ctr_vector.push_back(0);
   field_ctr_vector.push_back(0);
   field_ctr_vector.push_back(new unsigned int(0U));
   field_ctr_vector.push_back(new unsigned int(0U));

   status = submit_mysql_queries(query_vector, 
                                 result_array, 
                                 mysql_ptr, 
                                 row_ctr_vector, 
                                 field_ctr_vector, 
                                 affected_rows_vector, 
                                 false, 
                                 thread_str);

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

    if (status != 0)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`submit_mysql_queries' failed, returning " << status << "."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 


       for (int i = 0; i < 4; ++i)
       {
           if (result_array[i])
              mysql_free_result(result_array[i]); 
       }

       @<Delete pointers and clear vectors@>@;@/

       return 1;

    }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`submit_mysql_queries' succeeded, returning 0."
            << endl;

       for (int i = 0; i < 4; ++i)
       {
           if (affected_rows_vector[i] != 0)
              cerr << "*affected_rows_vector[" << i << "] == " << *affected_rows_vector[i]         
                   << endl;
           else 
              cerr << "affected_rows_vector[" << i << "] == 0"
                   << endl;

           if (row_ctr_vector[i] != 0)
              cerr << "*row_ctr_vector[" << i << "] == " << *row_ctr_vector[i]         
                   << endl;
           else 
              cerr << "row_ctr_vector[" << i << "] == 0"
                   << endl;

           if (field_ctr_vector[i] != 0)
              cerr << "*field_ctr_vector[" << i << "] == " << *field_ctr_vector[i]         
                   << endl;
           else 
              cerr << "field_ctr_vector[" << i << "] == 0"
                   << endl;

       }  /* |for|  */

       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (result_array[0])
   {
      mysql_free_result(result_array[0]);   
      result_array[0] = 0;
   }

   if (result_array[1])
   {
      mysql_free_result(result_array[1]);   
      result_array[1] = 0;
   }

   for (int i = 0; i < 4; ++i)
   {
       sql_strm[i].str("");
   }

   query_vector.clear();

@q ***** (5) Update handles (undelete from archive).  @>

@ Update handles (undelete from archive).  
\initials{LDF 2013.08.19.}

@<|Irods_Object_Type::undelete_irods_objects| definition@>=

    if (*row_ctr_vector[2] > 0)
    {
@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                << endl
                << "`*row_ctr_vector[2]' == " << *row_ctr_vector[2] << " (> 0)"
                << endl 
                << "Will update handles (undeleted from archive)."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

       for (int i = 0; i < *row_ctr_vector[2]; ++i)
       {
@q ******* (7) @>

           curr_row = mysql_fetch_row(result_array[2]);

           if (curr_row == 0)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`mysql_fetch_row' failed, returning 0."
                    << endl 
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               mysql_free_result(result_array[2]);   

               if (result_array[3])
                  mysql_free_result(result_array[3]);   

               @<Delete pointers and clear vectors@>@;@/

               return 1;

           }  /* |if|  */

@q ******* (7) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`mysql_fetch_row' succeeded."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ******* (7) @>

           temp_val = strtoul(curr_row[0], 0, 10);

           if (temp_val == ULONG_MAX)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`strtoul' failed, returning 0."
                    << endl 
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               mysql_free_result(result_array[2]);   

               if (result_array[3])
                  mysql_free_result(result_array[3]);   

               @<Delete pointers and clear vectors@>@;@/

               return 1;            

           }  /* |if (temp_val == ULONG_MAX)|  */

@q ******* (7) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`strtoul' succeeded."
                    << endl 
                    << "`temp_val' == " << temp_val
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

           handle_id_set.insert(temp_val);

@q ******* (7) @>

       }  /* |for|  */

@q ****** (6) @>

    }  /* |if (*row_ctr_vector[2] > 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
             << endl
             << "`*row_ctr_vector[2]' == 0" 
             << endl 
             << "Will not update handles (undeleted from archive)."
             << endl;

        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (result_array[2])
   {
       mysql_free_result(result_array[2]); 
       result_array[2] = 0;
   } 

@q ***** (5) Update handles (undelete from gwirdsif database).  @>

@ Update handles (undelete from \.{gwirdsif} database).
\initials{LDF 2013.08.19.}

@<|Irods_Object_Type::undelete_irods_objects| definition@>=

    if (*row_ctr_vector[3] > 0)
    {
@q ****** (6) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                << endl
                << "`*row_ctr_vector[3]' == " << *row_ctr_vector[3] << " (> 0)"
                << endl 
                << "Will update handles (undeleted from `gwirdsif' database)."
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

       for (int i = 0; i < *row_ctr_vector[3]; ++i)
       {
@q ******* (7) @>

           curr_row = mysql_fetch_row(result_array[3]);

           if (curr_row == 0)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`mysql_fetch_row' failed, returning 0."
                    << endl 
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               mysql_free_result(result_array[3]);   

               if (result_array[3])
                  mysql_free_result(result_array[3]);   

               @<Delete pointers and clear vectors@>@;@/

               return 1;

           }  /* |if|  */

@q ******* (7) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`mysql_fetch_row' succeeded."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ******* (7) @>

           temp_val = strtoul(curr_row[0], 0, 10);

           if (temp_val == ULONG_MAX)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`strtoul' failed, returning 0."
                    << endl 
                    << "Exiting function unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               mysql_free_result(result_array[3]);   

               if (result_array[3])
                  mysql_free_result(result_array[3]);   

               @<Delete pointers and clear vectors@>@;@/

               return 1;            

           }  /* |if (temp_val == ULONG_MAX)|  */

@q ******* (7) @>

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
                    << endl
                    << "`strtoul' succeeded."
                    << endl 
                    << "`temp_val' == " << temp_val
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>

           handle_id_set.insert(temp_val);

       }  /* |for|  */

@q ****** (6) @>

    }  /* |if (*row_ctr_vector[3] > 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
             << endl
             << "`*row_ctr_vector[3]' == 0" 
             << endl 
             << "Will not update handles (undeleted from `gwirdsif' database)."
             << endl;

        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    if (result_array[3])
    {
        mysql_free_result(result_array[3]); 
        result_array[3] = 0;
    }

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (archive)
   {
      handle_value_type_vector.push_back("IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE");
      handle_value_type_vector.push_back(
         "DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_ARCHIVE");
   }


   if (database)
   {
      handle_value_type_vector.push_back("IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB");
      handle_value_type_vector.push_back(
         "DC_METADATA_IRODS_OBJECT_MARKED_FOR_DELETION_FROM_GWIRDSIF_DB");
   }

   status = Handle_Type::delete_handle_values(handle_id_set, 
                                              handle_value_type_vector, 
                                              mysql_ptr, 
                                              thread_str);

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`Handle_Type::delete_handle_values' failed, returning " << status << "."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       @<Delete pointers and clear vectors@>@;@/

       return 1;            

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`Handle_Type::delete_handle_values' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 

       for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
            iter != irods_object_vector.end();
            ++iter)
       {
           cerr << "iter->avu_vector.size() == " << iter->avu_vector.size() << endl;

           if (iter->avu_vector.size() > 0)
               cerr << "`iter->avu_vector':"
                    << endl;

           for (vector<Irods_AVU_Type>::iterator iter_1 = iter->avu_vector.begin();
                iter_1 != iter->avu_vector.end();
                ++iter_1)
           {
               iter_1->show();                        

           }  /* Inner |for|  */

           if (iter->avu_vector.size() > 0)
               cerr << endl;

       }  /* Outer |for|  */

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   temp_strm.str("");

   temp_strm << "export irodsEnvFile=" << irods_env_filename << "; a=`echo -e \"";

   for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
        iter != irods_object_vector.end();
        ++iter)
   {

        if (archive)
           temp_strm << "rmw -d " << iter->path << " MARKED_FOR_DELETION_FROM_ARCHIVE "
                     << "%\\n";

        if (database)
           temp_strm << "rmw -d " << iter->path << " "
                     << "MARKED_FOR_DELETION_FROM_GWIRDSIF_DATABASE "
                     << "%\\n";


   }  /* |for|  */

   temp_strm << "\" | imeta 2>&1`; echo $?; echo $a";
 
#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`temp_strm.str()' == " << temp_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   FILE *fp = popen(temp_strm.str().c_str(), "r");

   if (fp == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`popen' failed, returning 0."
            << endl
            << "Call to `imeta' in shell failed."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       @<Delete pointers and clear vectors@>@;@/

       return 1;

   }  /* |if (fp == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`popen' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   char buffer[1024];
   memset(buffer, 0, 1024);

   status = fread(buffer, 1, 1024, fp);

   if (status == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`fread' failed, returning 0."
            << endl
            << "Can't read output of call to `imeta' in shell."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       pclose(fp);

       @<Delete pointers and clear vectors@>@;@/

       return 1;

   }  /* |if (status == 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (status == 1024)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`fread' returned 1024:  Output of `imeta' in shell exceeds maximum length == 1023."
            << endl 
            << "This is not permitted."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       pclose(fp);

       @<Delete pointers and clear vectors@>@;@/

       return 1;

   }  /* |if (status == 1024)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`fread' succeeded, returning " << status << "."
            << endl
            << "`buffer' == " << buffer
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   pclose(fp);
   fp = 0;

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

  errno = 0;
  status = sscanf(buffer, "%d", &temp_val_1);

  if (status != 1)
  {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`sscanf' failed, returning " << status << "."
            << endl;

       if (status == EOF)
          cerr << "`status' == `EOF':"
               << endl
               << strerror(errno)
               << endl;

       cerr << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 


       @<Delete pointers and clear vectors@>@;@/

       return 1;

  }  /* |if (status != 1)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`sscanf' succeeded, returning 1."
            << endl
            << "`temp_val_1' == " << temp_val_1
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   if (temp_val_1 != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`temp_val_1' == " << temp_val_1 << " (!= 0)"
            << endl
            << "`imeta' command in shell failed:"
            << endl
            << "Output (preceded by return value of `imeta' command):"
            << endl
            << buffer
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       @<Delete pointers and clear vectors@>@;@/

       return 1;


   }  /* |if (temp_val_1 != 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::undelete_irods_objects':"
            << endl
            << "`temp_val_1' == 0"
            << endl
            << "`imeta' command in shell succeeded, returning 0."
            << endl
            << "Deleted AVU(s) successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::undelete_irods_objects' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::undelete_irods_objects| definition@>=

   @<Delete pointers and clear vectors@>@;@/

   return 0;

}  /* End of |Irods_Object_Type::undelete_irods_objects| definition  */

@q **** (4) Delete pointers and clear vectors.  @>

@ Delete pointers and clear vectors.
\initials{LDF 2013.09.03.}

\LOG
\initials{LDF 2013.09.03.}
Added this section.
\ENDLOG

@<Delete pointers and clear vectors@>=

   for (vector<unsigned int *>::iterator iter = row_ctr_vector.begin();
        iter != row_ctr_vector.end();
        ++iter)
   {
        delete *iter;
        *iter = 0;
   }
   row_ctr_vector.clear();

   for (vector<unsigned int *>::iterator iter = field_ctr_vector.begin();
        iter != field_ctr_vector.end();
        ++iter)
   {
        delete *iter;
        *iter = 0;
   }
   field_ctr_vector.clear();

   for (vector<long int *>::iterator iter = affected_rows_vector.begin();
        iter != affected_rows_vector.end();
        ++iter)
   {
        delete *iter;
        *iter = 0;
   }
   affected_rows_vector.clear();


@q *** (3) Rename iRODS object (|rename_irods_object|).  @>
@ Rename iRODS object (|rename_irods_object|).
\initials{LDF 2014.01.03.}

\LOG
\initials{LDF 2014.01.03.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
rename_irods_object(MYSQL *mysql_ptr, 
                    string irods_env_filename,
                    Response_Type &response, 
                    vector<Response_Type> &new_response_vector, 
                    string new_filename, 
                    string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=
int
Irods_Object_Type::rename_irods_object(MYSQL *mysql_ptr, 
                                       string irods_env_filename,
                                       Response_Type &response,
                                       vector<Response_Type> &new_response_vector,  
                                       string new_filename, 
                                       string thread_str) 
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   string handles_database = (standalone_handle) ? "handlesystem_standalone" : 
                                                   "handlesystem";

   MYSQL_RES *result = 0;
   MYSQL_ROW curr_row;
   unsigned int row_ctr;
   unsigned int field_ctr;
   long int affected_rows;

   stringstream sql_strm;
   stringstream temp_strm;

   int status  = 0;

   int ret_val = 0;

   int imv_ret_val = -1;

   Response_Type new_response;

   char buffer[BUFFER_SIZE];

   memset(buffer, 0, BUFFER_SIZE);

   new_response.type = Response_Type::COMMAND_ONLY_TYPE;

   string old_filename = path;

   unsigned long int temp_val = 0UL;

   Irods_Object_Type temp_irods_object;
   vector<Irods_Object_Type> irods_object_vector;

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::rename_irods_object'."
            << endl
            << "`old_filename'         == " << old_filename
            << endl 
            << "`new_filename' == " << new_filename
            << endl;

       response.show("response:");

       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   errno = 0;
   temp_strm.str("");

   temp_strm << "a=`env irodsEnvFile=" << irods_env_filename << " "
             << "imv ";

   if (!response.flags.empty())
      temp_strm << response.flags << " ";

   temp_strm << old_filename << " " << new_filename << " 2>&1`; echo $?; echo $a";
 
#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`temp_strm.str()' == " << temp_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

    FILE *fp = popen(temp_strm.str().c_str(), "r");

    temp_strm.str("");

    if (fp == 0)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`popen' failed, returning NULL.  Failed to execute `imv' command in shell."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"`imv' command failed\"";

       new_response.command = temp_strm.str();
  
       new_response_vector.push_back(new_response);
   
       return 1;

    }  /* |if (fp == 0)|  */

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`popen' succeeded."
            << endl;
       unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=
   
    status = fread(buffer, 1, BUFFER_SIZE - 1, fp);

    if (fp == 0)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`fread' failed, returning 0.  Failed to read output and "
            << "return value of `imv' command, executed in shell."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       fclose(fp);

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to read output and return value of `imv' command\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);
   
       return 1;

    }  /* |if (fp == 0)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

    else if (status == BUFFER_SIZE - 1)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`fread' returned `BUFFER_SIZE' - 1 == " << (BUFFER_SIZE - 1) << "."
            << endl     
            << "Output and return value of `imv' command, executed in shell exceeds "
            << "maximum length."
            << endl
            << "`buffer' =="
            << endl
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       fclose(fp);

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Output and return value of `imv' command exceeded maximum length\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);
   
       return 1;

    }  /* |else if (status == BUFFER_SIZE - 1)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE 
    else if (DEBUG)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`fread' succeeded, returning `status' == " << status << "."
            << endl
            << "`buffer' =="
            << endl 
            << buffer
            << endl;
       unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

    fclose(fp);
    fp = 0;

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

    errno = 0;

    status = sscanf(buffer, "%d", &imv_ret_val);

    if (status != 1)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`sscanf' failed, returning " << status << ":"
            << endl 
            << strerror(errno)
            << endl 
            << "Failed to read return value of `imv' command, executed in shell."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to read return value of `imv' command\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);
   
       return 1;

    }  /* |if (status != 1)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
             << endl 
             << "`sscanf' succeeded, returning 1:"
             << endl 
             << "`imv_ret_val' == " << imv_ret_val
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

    if (imv_ret_val != 0)
    {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl 
            << "`imv' command, executed in shell, failed, returning " << imv_ret_val << ":"
            << endl 
            << "Return value and output (`buffer') == " 
            << endl 
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"'imv' command failed, returning " << imv_ret_val << "\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);
   
       return 1;

    }  /* |if (imv_ret_val != 0)|  */

@q ****** (6) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
    else if (DEBUG)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
             << endl 
             << "`imv' command, executed in shell, succeeded, returning 0:"
             << endl
             << "Return value and output (`buffer') == " 
             << endl 
             << buffer 
             << endl;
        unlock_cerr_mutex(); 

    }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

    if (id == 0)
    {
        lock_cerr_mutex(); 
        cerr << thread_str << "WARNING!  In `Irods_Object_Type::rename_irods_object':"
             << endl 
             << "`id' == 0:  No entry in `gwirdsif.Irods_Objects' database table"
             << endl
             << "for iRODS object with path `" << old_filename << "'."
             << endl 
             << "This shouldn't happen, but it is possible."
             << endl
             << "Exiting function successfully with return value 2."
             << endl;
        unlock_cerr_mutex(); 

        return 2;

    }  /* |if (id == 0)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   pthread_mutex_lock(&sql_lock_tables_mutex);

   sql_strm << "lock tables gwirdsif.Irods_Objects write, "
            << "gwirdsif.Irods_Objects as IO write, "
            << handles_database << ".handles write, "
            << handles_database << ".handles as h write, "
            << "gwirdsif.Irods_Objects_Handles as ioh write, "
            << "gwirdsif.Dublin_Core_Metadata write, "
            << "gwirdsif.Irods_AVUs write, "
            << "gwirdsif.Irods_Objects_Handles read";

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to lock database tables."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to lock database tables.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       pthread_mutex_unlock(&sql_lock_tables_mutex);
        
       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Locked database tables successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
  
   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");
  
@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update gwirdsif.Irods_Objects "
            << "set irods_object_path = '" << new_filename << "', last_modified = now() "
            << "where irods_object_id = " << id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `gwirdsif.Irods_Objects' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `gwirdsif.Irods_Objects' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `gwirdsif.Irods_Objects' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update gwirdsif.Dublin_Core_Metadata "
            << "set irods_object_path = '" << new_filename << "', last_modified = now() "
            << "where irods_object_ref_id = " << id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `gwirdsif.Dublin_Core_Metadata' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `gwirdsif.Dublin_Core_Metadata' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `gwirdsif.Dublin_Core_Metadata' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update " << handles_database << ".handles "
            << "set data = '" << new_filename << "', last_modified = now() "
            << "where handle_id in "
            << "(select handle_id from gwirdsif.Irods_Objects_Handles "
            << "where irods_object_id = " << id << ") "
            << "and type = 'IRODS_OBJECT'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `" << handles_database << ".handles' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << old_filename << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `" << handles_database << ".handles' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `" << handles_database << ".handles' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update " << handles_database << ".handles "
            << "set data = '" << new_filename << "', last_modified = now() "
            << "where type = 'IRODS_OBJECT_REF' and data = '" << old_filename << "' "
            << "and created_by_user_id = " << user_id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `" << handles_database << ".handles' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << path << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `" << handles_database << ".handles' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `" << handles_database << ".handles' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update " << handles_database << ".handles "
            << "set data = 'Qualified Dublin Core XML Metadata for iRODS object "
            << new_filename << ".', last_modified = now() "
            << "where handle_id in "
            << "(select handle_id from gwirdsif.Dublin_Core_Metadata "
            << "where irods_object_ref_id = " << id << ") "
            << "and type = 'DC_METADATA' "
            << "and created_by_user_id = " << user_id;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `" << handles_database << ".handles' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << path << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `" << handles_database << ".handles' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `" << handles_database << ".handles' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "update gwirdsif.Irods_AVUs set value = '" << new_filename << "', "
            << "time_set = now() "
            << "where irods_object_id in "
            << "(select irods_object_id from Irods_Objects "
            << "where irods_object_ref_id = " << id << ") "
            << "and attribute = 'IRODS_OBJECT_REF' "
            << "and value = '" << old_filename << "'";

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, 0, 0, &affected_rows);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to update `gwirdsif.Irods_AVUs' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << path << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to update `gwirdsif.Irods_AVUs' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ***** (5) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Updated `gwirdsif.Irods_AVUs' database table successfully."
            << endl
            << "`affected_rows' == " << affected_rows
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");


@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   sql_strm << "select irods_object_id, irods_object_path from gwirdsif.Irods_Objects "
            << "where irods_object_id in (select irods_object_id from gwirdsif.Irods_Objects "
            << "as IO "
            << "where irods_object_ref_id = " << id << ")";

@q ****** (6) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`sql_strm.str()' == " << sql_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr, &row_ctr, &field_ctr);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to query `gwirdsif.Irods_Objects' database table."
            << endl
            << "Will try to unlock database tables and then exit function "
            << "unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       temp_strm.str("");

       temp_strm << "MV RESPONSE " << GW_ERROR << " " << response.options << "U "
                 << "\"" << path << "\" \"" << new_filename << "\" "
                 << "\"" << response.flags << "\" "
                 << "\"Failed to query `gwirdsif.Irods_Objects' database table.\"";

       new_response.command = temp_strm.str();

       new_response_vector.push_back(new_response);

       ret_val = 1;

       goto UNLOCK_TABLES;

   }  /* |if (status != 0)|  */

@q ****** (6) @>

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Queried `gwirdsif.Irods_Objects' database table successfully."
            << endl
            << "`row_ctr' == " << row_ctr
            << endl 
            << "`field_ctr' == " << field_ctr
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ****** (6) @>

   if (row_ctr == 0)
   {
@q ******* (7) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
                << endl
                << "`row_ctr' == 0:  No entries in `gwirdsif.Irods_Objects' "
                << "with `irods_object_ref_id' == " << id << "."
                << endl
                << "No iRODS objects to update.  Continuing."
                << endl; 
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>

   }  /* |if (row_ctr == 0)|  */

@q ****** (6) @>

   else /* |row_ctr > 0|  */ 
   {
@q ******* (7) @>

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
                << endl
                << "`row_ctr' == " << row_ctr
                << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

       for (int i = 0; i < row_ctr; ++i)
       {
@q ******** (8) @>

           curr_row = mysql_fetch_row(result);

           if (curr_row == 0)
           {
              lock_cerr_mutex(); 
              cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
                   << endl
                   << "`mysql_fetch_row' failed, returning 0:"
                   << endl 
                   << "Error:  " << mysql_error(mysql_ptr)
                   << endl 
                   << "Will try to unlock database tables and then exit function "
                   << "unsuccessfully with return value 1."
                   << endl;
              unlock_cerr_mutex(); 

              temp_strm.str("");

              temp_strm << "MV RESPONSE " << GW_SERVER_SIDE_DATABASE_ERROR << " " 
                        << response.options << "U "
                        << "\"" << path << "\" \"" << new_filename << "\" "
                        << "\"" << response.flags << "\" "
                        << "\"Failed to retrieve data from `gwirdsif.Irods_Objects' "
                        << "database table.\"";

              new_response.command = temp_strm.str();

              new_response_vector.push_back(new_response);

              ret_val = 1;

              goto UNLOCK_TABLES;

           }  /* |if (curr_row == 0)|  */

@q ******** (8) @>
 
           else
           {
@q ********* (9) @>

              if (curr_row[0] == 0 || curr_row[1] == 0 || strlen(curr_row[1]) == 0)
              {
                  lock_cerr_mutex(); 
                  cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
                       << endl
                       << "`strtoul' failed, returning `ULONG_MAX':"
                       << endl 
                       << strerror(errno)
                       << endl 
                       << "Will try to unlock database tables and then exit function "
                       << "unsuccessfully with return value 1."
                       << endl;
                  unlock_cerr_mutex(); 

                  temp_strm.str("");

                  temp_strm << "MV RESPONSE " << GW_SERVER_SIDE_DATABASE_ERROR << " " 
                            << response.options << "U "
                            << "\"" << path << "\" \"" << new_filename << "\" "
                            << "\"" << response.flags << "\" "
                            << "\"Failed to retrieve data from "
                            << "`gwirdsif.Irods_Objects' database table.\"";

                  new_response.command = temp_strm.str();

                  new_response_vector.push_back(new_response);

                  ret_val = 1;

                  goto UNLOCK_TABLES;

              }  /* |if|  */


@q ********* (9) @>

              errno = 0;
              temp_val = strtoul(curr_row[0], 0, 10);

              if (temp_val == ULONG_MAX)
              {
@q ********** (10) @>

                  lock_cerr_mutex(); 
                  cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
                       << endl
                       << "`strtoul' failed, returning `ULONG_MAX':"
                       << endl 
                       << strerror(errno)
                       << endl 
                       << "Will try to unlock database tables and then exit function "
                       << "unsuccessfully with return value 1."
                       << endl;
                  unlock_cerr_mutex(); 

                  temp_strm.str("");

                  temp_strm << "MV RESPONSE " << GW_SERVER_SIDE_DATABASE_ERROR << " " 
                            << response.options << "U "
                            << "\"" << path << "\" \"" << new_filename << "\" "
                            << "\"" << response.flags << "\" "
                            << "\"Failed to retrieve data from `gwirdsif.Irods_Objects' "
                            << "database table.\"";

                  new_response.command = temp_strm.str();

                  new_response_vector.push_back(new_response);

                  ret_val = 1;

                  goto UNLOCK_TABLES;

@q ********** (10) @>

              }  /* |if (temp_val == ULONG_MAX)|  */

@q ********* (9) @>

              temp_irods_object.clear();
              temp_irods_object.set(user_id, curr_row[1]);
              temp_irods_object.id = temp_val;

              irods_object_vector.push_back(temp_irods_object);

@q ********* (9) @>

           }  /* |else|  */

@q ******** (8) @>

       }  /* |for|  */

@q ******* (7) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
       if (DEBUG)
       {
           lock_cerr_mutex(); 
           cerr << "irods_object_vector.size() == " << irods_object_vector.size() << endl;
           unlock_cerr_mutex(); 

       }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******* (7) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

       for (vector<Irods_Object_Type>::iterator iter = irods_object_vector.begin();
            iter != irods_object_vector.end();
            ++iter)
       {
@q ******** (8) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

            status = iter->get_from_database(mysql_ptr);

            if (status <= 0)
            {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
                    << endl
                    << "`Irods_Object_Type::get_from_database' failed, returning " << status << ":"
                    << endl 
                    << "Failed to fetch `Irods_Object_Type' object from "
                    << "`gwirdsif.Irods_Objects' database table."
                    << endl 
                    << "Will try to unlock database tables and then exit function "
                    << "unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               temp_strm.str("");

               temp_strm << "MV RESPONSE " << GW_SERVER_SIDE_DATABASE_ERROR << " " 
                         << response.options << "U "
                         << "\"" << path << "\" \"" << new_filename << "\" "
                         << "\"" << response.flags << "\" "
                         << "\"Failed to fetch iRODS object(s) containing Dublin Core "
                         << "metadata from "
                         << "`gwirdsif.Irods_Objects' database tabe.\"";

               new_response.command = temp_strm.str();

               new_response_vector.push_back(new_response);

               ret_val = 1;

               goto UNLOCK_TABLES;

            }  /* |if| */

@q ******** (8) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
            else if (DEBUG)
            {
                lock_cerr_mutex(); 
                cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
                     << endl
                     << "`Irods_Object_Type::get_from_database' succeeded, returning " 
                     << status << ":"
                     << endl 
                     << "Fetched `Irods_Object_Type' object from "
                     << "`gwirdsif.Irods_Objects' database table successfully."
                     << endl;
                unlock_cerr_mutex(); 

            }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

           status = iter->modify_irods_avu(irods_env_filename,
                                           "IRODS_OBJECT_REF", 
                                           old_filename, 
                                           new_filename, 
                                           thread_str);

           if (status != 0)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
                    << endl
                    << "`Irods_Object_Type::modify_irods_avu' failed, returning " << status << ":"
                    << endl 
                    << "Failed to modify AVU."
                    << endl 
                    << "Will try to unlock database tables and then exit function "
                    << "unsuccessfully with return value 1."
                    << endl;
               unlock_cerr_mutex(); 

               temp_strm.str("");

               temp_strm << "MV RESPONSE " << GW_ERROR << " " 
                         << response.options << "U "
                         << "\"" << path << "\" \"" << new_filename << "\" "
                         << "\"" << response.flags << "\" "
                         << "\"Failed to modify AVU for iRODS object containing "
                         << "Dublin Core metadata.\"";

               new_response.command = temp_strm.str();

               new_response_vector.push_back(new_response);

               ret_val = 1;

               goto UNLOCK_TABLES;

           }  /* |if (status != 0)|  */

@q ******** (8) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
           else if (DEBUG)
           {
               lock_cerr_mutex(); 
               cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
                    << endl
                    << "`Irods_Object_Type::modify_irods_avu' succeeded, returning 0:"
                    << endl 
                    << "Modified AVU successfully."
                    << endl;
               unlock_cerr_mutex(); 

           }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ******** (8) @>

       }  /* |for|  */
       
@q ******* (7) @>

   } /* |else| (|row_ctr > 0|)  */ 

@q ***** (5) @>

   mysql_free_result(result); 
   result = 0;
   sql_strm.str("");

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

UNLOCK_TABLES:

   if (result)
   {
       mysql_free_result(result); 
       result = 0;
   }

   sql_strm.str("");

   sql_strm << "unlock tables";

   status = submit_mysql_query(sql_strm.str(), result, mysql_ptr);

   if (status != 0)
   {

       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' failed, returning " << status << ":"
            << endl 
            << "Failed to unlock database tables."
            << endl
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex(); 

       pthread_mutex_unlock(&sql_lock_tables_mutex);
        
       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::rename_irods_object':"
            << endl
            << "`submit_mysql_query' succeeded, returning 0:"
            << endl 
            << "Unlocked database tables successfully."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   pthread_mutex_unlock(&sql_lock_tables_mutex);

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

   if (ret_val != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::rename_irods_object' "
            << "with return value " << ret_val << "."
            << endl;
       unlock_cerr_mutex(); 

       return ret_val;

   }  /* |if (ret_val != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::rename_irods_object| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::rename_irods_object' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   path = new_filename;

   return 0;

}  /* End of |Irods_Object_Type::rename_irods_object| definition  */


@q *** (3) Modify iRODS AVU (|modify_irods_avu|).  @>
@ Modify iRODS AVU (|modify_irods_avu|).  
\initials{LDF 2014.01.05.}

As of this date, This function doesn't need to modify the entries in the 
\.{gwirdsif.Irods\_AVUs} database table.  |Irods_Object_Type::rename_irods_object| 
takes care of this already.  This function only needs to modify the AVUs of the actual
iRODS objects in the iRODS system.
\initials{LDF 2014.01.05.}

\LOG
\initials{LDF 2014.01.05.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=
int
modify_irods_avu(string irods_env_filename,
                 string attribute, 
                 string old_value, 
                 string new_value, 
                 string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=
int
Irods_Object_Type::modify_irods_avu(string irods_env_filename,
                                    string attribute, 
                                    string old_value, 
                                    string new_value, 
                                    string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   stringstream temp_strm;

   int status = 0;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::modify_irods_avu'."
            << endl;

       show("*this:");

       cerr << "`attribute' ==  " << attribute
            << endl 
            << "`old_value' ==  " << old_value
            << endl 
            << "`new_value' ==  " << new_value
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   temp_strm << "a=`env irodsEnvFile=" << irods_env_filename << " "
             << "imeta mod -d " << path << " " << attribute << " " << old_value << " "
             << "v:" << new_value << "`; echo $?; echo $a"; 


#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "temp_strm.str() == " << temp_strm.str() << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   char buffer[512];
   memset(buffer, 0, 512);

   errno = 0;
   FILE *fp = popen(temp_strm.str().c_str(), "r");

   if (fp == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR! In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`popen' failed, returning 0:"
            << endl;

       if (errno != 0)
           cerr << strerror(errno) << endl;

       cerr << "Failed to execute `imeta' command in shell."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex();      

       return 1;

   }  /* |if (fp == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`popen' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    
 
@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   status = fread(buffer, 1, 511, fp);

   if (status == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR! In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`fread' failed, returning 0:"
            << endl
            << "Failed to read output of `imeta' command, executed via `popen'."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex();      

       pclose(fp);

       return 1;

   }  /* |if (status == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   else if (status == 511)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR! In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`fread' returned 1023:"
            << endl
            << "Output of `imeta' command, executed via `popen', exceeds maximum amount "
            << "(510 bytes)."
            << endl 
            << "This is not permitted."
            << endl 
            << "`buffer' == " 
            << endl 
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex();      

       pclose(fp);

       return 1;

   }  /* |if (status == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`fread' succeeded, returning " << status << "."
            << endl
            << "`buffer' == " 
            << endl 
            << buffer
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   pclose(fp);
  
@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   int temp_val = 0;

   status = sscanf(buffer, "%d", &temp_val);

   if (status != 1)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR! In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`sscanf' failed, returning " << status << ":"
            << endl
            << "Failed to read exit status of `imeta' command, executed via `popen'."
            << endl 
            << "`buffer' == " 
            << endl 
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex();      

       return 1;

   }  /* |if (status != 1)|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

   if (temp_val != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR! In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`imeta' command, executed via `popen', failed, returning " << temp_val << ":"
            << endl 
            << "`buffer' == " 
            << endl 
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl;
       unlock_cerr_mutex();      

       return 1;

   }  /* |if (status != 1)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::modify_irods_avu| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::modify_irods_avu':"
            << endl
            << "`imeta' command, executed via `popen', succeeded, returning 0:"
            << endl 
            << "`buffer' == " 
            << endl 
            << buffer
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::modify_irods_avu' successfully "
            << "with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   return 0;

}  /* End of |Irods_Object_Type::modify_irods_avu| definition  */

@q *** (3) Verify signature (|verify_signature|).  @>

@ Verify signature (|verify_signature|).
\initials{LDF 2014.01.13.}

\LOG
\initials{LDF 2014.01.13.}
Added this function.
\ENDLOG

@q **** (4) Declaration  @>

@<|Irods_Object_Type| function declarations@>=

int
verify_signature(MYSQL *mysql_ptr, 
                 Response_Type &response, 
                 Irods_Object_Type &curr_irods_object,
                 string thread_str = "");

@q **** (4) Definition  @>
@
@<|Irods_Object_Type::verify_signature| definition@>=
int
Irods_Object_Type::verify_signature(MYSQL *mysql_ptr,
                                    Response_Type &response,
                                    Irods_Object_Type &curr_irods_object,
                                    string thread_str)
{
@q ***** (5) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status = 0;

   FILE *fp = 0;
   char buffer[2048];

   string temp_str;

   int temp_val = 0;

   size_t pos = 0;

   memset(buffer, 0, 2048);

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Entering `Irods_Object_Type::verify_signature'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl;
       show("*this:");
 
       response.show("response.");
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   bool is_signature;

   if (irods_object_ref_id > 0)
   {
      is_signature = true;
      curr_irods_object.id = irods_object_ref_id;

   }

   else if (detached_signature_irods_object_id > 0)
   {
      is_signature = false;
      curr_irods_object.id = detached_signature_irods_object_id;
   }

   else 
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `Irods_Object_Type::verify_signature':"
           << endl
           << "`irods_object_ref_id' == 0 && `detached_signature_irods_object_id' == 0."
           << endl 
           << "Can't verify signature."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
       unlock_cerr_mutex(); 
      
       return 1;

   }  /* |else| */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   status = curr_irods_object.get_from_database(mysql_ptr, false, thread_str);

   if (status <= 0)
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "ERROR!  In `Irods_Object_Type::verify_signature':"
           << endl
           << "`Irods_Object_Type::get_from_database' failed, returning " << status << ":"
           << endl 
           << "Failed to retrieve row from `Irods_Objects' database table "
           << "for `irods_object_id' == " << curr_irods_object.id << "."
           << endl
           << "Exiting function unsuccessfully with return value 1."
           << endl;
       unlock_cerr_mutex(); 
      
       return 1;

   }  /* |if (status <= 0)|  */
   
@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl
            << "`Irods_Object_Type::get_from_database' succeeded, returning " << status << ":"
            << endl;

       curr_irods_object.show("curr_irods_object:");

       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
 
   stringstream temp_strm;

   if (is_signature)
   {
      temp_strm << "a=`env LANG=en_US.UTF-8 iget " << curr_irods_object.path << " - | "
                << "gpg --verify -vv " << response.temporary_filename << " - 2>&1`; "
                << "echo $?; echo $a";
   }
   else 
   {
      lock_cerr_mutex(); 
      cerr << thread_str << "WARNING!  In `Irods_Object_Type::verify_signature':"
           << endl
           << "`is_signature' == `false':  This case hasn't been programmed yet."
           << endl 
           << "Exiting function unsuccessfully with return value 3."
           << endl;
       unlock_cerr_mutex(); 
      
       return 3;

   }  /* |else|  */


@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl
            << "`temp_strm.str()' == " << temp_strm.str()
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   errno = 0;

   fp = popen(temp_strm.str().c_str(), "r");

   if (fp == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In "
            << "`Irods_Object_Type::verify_signature':"
            << endl 
            << "`popen' failed, returning NULL:"
            << endl;
 
       if (errno != 0)
           cerr << strerror(errno) << endl;

       cerr << "Failed to execute `iget' and/or gpg --verify' command in shell."
            << endl
            << "Exiting function with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (fp == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`popen' succeeded."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   status = fread(buffer, 1, 2047, fp);

   if (status == 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In "
            << "`Irods_Object_Type::verify_signature':"
            << endl 
            << "`fread' failed, returning 0:"
            << endl
            << "`iget' and/or `gpg --verify' commands in shell failed, "
            << "or this function failed to ."
            << "read their output."
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       pclose(fp);

       return 1;

   }  /* |if (status == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   else if (status == 2047)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In "
            << "`Irods_Object_Type::verify_signature':"
            << endl 
            << "`fread' returned 2047:"
            << endl
            << "Output of `iget' and/or gpg --verify' commands, executed in shell, "
            << "exceeds maximum amount (2046 characters)."
            << endl 
            << "This is not permitted."
            << endl
            << "`buffer' =="
            << buffer
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       pclose(fp);

       return 1;

   }  /* |if (status == 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`fread' succeeded, returning " << status
            << endl
            << "`buffer' ==" 
            << endl 
            << buffer
            << endl; 
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */      
    
@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   pclose(fp);
   fp = 0;

   temp_strm.str("");

   temp_strm << buffer;   

   memset(buffer, 0, 2048);      
   temp_strm.clear();

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`temp_strm.str()' =="
            << endl
            << temp_strm.str()
            << endl; 
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */      
   
   status = -101;

   temp_strm >> status;
      
   temp_str = temp_strm.str();

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In "
            << "`Irods_Object_Type::verify_signature':"
            << endl 
            << "`iget' and/or gpg --verify' commands, executed in shell, failed, "
            << "returning " << status << "."
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`iget' and `gpg --verify' commands, executed in shell, succeeded, "
            << "returning 0."
            << endl
            << "`temp_str' =="
            << endl
            << temp_str
            << endl; 
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */      

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   pos = temp_str.find("keyid");

   if (pos == string::npos)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`iget' and `gpg --verify' succeeded, but failed to read key ID "
            << "from the latter's output:"
            << endl 
            << "`temp_str' == " << temp_str
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;
 
   }  /* |if (pos == string::npos)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   temp_str.erase(0, pos + 6);

   pos = temp_str.find(" ");

   if (pos == string::npos)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::verify_signature':"
            << endl 
            << "`gpg --verify' succeeded, but failed to read key ID from its output:"
            << endl 
            << "`temp_str' == " << temp_str
            << endl 
            << "Exiting function unsuccessfully with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;
 
   }  /* |if (pos == string::npos)|  */

   temp_str.erase(pos);

   temp_val = response.gpg_key_fingerprint.length() - temp_str.length();

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "Read key ID successfully:"
            << endl
            << "`temp_str'                                    == " << temp_str
            << endl
            << "response.gpg_key_fingerprint.substr(temp_val) == " 
            << response.gpg_key_fingerprint.substr(temp_val)
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

   status = temp_str.compare(response.gpg_key_fingerprint.substr(temp_val));

   if (status != 0)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "ERROR!  In `Irods_Object_Type::verify_signature':"
            << endl 
            << "Key ID mismatch:"
            << endl 
            << "`temp_str'                                      == " << temp_str
            << endl 
            << "`response.gpg_key_fingerprint.substr(temp_val)' == "
            << response.gpg_key_fingerprint.substr(temp_val)
            << endl 
            << "`response.gpg_key_fingerprint' == "
            << response.gpg_key_fingerprint
            << endl 
            << "Exiting function unsuccessfully "
            << "with return value 1."
            << endl; 
       unlock_cerr_mutex(); 

       return 1;

   }  /* |if (status != 0)|  */

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "In `Irods_Object_Type::verify_signature':"
            << endl 
            << "Key IDs match.  Verification successful."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>
@
@<|Irods_Object_Type::verify_signature| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << thread_str << "Exiting `Irods_Object_Type::verify_signature' "
            << "successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

    return 0;

}  /* End of |Irods_Object_Type::verify_signature| definition  */

@q **** (4) @>

@q *** (3) @>

@q ** (2) Putting iRODS Object Type together.@>

@ Putting \.{iRODS\_Object\_Type} together.
\initials{LDF 2012.10.12.}

@c
@<Include files@>@;@/
using namespace std;
using namespace gwrdifpk;
@<|Irods_Object_Type| constructor definitions@>@;@/
@<|Irods_Object_Type::set| definitions@>@;@/
@<|Irods_Object_Type::get_avus_from_irods_system| definition@>@;@/
@<|Irods_Object_Type::clear| definition@>@;@/
@<|Irods_Object_Type::show| definition@>@;@/
@<|Irods_Object_Type::write_to_database| definition@>@;@/
@<|Irods_Object_Type::get_from_database| definition@>@;@/
@<|Irods_Object_Type::update| definition@>@;@/
@<|Irods_Object_Type::put_irods_object| definition@>@;@/
@<|Irods_Object_Type::add_avu| definition@>@;@/
@<|Irods_Object_Type::add_avu_cond| definition@>@;@/
@<|Irods_Object_Type::mark_for_deletion| definition@>@;@/
@<|Irods_Object_Type::delete_from_archive| definition@>@;@/
@<|Irods_Object_Type::delete_from_gwirdsif_db| definition@>@;@/
@<|Irods_Object_Type::add_handle_value| definition@>@;@/
@<|Irods_Object_Type::find_avu| definition@>@;@/
@<|Irods_Object_Type::undelete_irods_objects| definition@>@;@/
@<|Irods_Object_Type::rename_irods_object| definition@>@;@/
@<|Irods_Object_Type::modify_irods_avu| definition@>@;@/
@<|Irods_Object_Type::verify_signature| definition@>@;@/

@q *** (3) This is what's written to the header file `irdsobtp.h'.  @>

@ This is what's written to the header file \filename{irdsobtp.h}.  
\initials{LDF 2008.12.05.}

@(irdsobtp.h@>=
#ifndef IRDSOBTP_H
#define IRDSOBTP_H 1
using namespace std;
using namespace gwrdifpk;
@<Declare |class Irods_Object_Type|@>@;@/
#endif 


@q (progn (cweb-mode) (outline-minor-mode))                           @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>
