@q lstnrmtx.web  @>
@q Created by Laurence D. Finston (LDF) Fri Sep 21 15:34:19 CEST 2012  @>

@q * (1) Copyright and License.@>

@q This file is part of gwrdifpk, a package for long-term archiving.  @>
@q Copyright (C) 2013, 2014 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen @>

@q gwrdifpk is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q gwrdifpk is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License          @>
@q along with gwrdifpk; if not, write to the Free Software                    @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from @>
@q https://github.com/gwdg/gwrdifpk.git    @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gwdg.de@>

@q Laurence D. Finston                                                   @>
@q Gesellschaft fuer wissenschaftliche Datenverarbeitung mbH Goettingen  @>
@q Am Fassberg 11         					         @>
@q 37077 Goettingen              					 @>
@q Germany                           					 @>                                

@q Laurence.Finston@@gwdg.de (@@ stands for a single "at" sign.)@>

@q ** (2)  lstnrmtx.web  @>
@* Listen function for remote connections with X\PERIOD 509 authentication.
\initials{LDF 2012.09.21.}

@q ** (2) Include files  @>

@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <math.h>
#include <pwd.h>
#include <grp.h>
#include <dirent.h>


#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/un.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <arpa/inet.h>
#include <netdb.h>
#include <netinet/in.h>

#include <gcrypt.h> /* for |gcry_control| */
#include <gnutls/gnutls.h>
#include<gnutls/x509.h>

#include <string>
#include <iomanip>
#include <ios>
#include <iostream>
#include <stdarg.h>
#include <limits.h>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <time.h>
#include <math.h>
#include <sstream>   

#include <map>
#include <vector>
#include <deque>
#include <stack>
#include <set>

#include <pthread.h>

#if HAVE_CONFIG_H
#include "config.h"
#endif

#include <mysql.h>

#include <expat.h>

#undef NAME_LEN
#undef LOCAL_HOST

#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "excptntp.h++"
#include "utilfncs.h++"
#include "grouptp.h++"
#include "hndlvltp.h++"
#include "irdsavtp.h++"
#include "parser.h++"  
#include "scanner.h++"
#include "rspnstp.h++" 
#include "irdsobtp.h++"
#include "hndltype.h++"
#include "dcmdsbtp.h++"
#include "dcmtdttp.h++"
#include "x509cert.h++"
#include "dstngnmt.h++"
#include "pullrqtp.h++"
#include "scprpmtp.h++"
#include "connect.h++"
#include "clntfncs.h++"

#include "gntlsfnc.h++"
#include "helper.h++"
#include "ex_rfc2818.h++"
#include "usrinftp.h++"

@q ** (2) |listen_remote_X_509|  @>
@ |listen_remote_X_509|.
\initials{LDF 2012.09.21.}

\LOG
\initials{LDF 2012.09.21.}
Added this function.  
\ENDLOG

@q *** (3) Declaration @>

@<|listen_remote_X_509| declaration@>=
void*
listen_remote_X_509(void *v);

@q *** (3) Definition @>
@
@<|listen_remote_X_509| definition@>=
void*
listen_remote_X_509(void *v)
{
@q **** (4) @>

   bool DEBUG = false;  /* |true|  */
   set_debug_level(DEBUG, 0, 0); 

   int status = 0;

   char buffer[BUFFER_SIZE];
   memset(buffer, 0, BUFFER_SIZE);

   int listen_remote_X_509_thread_ctr = 0;

   if (v != 0)
      listen_remote_X_509_thread_ctr = *static_cast<int*>(v);

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] "
            << "Entering `listen_remote_X_509'."
            << endl
            << "`config_dir' == " << config_dir
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */

@q **** (4) @>
@
@<|listen_remote_X_509| definition@>=

   DEFAULT_CERT_FILENAME  = config_dir;
   DEFAULT_CERT_FILENAME += "/gwirdsif_cert.pem";

   DEFAULT_KEY_FILENAME   = config_dir;
   DEFAULT_KEY_FILENAME  += "/gwirdsif_key.pem";

   DEFAULT_CA_FILENAME    = config_dir;
   DEFAULT_CA_FILENAME   += "/ca_cert.pem";

   DEFAULT_CRL_FILENAME = "";

   string curr_key_filename  = DEFAULT_KEY_FILENAME;
   string curr_cert_filename = DEFAULT_CERT_FILENAME;
   string curr_ca_filename   = DEFAULT_CA_FILENAME;
   string curr_crl_filename  = DEFAULT_CRL_FILENAME;

   pthread_attr_t attr;

   gnutls_certificate_credentials_t cert_cred;

   gnutls_x509_crt_t *ca_list;  
   unsigned int ca_list_size;

   int err, listen_sd, i;
   int ret;
   struct sockaddr_in sa_serv;
   struct sockaddr_in sa_cli;
   int client_len;
   char topbuf[512];
   int optval = 1;

   Scan_Parse_Parameter_Type *param = 0;

  /* to disallow usage of the blocking /dev/random    */

  gnutls_certificate_allocate_credentials (&cert_cred);

  status = gnutls_certificate_set_x509_trust_file (cert_cred,
                                                   curr_ca_filename.c_str(),
                                                   GNUTLS_X509_FMT_PEM);
#if DEBUG_COMPILE 
  if (DEBUG)
  {
      lock_cerr_mutex();
      cerr << "In `listen_remote_X_509':"
           << endl 
           << "`gnutls_certificate_set_x509_trust_file' returned " << status
           << " (the number of certificates processed)." 
           << endl;
      unlock_cerr_mutex(); 

  }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */  

  if (curr_crl_filename != "")
  {
     status = gnutls_certificate_set_x509_crl_file (cert_cred, curr_crl_filename.c_str(),
                                                    GNUTLS_X509_FMT_PEM);
#if DEBUG_COMPILE 
     if (DEBUG)
     {
         lock_cerr_mutex();
         cerr << "In `listen_remote_X_509':"
              << endl 
              << "`gnutls_certificate_set_x509_crl_file' returned " << status
              << " (the number of CRLs (certificate revocation lists) processed)." 
              << endl;
         unlock_cerr_mutex(); 

     }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

  }  /* |if (curr_crl_filename != "")|  */

  status = gnutls_certificate_set_x509_key_file (cert_cred, 
                                                 curr_cert_filename.c_str(), 
                                                 curr_key_filename.c_str(), 
                                                 GNUTLS_X509_FMT_PEM);

#if DEBUG_COMPILE
  if (DEBUG)
  {
      lock_cerr_mutex();
      cerr << "In `listen_remote_X_509':"
           << endl
           << "`gnutls_certificate_set_x509_key_file' returned " << status
           << endl;
      unlock_cerr_mutex(); 

  }  /* |if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

  if (status != GNUTLS_E_SUCCESS)
  {
      lock_cerr_mutex(); 
      cerr << "ERROR!  In `listen_remote_X_509':"
           << endl 
           << "`gnutls_certificate_set_x509_key_file' returned "
           << status << ":"
           << endl;
      
      gnutls_perror(status);

      unlock_cerr_mutex(); 

  }  /* |if (status != GNUTLS_E_SUCCESS)|  */

#if DEBUG_COMPILE 
  else if (DEBUG)
  {
      lock_cerr_mutex(); 
      cerr << "In `listen_remote_X_509':"
           << endl 
           << "`gnutls_certificate_set_x509_key_file' returned GNUTLS_E_SUCCESS ("
           << status << ")."
           << endl;
      
      gnutls_perror(status);

      unlock_cerr_mutex(); 

  }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

  gnutls_certificate_get_x509_cas(cert_cred, &ca_list, &ca_list_size);

#if DEBUG_COMPILE 
  if (DEBUG)
  {
      lock_cerr_mutex(); 
      cerr << "In `listen_remote_X_509':  "
           << "ca_list_size == " << ca_list_size
           << endl;
      unlock_cerr_mutex(); 

  }  /* |else if (DEBUG)|  */ 
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>

  gnutls_dh_params_t dh_params;
  gnutls_rsa_params_t rsa_params;

  generate_dh_params (dh_params);
  generate_rsa_params (rsa_params);

  if (TLS_SESSION_CACHE != 0)
  {
     wrap_db_init ();
  }

@q **** (4) @>

  gnutls_certificate_set_dh_params (cert_cred, dh_params);
  gnutls_certificate_set_rsa_export_params (cert_cred, rsa_params);

  errno = 0;
  listen_sd = socket (AF_INET, SOCK_STREAM, 0);

  if (listen_sd == -1)
  {
      lock_cerr_mutex(); 
      cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "]"
           << endl 
           << "ERROR!  In `listen_remote_X_509':  `socket' failed, returning -1:"
           << endl 
           << strerror(errno) << endl
           << "Exiting thread function unsuccessfully with return value 0."
           << endl;
      unlock_cerr_mutex(); 
      pthread_exit(0);
  }
  
  memset (&sa_serv, '\0', sizeof (sa_serv));
  sa_serv.sin_family = AF_INET;
  sa_serv.sin_addr.s_addr = INADDR_ANY;
  sa_serv.sin_port = htons (port_num_x_509);  /* Server Port number, default 5557 */

  setsockopt (listen_sd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof (int));

  errno = 0;
  status = bind (listen_sd, (SA *) & sa_serv, sizeof (sa_serv));

  if (status == -1)
  {
      lock_cerr_mutex(); 
      cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "]"
           << endl 
           << "ERROR!  In `listen_remote_X_509':  `bind' failed, returning -1:"
           << endl 
           << strerror(errno) << endl
           << "Exiting thread function unsuccessfully with return value 0."
           << endl;
      unlock_cerr_mutex(); 

      close(listen_sd);

      pthread_exit(0);
  }

  errno = 0;
  status = listen (listen_sd, 1024);

  if (status == -1)
  {
      lock_cerr_mutex(); 
      cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "]"
           << endl 
           << "ERROR!  In `listen_remote_X_509':  `listen' failed, returning -1:"
           << endl 
           << strerror(errno) << endl
           << "Exiting thread function unsuccessfully with return value 0."
           << endl;
      unlock_cerr_mutex(); 

      close(listen_sd);

      pthread_exit(0);
  }

  stringstream temp_strm;

  temp_strm << "[Thread " << listen_remote_X_509_thread_ctr << "]  "
            << "In `listen_remote_X_509':  Server ready. Listening to port " 
            << port_num_x_509 << "."
            << endl;

  lock_cout_mutex(); 
  lock_cerr_mutex(); 
  cout << temp_strm.str();
  unlock_cerr_mutex(); 
  unlock_cout_mutex(); 

  temp_strm.str("");  

  client_len = sizeof(sa_cli);

  pthread_attr_init(&attr); 

  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);

@q **** (4) Main accept loop.  @>

@ Main accept loop.  \initials{LDF 2012.09.21.}

\LOG
\initials{LDF 2013.05.15.}
@:BUG FIX@> BUG FIX:  Now deleting |param| and continuing the main accept loop when 
an error occurs.  Previously, |param| was not deleted (memory leak!) and |pthread_exit| was
called, which caused the ``listen'' thread to exit, which after a certain point was not what
I wanted.
\ENDLOG 

@<|listen_remote_X_509| definition@>=

   pthread_t id = 0UL; 

   for(;;) 
   { 
@q ***** (5) @>

      param = 0;
      id = 0UL;

      try { 
#if DEBUG_COMPILE 
           if (DEBUG) 
           { 
               lock_cerr_mutex(); 
               cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] [Thread " 
                    << listen_remote_X_509_thread_ctr << "] " << "In `listen_remote_X_509': " 
                    << "Creating new `Scan_Parse_Parameter_Type' object."  << endl;
               unlock_cerr_mutex();

           }  /* |if (DEBUG)| */ 
#endif /* |DEBUG_COMPILE| */

           param = new Scan_Parse_Parameter_Type;
           param->connection_type = Scan_Parse_Parameter_Type::X_509_AUTH_TYPE;

      }/* |try| */

      /* Currently, the |Scan_Parse_Parameter_Type| constructor doesn't throw any other
         exceptions.  \initials{LDF 2012.07.13.}  */ 
 
      catch (Initialize_Exception_Type) 
      { 
          lock_cerr_mutex(); 
          cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr 
               << "] ERROR!  In `listen_remote_X_509': " 
               << "The `Scan_Parse_Parameter_Type' constructor "
               << "failed, throwing exception `Initialize_Exception_Type'."  
               << endl << "Failed to create `Scan_Parse_Parameter_Type' object."  
               << endl 
               << "Exiting thread function `listen_remote_X_509' unsuccessfully " 
               << "with exit status 0."  << endl; 
          unlock_cerr_mutex();

          close(listen_sd); 
          pthread_exit(0);

      }/* |catch| */
       
#if DEBUG_COMPILE
      if (DEBUG)
      {
          lock_cerr_mutex(); 
          cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr 
               << "] In `listen_remote_X_509': " 
               << "Finished creating new `Scan_Parse_Parameter_Type' object."  
               << endl;
          unlock_cerr_mutex(); 

      }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q ***** (5) @>

      param->session = initialize_tls_session (cert_cred);

      param->sock = accept (listen_sd, (SA *) &sa_cli, (socklen_t*) &client_len);

      lock_cout_mutex(); 
      lock_cerr_mutex(); 
      cout << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "]"
           << endl
           << "In `listen_remote_X_509':  Connection from " 
           << inet_ntop (AF_INET, &sa_cli.sin_addr, topbuf, sizeof (topbuf))
           << ", port " << ntohs (sa_cli.sin_port) 
           << endl; 
      unlock_cerr_mutex();
      unlock_cout_mutex(); 

@q ***** (5) @>

   gnutls_transport_set_ptr (param->session,
                             reinterpret_cast<gnutls_transport_ptr_t>(param->sock));

   status = gnutls_handshake (param->session);

   if (status < 0) 
   {

      lock_cerr_mutex(); 
      cerr << "ERROR!  In `listen_remote_X_509': *** Handshake has failed:" 
           << endl; 
      gnutls_strerror (status); 
      cerr << endl 
           << "Deinitializing `param->session'.  Continuing main accept loop." 
           << endl;
      unlock_cerr_mutex();

      gnutls_deinit (param->session);

      delete param;

      param = 0;

      continue;

   }  /* |if (status < 0)| */


@q ***** (5) @>
@
\LOG
\initials{LDF 2013.05.08.}
Added this section.

\initials{LDF 2013.05.15.}
Added code for sending error message to client.
\ENDLOG

@<|listen_remote_X_509| definition@>=

   status = verify_certificate(param->session, &param->user_cert);

   if (status != 0)
   {

      lock_cerr_mutex(); 
      cerr << "ERROR!  In `listen_remote_X_509':  `verify_certificate' failed, "
           << "returning " << status << "."
           << endl
           << "Deinitializing `param->session'.  Continuing main accept loop." 
           << endl;
      unlock_cerr_mutex();
   
      memset(buffer, 0, BUFFER_SIZE);

      strcpy(buffer, "AUTHENTICATION ERROR 2");

      gnutls_record_send(param->session, buffer, strlen(buffer));
  
      memset(buffer, 0, BUFFER_SIZE);

      close(param->sock);
      param->sock = 0;

      gnutls_deinit (param->session);

      delete param;

      param = 0;

      continue;

   }  /* |if (status != 0)|  */
#if DEBUG_COMPILE
   else if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "In `listen_remote_X_509':  `verify_certificate' succeeded, returning 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   Distinguished_Name_Type distinguished_name;
   distinguished_name = param->user_cert;

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       distinguished_name.show("distinguished_name:");
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@
\LOG
\initials{LDF 2013.05.10.}
Added this section.
\ENDLOG

@<|listen_remote_X_509| definition@>=

   status = param->get_database_username();

   if (status != 0)
   {
      lock_cerr_mutex(); 
      cerr << "ERROR!  In `listen_remote_X_509':  "
           << "`Scan_Parse_Parameter_Type::get_database_username' failed, returning "
           << status << "." 
           << endl
           << "Deinitializing `param->session'.  Continuing main accept loop." 
           << endl;
      unlock_cerr_mutex();

      gnutls_deinit (param->session);

      delete param;

      param = 0;

      continue;

   }  /* |if (status != 0)|  */
#if DEBUG_COMPILE
   else if (DEBUG)
   {
      lock_cerr_mutex(); 
      cerr << "In `listen_remote_X_509':  "
           << "`Scan_Parse_Parameter_Type::get_database_username' succeeded, returning 0."
           << endl
           << "`param->username' == " << param->username
           << endl 
           << "`param->user_id' == " << param->user_id
           << endl; 
      unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   User_Info_Type user_info;

   status = param->get_user(0, 0, "", &user_info, true);

   if (status != 0)
   {
      lock_cerr_mutex(); 
      cerr << "ERROR!  In `listen_remote_X_509':  "
           << "`Scan_Parse_Parameter_Type::get_user' failed, returning "
           << status << "." 
           << endl
           << "Deinitializing `param->session'.  Continuing main accept loop." 
           << endl;
      unlock_cerr_mutex();

      gnutls_deinit (param->session);

      delete param;

      param = 0;

      continue;

   }  /* |if (status != 0)|  */
#if DEBUG_COMPILE
   else if (DEBUG)
   {
      lock_cerr_mutex(); 
      cerr << "In `listen_remote_X_509':  "
           << "`Scan_Parse_Parameter_Type::get_user' succeeded, returning 0."
           << endl
           << "`param->username' == " << param->username
           << endl 
           << "`param->user_id' == " << param->user_id
           << endl; 
      unlock_cerr_mutex(); 

   }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q ***** (5) @>

@ Put |User_Info_Type user_info| onto |global_user_info_map|.
\initials{LDF 2013.07.18.}

\LOG
\initials{LDF 2013.07.18.}
Added this section.
\ENDLOG

@<|listen_remote_X_509| definition@>=

   pthread_mutex_lock(&global_user_info_map_mutex);
   global_user_info_map[user_info.get_user_id()] = user_info;
   pthread_mutex_unlock(&global_user_info_map_mutex);

@q ***** (5) Print session info.  @>
#
@ Print session info.  
\initials{LDF 2013.05.08.}

@<|listen_remote_X_509| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] "
            << "In `listen_remote_X_509':"
            << endl
            << "Printing session info:"
            << endl;
       print_info(param->session);
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */    

@q ***** (5) @>
@    
\LOG
\initials{LDF 2013.05.23.}
Added code for setting |global_thread_ctr| after it has wrapped around.
This should never happen, unless \.{gwirdsif} runs for a {\it long\/} time without 
being stopped.
\ENDLOG 

@<|listen_remote_X_509| definition@>=
      
   pthread_mutex_lock(&thread_ctr_mutex);

   param->thread_ctr = 0;

   if (global_thread_ctr_wrapped_around == false)
   {
       param->thread_ctr = ++global_thread_ctr;
          
       if (global_thread_ctr == UINT_MAX)
       {
            global_thread_ctr_wrapped_around == true;
            global_thread_ctr = save_global_thread_ctr;
       }
   }

@q ***** (5) @>
@
@<|listen_remote_X_509| definition@>=

   else
   {
@q ****** (6) @>

        map<unsigned int, pthread_t>::iterator iter;

        for (int i = global_thread_ctr; i <= UINT_MAX; ++i)
        {
            iter = thread_ctr_id_map.find(i);

            if (iter == thread_ctr_id_map.end())
            {
                param->thread_ctr = i;

                if (i == UINT_MAX)
                   global_thread_ctr = save_global_thread_ctr;
                else
                   global_thread_ctr = i + i;   
                   
 
                break;
            }
                  
        }  /* |for|  */

@q ****** (6) @>

        if (param->thread_ctr == 0)  
        {
               /* Try again once more from the beginning. 
                  \initials{LDF 2013.05.23.}  */

            for (unsigned int i = save_global_thread_ctr; 
                 i <= UINT_MAX; 
                 ++i)
            {
               iter = thread_ctr_id_map.find(i);

               if (iter == thread_ctr_id_map.end())
               {
 
                   param->thread_ctr = i;

                   if (i == UINT_MAX)
                      global_thread_ctr = save_global_thread_ctr;
                   else
                      global_thread_ctr = i + i;   

                  break;
               }
                  
            }

        }  /* |if|  */

@q ****** (6) @>

        if (param->thread_ctr == 0)  
        {

               /* If we still couldn't set |param->thread_ctr|, we quit.
                  \initials{LDF 2013.05.23.}  */

            lock_cerr_mutex();
            cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr 
                 << "] ERROR!  In `listen_remote_X_509':  Failed to set `param->thread_ctr'."
                 << endl
                 << "Exiting thread unsuccessfully with return value 0."
                 << endl;
            unlock_cerr_mutex();  

            pthread_mutex_unlock(&thread_ctr_mutex);

            delete param;
            param = 0;

            close(listen_sd);

            pthread_exit(0);

        }

@q ****** (6) @>

   } /* |else|  */

   pthread_mutex_unlock(&thread_ctr_mutex);

@q ***** (5) @>
@
@<|listen_remote_X_509| definition@>=


#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] "
            << "In `listen_remote_X_509':  "
            << "Calling `connect_func' via `pthread_create'."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   param->remote_connection = true;
   param->anonymous = false;

   status = pthread_create(&id,
                           &attr, /* Attribute.  Thread is detached.  \initials{LDF 2013.05.15.} */
                           connect_func, 
                           static_cast<void*>(param));

   thread_ctr_id_map[param->thread_ctr] = id;
   thread_id_ctr_map[id]                = param->thread_ctr;

   
#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] "
            << "In `listen_remote_X_509':  "
            << "`pthread_create' returned " << status << "." 
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   param = 0;

@q ***** (5) @>

   }  /* |for|  */

@q **** (4) Exit.  This code will never be reached in normal operation.  @>

@ Exit.  This code will never be reached in normal operation.
\initials{LDF 2012.09.21.}

@<|listen_remote_X_509| definition@>=

#if DEBUG_COMPILE
   if (DEBUG)
   {
       lock_cerr_mutex(); 
       cerr << "[gwirdsif] [Thread " << listen_remote_X_509_thread_ctr << "] "
            << "Exiting thread function `listen_remote_X_509' successfully with return value 0."
            << endl;
       unlock_cerr_mutex(); 

   }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   pthread_attr_destroy(&attr);

   pthread_exit(0);  

}  /* End of |listen_remote_X_509| definition  */

@q **** (4) @>
@
@<Garbage@>=

@q **** (4) @>

@q *** (3) Putting `lstnrmtx.web' together.  @>

@ Putting {\tt lstnrmtx\PERIOD web} together.

@q **** (4) This is what's compiled.  @>
@ This is what's compiled.
@c
@<Include files@>@;@/


#define SA struct sockaddr

#define DH_BITS 1024

#define SOCKET_ERR(err,s) if(err==-1) {perror(s);return(1);}

using namespace std;
using namespace gwrdifpk;

@<|listen_remote_X_509| declaration@>@;@/
@<|listen_remote_X_509| definition@>@;@/

#if 0 
@<Garbage@>@;@/
#endif 

@q **** (4) This is what's written to the header file `lstnrmtx.h'.  @>

@ This is what's written to the header file \filename{lstnrmtx.h}.
\initials{LDF 2012.09.21.}

@(lstnrmtx.h@>=
#ifndef LSTNRMTX_H
#define LSTNRMTX_H 1
using namespace std;
using namespace gwrdifpk;
@<|listen_remote_X_509| declaration@>@;@/
#endif 

@q * (1) Emacs-Lisp code for use in indirect buffers  @>

@q (progn (cweb-mode) (outline-minor-mode))                          @>

@q * (1) Local variables for Emacs @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q abbrev-mode:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

